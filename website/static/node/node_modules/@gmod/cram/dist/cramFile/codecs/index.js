"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.instantiateCodec = void 0;
const errors_1 = require("../../errors");
const huffman_1 = __importDefault(require("./huffman"));
const external_1 = __importDefault(require("./external"));
const byteArrayStop_1 = __importDefault(require("./byteArrayStop"));
const byteArrayLength_1 = __importDefault(require("./byteArrayLength"));
const beta_1 = __importDefault(require("./beta"));
const gamma_1 = __importDefault(require("./gamma"));
const subexp_1 = __importDefault(require("./subexp"));
const codecClasses = {
    1: external_1.default,
    // 2: GolombCodec,
    3: huffman_1.default,
    4: byteArrayLength_1.default,
    5: byteArrayStop_1.default,
    6: beta_1.default,
    7: subexp_1.default,
    // 8: GolombRiceCodec,
    9: gamma_1.default,
};
function getCodecClassWithId(id) {
    return codecClasses[id];
}
function instantiateCodec(encodingData, dataType) {
    const CodecClass = getCodecClassWithId(dataType === 'ignore' ? 0 : encodingData.codecId);
    if (!CodecClass) {
        throw new errors_1.CramUnimplementedError(`no codec implemented for codec ID ${encodingData.codecId}`);
    }
    return new CodecClass(encodingData.parameters, dataType, instantiateCodec);
}
exports.instantiateCodec = instantiateCodec;
//# sourceMappingURL=index.js.map
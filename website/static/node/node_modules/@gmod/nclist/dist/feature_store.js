"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
//@ts-nocheck
var url_1 = __importDefault(require("url"));
var quick_lru_1 = __importDefault(require("quick-lru"));
var abortable_promise_cache_1 = __importDefault(require("abortable-promise-cache"));
var nclist_1 = __importDefault(require("./nclist"));
var array_representation_1 = __importDefault(require("./array_representation"));
var lazy_array_1 = __importDefault(require("./lazy_array"));
var util_1 = require("./util");
function idfunc() {
    return this._uniqueID;
}
function parentfunc() {
    return this._parent;
}
function childrenfunc() {
    return this.get('subfeatures');
}
/**
 * Sequence feature store using nested containment
 * lists held in JSON files that are lazily read.
 *
 * @param {object} args constructor args
 * @param {string} args.baseUrl base URL for resolving relative URLs
 * @param {string} args.urlTemplate Template string for
 *  the root file of each reference sequence. The reference sequence
 *  name will be interpolated into this string where `{refseq}` appears.
 * @param {function} args.readFile function to use for reading remote from URLs.
 */
var NCListStore = /** @class */ (function () {
    function NCListStore(_a) {
        var baseUrl = _a.baseUrl, urlTemplate = _a.urlTemplate, readFile = _a.readFile, _b = _a.cacheSize, cacheSize = _b === void 0 ? 10 : _b;
        this.baseUrl = baseUrl;
        this.urlTemplates = { root: urlTemplate };
        this.readFile = readFile;
        if (!this.readFile) {
            throw new Error("must provide a \"readFile\" function argument");
        }
        this.dataRootCache = new abortable_promise_cache_1.default({
            cache: new quick_lru_1.default({ maxSize: cacheSize }),
            fill: this.fetchDataRoot.bind(this),
        });
    }
    NCListStore.prototype.makeNCList = function () {
        return new nclist_1.default({ readFile: this.readFile });
    };
    NCListStore.prototype.loadNCList = function (refData, trackInfo, listUrl) {
        refData.nclist.importExisting(trackInfo.intervals.nclist, refData.attrs, listUrl, trackInfo.intervals.urlTemplate, trackInfo.intervals.lazyClass);
    };
    NCListStore.prototype.getDataRoot = function (refName) {
        return this.dataRootCache.get(refName, refName);
    };
    NCListStore.prototype.fetchDataRoot = function (refName) {
        var _this = this;
        var url = url_1.default.resolve(this.baseUrl, this.urlTemplates.root.replace(/{\s*refseq\s*}/g, refName));
        // fetch the trackdata
        return (0, util_1.readJSON)(url, this.readFile).then(function (trackInfo) {
            // trackInfo = JSON.parse( trackInfo );
            return _this.parseTrackInfo(trackInfo, url);
        });
    };
    NCListStore.prototype.parseTrackInfo = function (trackInfo, url) {
        var refData = {
            nclist: this.makeNCList(),
            stats: {
                featureCount: trackInfo.featureCount || 0,
            },
        };
        if (trackInfo.intervals) {
            refData.attrs = new array_representation_1.default(trackInfo.intervals.classes);
            this.loadNCList(refData, trackInfo, url);
        }
        var histograms = trackInfo.histograms;
        if (histograms && histograms.meta) {
            for (var i = 0; i < histograms.meta.length; i += 1) {
                histograms.meta[i].lazyArray = new lazy_array_1.default(__assign(__assign({}, histograms.meta[i].arrayParams), { readFile: this.readFile }), url);
            }
            refData._histograms = histograms;
        }
        // parse any strings in the histogram data that look like numbers
        if (refData._histograms) {
            Object.keys(refData._histograms).forEach(function (key) {
                var entries = refData._histograms[key];
                entries.forEach(function (entry) {
                    Object.keys(entry).forEach(function (key2) {
                        if (typeof entry[key2] === 'string' &&
                            String(Number(entry[key2])) === entry[key2]) {
                            entry[key2] = Number(entry[key2]);
                        }
                    });
                });
            });
        }
        return refData;
    };
    NCListStore.prototype.getRegionStats = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDataRoot(query.ref)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.stats];
                }
            });
        });
    };
    /**
     * fetch binned counts of feature coverage in the given region.
     *
     * @param {object} query
     * @param {string} query.refName reference sequence name
     * @param {number} query.start region start
     * @param {number} query.end region end
     * @param {number} query.numBins number of bins desired in the feature counts
     * @param {number} query.basesPerBin number of bp desired in each feature counting bin
     * @returns {object} as:
     *    `{ bins: hist, stats: statEntry }`
     */
    NCListStore.prototype.getRegionFeatureDensities = function (_a) {
        var e_1, _b;
        var refName = _a.refName, start = _a.start, end = _a.end, numBins = _a.numBins, basesPerBin = _a.basesPerBin;
        return __awaiter(this, void 0, void 0, function () {
            var data, stats, statEntry, histogramMeta, i, binRatio, firstServerBin, histogram, bin, _c, _d, _e, i, val, e_1_1, hist;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0: return [4 /*yield*/, this.getDataRoot(refName)];
                    case 1:
                        data = _f.sent();
                        if (numBins) {
                            basesPerBin = (end - start) / numBins;
                        }
                        else if (basesPerBin) {
                            numBins = Math.ceil((end - start) / basesPerBin);
                        }
                        else {
                            throw new TypeError('numBins or basesPerBin arg required for getRegionFeatureDensities');
                        }
                        stats = data._histograms.stats || [];
                        statEntry = stats.find(function (entry) { return entry.basesPerBin >= basesPerBin; });
                        histogramMeta = data._histograms.meta[0];
                        for (i = 0; i < data._histograms.meta.length; i += 1) {
                            if (basesPerBin >= data._histograms.meta[i].basesPerBin) {
                                histogramMeta = data._histograms.meta[i];
                            }
                        }
                        binRatio = basesPerBin / histogramMeta.basesPerBin;
                        if (!(binRatio > 0.9 && Math.abs(binRatio - Math.round(binRatio)) < 0.0001)) return [3 /*break*/, 14];
                        firstServerBin = Math.floor(start / histogramMeta.basesPerBin);
                        binRatio = Math.round(binRatio);
                        histogram = [];
                        for (bin = 0; bin < numBins; bin += 1) {
                            histogram[bin] = 0;
                        }
                        _f.label = 2;
                    case 2:
                        _f.trys.push([2, 7, 8, 13]);
                        _c = __asyncValues(histogramMeta.lazyArray.range(firstServerBin, firstServerBin + binRatio * numBins - 1));
                        _f.label = 3;
                    case 3: return [4 /*yield*/, _c.next()];
                    case 4:
                        if (!(_d = _f.sent(), !_d.done)) return [3 /*break*/, 6];
                        _e = _d.value, i = _e[0], val = _e[1];
                        // this will count features that span the boundaries of
                        // the original histogram multiple times, so it's not
                        // perfectly quantitative.  Hopefully it's still useful, though.
                        histogram[Math.floor((i - firstServerBin) / binRatio)] += val;
                        _f.label = 5;
                    case 5: return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_1_1 = _f.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _f.trys.push([8, , 11, 12]);
                        if (!(_d && !_d.done && (_b = _c.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, _b.call(_c)];
                    case 9:
                        _f.sent();
                        _f.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13: return [2 /*return*/, { bins: histogram, stats: statEntry }];
                    case 14: return [4 /*yield*/, data.nclist.histogram(start, end, numBins)];
                    case 15:
                        hist = _f.sent();
                        return [2 /*return*/, { bins: hist, stats: statEntry }];
                }
            });
        });
    };
    /**
     * Fetch features in a given region. This method is an asynchronous generator
     * yielding feature objects.
     *
     * @param {object} args
     * @param {string} args.refName reference sequence name
     * @param {number} args.start start of region. 0-based half-open.
     * @param {number} args.end end of region. 0-based half-open.
     * @yields {object}
     */
    NCListStore.prototype.getFeatures = function (_a) {
        var refName = _a.refName, start = _a.start, end = _a.end;
        return __asyncGenerator(this, arguments, function getFeatures_1() {
            var data, accessors, _b, _c, _d, feature, path, uniqueID, e_2_1;
            var e_2, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0: return [4 /*yield*/, __await(this.getDataRoot(refName))];
                    case 1:
                        data = _f.sent();
                        accessors = data.attrs && data.attrs.accessors();
                        _f.label = 2;
                    case 2:
                        _f.trys.push([2, 9, 10, 15]);
                        _b = __asyncValues(data.nclist.iterate(start, end));
                        _f.label = 3;
                    case 3: return [4 /*yield*/, __await(_b.next())];
                    case 4:
                        if (!(_c = _f.sent(), !_c.done)) return [3 /*break*/, 8];
                        _d = _c.value, feature = _d[0], path = _d[1];
                        // the unique ID is a stringification of the path in the
                        // NCList where the feature lives; it's unique across the
                        // top-level NCList (the top-level NCList covers a
                        // track/chromosome combination)
                        // only need to decorate a feature once
                        if (!feature.decorated) {
                            uniqueID = path.join(',');
                            this.decorateFeature(accessors, feature, "".concat(refName, ",").concat(uniqueID));
                        }
                        return [4 /*yield*/, __await(feature)];
                    case 5: return [4 /*yield*/, _f.sent()];
                    case 6:
                        _f.sent();
                        _f.label = 7;
                    case 7: return [3 /*break*/, 3];
                    case 8: return [3 /*break*/, 15];
                    case 9:
                        e_2_1 = _f.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 15];
                    case 10:
                        _f.trys.push([10, , 13, 14]);
                        if (!(_c && !_c.done && (_e = _b.return))) return [3 /*break*/, 12];
                        return [4 /*yield*/, __await(_e.call(_b))];
                    case 11:
                        _f.sent();
                        _f.label = 12;
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        if (e_2) throw e_2.error;
                        return [7 /*endfinally*/];
                    case 14: return [7 /*endfinally*/];
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    // helper method to recursively add .get and .tags methods to a feature and its
    // subfeatures
    NCListStore.prototype.decorateFeature = function (accessors, feature, id, parent) {
        var _this = this;
        feature.get = accessors.get;
        feature.tags = accessors.tags;
        feature._uniqueID = id;
        feature.id = idfunc;
        feature._parent = parent;
        feature.parent = parentfunc;
        feature.children = childrenfunc;
        (feature.get('subfeatures') || []).forEach(function (f, i) {
            _this.decorateFeature(accessors, f, "".concat(id, "-").concat(i), feature);
        });
        feature.decorated = true;
    };
    return NCListStore;
}());
exports.default = NCListStore;
//# sourceMappingURL=feature_store.js.map
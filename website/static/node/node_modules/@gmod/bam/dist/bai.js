"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var long_1 = __importDefault(require("long"));
var virtualOffset_1 = require("./virtualOffset");
var chunk_1 = __importDefault(require("./chunk"));
var indexFile_1 = __importDefault(require("./indexFile"));
var util_1 = require("./util");
var BAI_MAGIC = 21578050; // BAI\1
function roundDown(n, multiple) {
    return n - (n % multiple);
}
function roundUp(n, multiple) {
    return n - (n % multiple) + multiple;
}
var BAI = /** @class */ (function (_super) {
    __extends(BAI, _super);
    function BAI() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BAI.prototype.parsePseudoBin = function (bytes, offset) {
        var lineCount = (0, util_1.longToNumber)(long_1.default.fromBytesLE(Array.prototype.slice.call(bytes, offset + 16, offset + 24), true));
        return { lineCount: lineCount };
    };
    BAI.prototype.lineCount = function (refId, opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var prom, index, ret;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.parse(opts)];
                    case 1:
                        prom = _a.sent();
                        index = prom.indices[refId];
                        if (!index) {
                            return [2 /*return*/, -1];
                        }
                        ret = index.stats || {};
                        return [2 /*return*/, ret.lineCount === undefined ? -1 : ret.lineCount];
                }
            });
        });
    };
    BAI.prototype.fetchBai = function (opts) {
        var _this = this;
        if (opts === void 0) { opts = {}; }
        if (!this.baiP) {
            this.baiP = this.filehandle.readFile(opts).catch(function (e) {
                _this.baiP = undefined;
                throw e;
            });
        }
        return this.baiP;
    };
    // fetch and parse the index
    BAI.prototype._parse = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, bytes, depth, binLimit, currOffset, i, binCount, stats, binIndex, j, bin, chunkCount, chunks, k, u, v, linearCount, linearIndex, k;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = { bai: true, maxBlockSize: 1 << 16 };
                        return [4 /*yield*/, this.fetchBai()
                            // check BAI magic numbers
                        ];
                    case 1:
                        bytes = _a.sent();
                        // check BAI magic numbers
                        if (bytes.readUInt32LE(0) !== BAI_MAGIC) {
                            throw new Error('Not a BAI file');
                        }
                        data.refCount = bytes.readInt32LE(4);
                        depth = 5;
                        binLimit = ((1 << ((depth + 1) * 3)) - 1) / 7;
                        // read the indexes for each reference sequence
                        data.indices = new Array(data.refCount);
                        currOffset = 8;
                        for (i = 0; i < data.refCount; i += 1) {
                            binCount = bytes.readInt32LE(currOffset);
                            stats = void 0;
                            currOffset += 4;
                            binIndex = {};
                            for (j = 0; j < binCount; j += 1) {
                                bin = bytes.readUInt32LE(currOffset);
                                currOffset += 4;
                                if (bin === binLimit + 1) {
                                    currOffset += 4;
                                    stats = this.parsePseudoBin(bytes, currOffset);
                                    currOffset += 32;
                                }
                                else if (bin > binLimit + 1) {
                                    throw new Error('bai index contains too many bins, please use CSI');
                                }
                                else {
                                    chunkCount = bytes.readInt32LE(currOffset);
                                    currOffset += 4;
                                    chunks = new Array(chunkCount);
                                    for (k = 0; k < chunkCount; k += 1) {
                                        u = (0, virtualOffset_1.fromBytes)(bytes, currOffset);
                                        v = (0, virtualOffset_1.fromBytes)(bytes, currOffset + 8);
                                        currOffset += 16;
                                        this._findFirstData(data, u);
                                        chunks[k] = new chunk_1.default(u, v, bin);
                                    }
                                    binIndex[bin] = chunks;
                                }
                            }
                            linearCount = bytes.readInt32LE(currOffset);
                            currOffset += 4;
                            linearIndex = new Array(linearCount);
                            for (k = 0; k < linearCount; k += 1) {
                                linearIndex[k] = (0, virtualOffset_1.fromBytes)(bytes, currOffset);
                                currOffset += 8;
                                this._findFirstData(data, linearIndex[k]);
                            }
                            data.indices[i] = { binIndex: binIndex, linearIndex: linearIndex, stats: stats };
                        }
                        return [2 /*return*/, data];
                }
            });
        });
    };
    BAI.prototype.indexCov = function (seqId, start, end, opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var v, range, indexData, seqIdx, _a, linearIndex, stats, e, s, depths, totalSize, currentPos, i, j;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        v = 16384;
                        range = start !== undefined;
                        return [4 /*yield*/, this.parse(opts)];
                    case 1:
                        indexData = _b.sent();
                        seqIdx = indexData.indices[seqId];
                        if (!seqIdx) {
                            return [2 /*return*/, []];
                        }
                        _a = seqIdx.linearIndex, linearIndex = _a === void 0 ? [] : _a, stats = seqIdx.stats;
                        if (!linearIndex.length) {
                            return [2 /*return*/, []];
                        }
                        e = end !== undefined ? roundUp(end, v) : (linearIndex.length - 1) * v;
                        s = start !== undefined ? roundDown(start, v) : 0;
                        if (range) {
                            depths = new Array((e - s) / v);
                        }
                        else {
                            depths = new Array(linearIndex.length - 1);
                        }
                        totalSize = linearIndex[linearIndex.length - 1].blockPosition;
                        if (e > (linearIndex.length - 1) * v) {
                            throw new Error('query outside of range of linear index');
                        }
                        currentPos = linearIndex[s / v].blockPosition;
                        for (i = s / v, j = 0; i < e / v; i++, j++) {
                            depths[j] = {
                                score: linearIndex[i + 1].blockPosition - currentPos,
                                start: i * v,
                                end: i * v + v,
                            };
                            currentPos = linearIndex[i + 1].blockPosition;
                        }
                        return [2 /*return*/, depths.map(function (d) {
                                return __assign(__assign({}, d), { score: (d.score * stats.lineCount) / totalSize });
                            })];
                }
            });
        });
    };
    /**
     * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)
     * @returns {Array[number]}
     */
    BAI.prototype.reg2bins = function (beg, end) {
        end -= 1;
        return [
            [0, 0],
            [1 + (beg >> 26), 1 + (end >> 26)],
            [9 + (beg >> 23), 9 + (end >> 23)],
            [73 + (beg >> 20), 73 + (end >> 20)],
            [585 + (beg >> 17), 585 + (end >> 17)],
            [4681 + (beg >> 14), 4681 + (end >> 14)],
        ];
    };
    BAI.prototype.blocksForRange = function (refId, min, max, opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var indexData, ba, overlappingBins, chunks, _i, overlappingBins_1, _a, start, end, bin, binChunks, c, nintv, lowest, minLin, maxLin, i, vp;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (min < 0) {
                            min = 0;
                        }
                        return [4 /*yield*/, this.parse(opts)];
                    case 1:
                        indexData = _b.sent();
                        if (!indexData) {
                            return [2 /*return*/, []];
                        }
                        ba = indexData.indices[refId];
                        if (!ba) {
                            return [2 /*return*/, []];
                        }
                        overlappingBins = this.reg2bins(min, max);
                        chunks = [];
                        // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned
                        for (_i = 0, overlappingBins_1 = overlappingBins; _i < overlappingBins_1.length; _i++) {
                            _a = overlappingBins_1[_i], start = _a[0], end = _a[1];
                            for (bin = start; bin <= end; bin++) {
                                if (ba.binIndex[bin]) {
                                    binChunks = ba.binIndex[bin];
                                    for (c = 0; c < binChunks.length; ++c) {
                                        chunks.push(new chunk_1.default(binChunks[c].minv, binChunks[c].maxv, bin));
                                    }
                                }
                            }
                        }
                        nintv = ba.linearIndex.length;
                        lowest = null;
                        minLin = Math.min(min >> 14, nintv - 1);
                        maxLin = Math.min(max >> 14, nintv - 1);
                        for (i = minLin; i <= maxLin; ++i) {
                            vp = ba.linearIndex[i];
                            if (vp) {
                                if (!lowest || vp.compareTo(lowest) < 0) {
                                    lowest = vp;
                                }
                            }
                        }
                        return [2 /*return*/, (0, util_1.optimizeChunks)(chunks, lowest)];
                }
            });
        });
    };
    return BAI;
}(indexFile_1.default));
exports.default = BAI;
//# sourceMappingURL=bai.js.map
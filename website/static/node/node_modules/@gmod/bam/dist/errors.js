"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BamArgumentError = exports.BamSizeLimitError = exports.BamBufferOverrunError = exports.BamMalformedError = exports.BamUnimplementedError = exports.BamError = void 0;
var BamError = /** @class */ (function (_super) {
    __extends(BamError, _super);
    function BamError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BamError;
}(Error));
exports.BamError = BamError;
/** Error caused by encountering a part of the BAM spec that has not yet been implemented */
var BamUnimplementedError = /** @class */ (function (_super) {
    __extends(BamUnimplementedError, _super);
    function BamUnimplementedError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BamUnimplementedError;
}(Error));
exports.BamUnimplementedError = BamUnimplementedError;
/** An error caused by malformed data.  */
var BamMalformedError = /** @class */ (function (_super) {
    __extends(BamMalformedError, _super);
    function BamMalformedError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BamMalformedError;
}(BamError));
exports.BamMalformedError = BamMalformedError;
/**
 * An error caused by attempting to read beyond the end of the defined data.
 */
var BamBufferOverrunError = /** @class */ (function (_super) {
    __extends(BamBufferOverrunError, _super);
    function BamBufferOverrunError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BamBufferOverrunError;
}(BamMalformedError));
exports.BamBufferOverrunError = BamBufferOverrunError;
/**
 * An error caused by data being too big, exceeding a size limit.
 */
var BamSizeLimitError = /** @class */ (function (_super) {
    __extends(BamSizeLimitError, _super);
    function BamSizeLimitError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BamSizeLimitError;
}(BamError));
exports.BamSizeLimitError = BamSizeLimitError;
/**
 * An invalid argument was supplied to a bam-js method or object.
 */
var BamArgumentError = /** @class */ (function (_super) {
    __extends(BamArgumentError, _super);
    function BamArgumentError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BamArgumentError;
}(BamError));
exports.BamArgumentError = BamArgumentError;
//# sourceMappingURL=errors.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-nocheck
const fs_1 = __importDefault(require("fs"));
const trackDbFile_1 = __importDefault(require("./trackDbFile"));
describe('TrackDbFile', () => {
    it('reads a basic trackDb.txt file', () => {
        const input = fs_1.default.readFileSync('test/basic.trackDb.txt', 'utf8');
        const trackDb = new trackDbFile_1.default(input);
        expect(trackDb).toMatchSnapshot();
        expect(trackDb.toString()).toEqual(input);
    });
    it('gets settings', () => {
        const input = fs_1.default.readFileSync('test/superTrack.trackDb.txt', 'utf8');
        const trackDb = new trackDbFile_1.default(input);
        expect(trackDb).toMatchSnapshot();
        expect(trackDb.settings('myFirstTrack')).toMatchSnapshot();
    });
    it('parses an extended trackDB.txt file', () => {
        const input = fs_1.default.readFileSync('test/extended.trackDb.txt', 'utf8');
        const trackDb = new trackDbFile_1.default(input);
        expect(trackDb).toMatchSnapshot();
        expect(trackDb.settings('26_plus')).toMatchSnapshot();
    });
    it("throws if each track doesn't start with track", () => expect(() => new trackDbFile_1.default('myTrack dnaseSignal\nbigDataUrl dnaseSignal.bigWig\n')).toThrow(/trackDb has .* instead of "track" as the first line/));
    it('throws if a track is missing required keys', () => expect(() => new trackDbFile_1.default('track dnaseSignal\nbigDataUrl dnaseSignal.bigWig\n')).toThrow(/Track .* is missing required key\(s\):/));
    it("throws if each track isn't a parent track and doesn't have bigDataUrl", () => expect(() => new trackDbFile_1.default('track dnaseSignal\nshortLabel DNAse Signal\nlongLabel Depth of alignments of DNAse reads\ntype bigWig\n')).toThrow(/Track .* is missing required key "bigDataUrl"/));
    it('throws if neither a track nor its parents have a type', () => expect(() => new trackDbFile_1.default('track dnaseSignal\nbigDataUrl dnaseSignal.bigWig\nshortLabel DNAse Signal\nlongLabel Depth of alignments of DNAse reads\n')).toThrow(/Neither track .* nor any of its parent tracks have the required key "type"/));
    it("throws if trying to get settings for a track that doesn't exist", () => expect(() => new trackDbFile_1.default(fs_1.default.readFileSync('test/basic.trackDb.txt', 'utf8')).settings('nonexistent')).toThrow(/Track nonexistent does not exist/));
});
//# sourceMappingURL=trackDbFile.test.js.map
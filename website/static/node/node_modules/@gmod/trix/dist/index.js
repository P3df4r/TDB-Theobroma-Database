"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var CHUNK_SIZE = 65536;
// this is the number of hex characters to use for the address in ixixx, see
// https://github.com/GMOD/ixixx-js/blob/master/src/index.ts#L182
var ADDRESS_SIZE = 10;
// https://stackoverflow.com/a/9229821/2129219
function uniqBy(a, key) {
    var seen = new Set();
    return a.filter(function (item) {
        var k = key(item);
        return seen.has(k) ? false : seen.add(k);
    });
}
var Trix = /** @class */ (function () {
    function Trix(ixxFile, ixFile, maxResults) {
        if (maxResults === void 0) { maxResults = 20; }
        this.ixFile = ixFile;
        this.ixxFile = ixxFile;
        this.maxResults = maxResults;
    }
    Trix.prototype.search = function (searchString, opts) {
        return __awaiter(this, void 0, void 0, function () {
            var resultArr, searchWords, searchWord, res, seekPosEnd, buffer, done, _loop_1, this_1, state_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resultArr = [];
                        searchWords = searchString.split(' ');
                        searchWord = searchWords[0].toLowerCase();
                        return [4 /*yield*/, this._getBuffer(searchWord, opts)];
                    case 1:
                        res = _a.sent();
                        if (!res) {
                            return [2 /*return*/, []];
                        }
                        seekPosEnd = res.seekPosEnd, buffer = res.buffer;
                        done = false;
                        _loop_1 = function () {
                            var foundSomething, str, lines, hits, res2;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        foundSomething = false;
                                        str = buffer.toString();
                                        lines = str
                                            .slice(0, str.lastIndexOf('\n'))
                                            .split('\n')
                                            .filter(function (f) { return !!f; });
                                        hits = lines
                                            // eslint-disable-next-line @typescript-eslint/no-loop-func
                                            .filter(function (line) {
                                            var word = line.split(' ')[0];
                                            var match = word.startsWith(searchWord);
                                            if (!foundSomething && match) {
                                                foundSomething = true;
                                            }
                                            // we are done scanning if we are lexicographically greater than the
                                            // search string
                                            if (word > searchWord) {
                                                done = true;
                                            }
                                            return match;
                                        })
                                            .map(function (line) {
                                            var _a = line.split(' '), term = _a[0], parts = _a.slice(1);
                                            return parts.map(function (elt) { return [term, elt.split(',')[0]]; });
                                        })
                                            .flat();
                                        if (!(resultArr.length + hits.length < this_1.maxResults && !done)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this_1.ixFile.read(Buffer.alloc(CHUNK_SIZE), 0, CHUNK_SIZE, seekPosEnd, opts)
                                            // early break if empty response
                                        ];
                                    case 1:
                                        res2 = _b.sent();
                                        // early break if empty response
                                        if (!res2.bytesRead) {
                                            resultArr = resultArr.concat(hits);
                                            return [2 /*return*/, "break"];
                                        }
                                        buffer = Buffer.concat([buffer, res2.buffer]);
                                        seekPosEnd += CHUNK_SIZE;
                                        return [3 /*break*/, 3];
                                    case 2:
                                        if (resultArr.length + hits.length >= this_1.maxResults || done) {
                                            resultArr = resultArr.concat(hits);
                                            return [2 /*return*/, "break"];
                                        }
                                        _b.label = 3;
                                    case 3: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _a.label = 2;
                    case 2:
                        if (!!done) return [3 /*break*/, 4];
                        return [5 /*yield**/, _loop_1()];
                    case 3:
                        state_1 = _a.sent();
                        if (state_1 === "break")
                            return [3 /*break*/, 4];
                        return [3 /*break*/, 2];
                    case 4: 
                    // deduplicate results based on the detail column (resultArr[1])
                    return [2 /*return*/, uniqBy(resultArr, function (elt) { return elt[1]; }).slice(0, this.maxResults)];
                }
            });
        });
    };
    Trix.prototype.getIndex = function (opts) {
        return __awaiter(this, void 0, void 0, function () {
            var file;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ixxFile.readFile(__assign({ encoding: 'utf8' }, opts))];
                    case 1:
                        file = _a.sent();
                        return [2 /*return*/, file
                                .split('\n')
                                .filter(function (f) { return !!f; })
                                .map(function (line) {
                                var p = line.length - ADDRESS_SIZE;
                                var prefix = line.slice(0, p);
                                var posStr = line.slice(p);
                                var pos = Number.parseInt(posStr, 16);
                                return [prefix, pos];
                            })];
                }
            });
        });
    };
    Trix.prototype._getBuffer = function (searchWord, opts) {
        return __awaiter(this, void 0, void 0, function () {
            var seekPosStart, seekPosEnd, indexes, len, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        seekPosStart = 0;
                        seekPosEnd = -1;
                        return [4 /*yield*/, this.getIndex(opts)];
                    case 1:
                        indexes = _a.sent();
                        indexes.forEach(function (_a) {
                            var key = _a[0], value = _a[1];
                            var trimmedKey = key.slice(0, searchWord.length);
                            if (trimmedKey <= searchWord) {
                                seekPosStart = value;
                                seekPosEnd = value + 65536;
                            }
                        });
                        len = seekPosEnd - seekPosStart;
                        if (len < 0) {
                            return [2 /*return*/, undefined];
                        }
                        return [4 /*yield*/, this.ixFile.read(Buffer.alloc(len), 0, len, seekPosStart, opts)];
                    case 2:
                        res = _a.sent();
                        return [2 /*return*/, __assign(__assign({}, res), { seekPosEnd: seekPosEnd })];
                }
            });
        });
    };
    return Trix;
}());
exports.default = Trix;
//# sourceMappingURL=index.js.map
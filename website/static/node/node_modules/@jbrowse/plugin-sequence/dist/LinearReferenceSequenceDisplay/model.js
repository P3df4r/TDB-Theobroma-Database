"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.modelFactory = void 0;
const mobx_state_tree_1 = require("mobx-state-tree");
const plugin_linear_genome_view_1 = require("@jbrowse/plugin-linear-genome-view");
const configuration_1 = require("@jbrowse/core/configuration");
const util_1 = require("@jbrowse/core/util");
function modelFactory(configSchema) {
    return mobx_state_tree_1.types
        .compose('LinearReferenceSequenceDisplay', plugin_linear_genome_view_1.BaseLinearDisplay, mobx_state_tree_1.types.model({
        type: mobx_state_tree_1.types.literal('LinearReferenceSequenceDisplay'),
        configuration: (0, configuration_1.ConfigurationReference)(configSchema),
        showForward: mobx_state_tree_1.types.optional(mobx_state_tree_1.types.boolean, true),
        showReverse: mobx_state_tree_1.types.optional(mobx_state_tree_1.types.boolean, true),
        showTranslation: mobx_state_tree_1.types.optional(mobx_state_tree_1.types.boolean, true),
        height: 180,
    }))
        .views(self => {
        const { renderProps: superRenderProps } = self;
        return {
            renderProps() {
                const { showForward, showReverse, showTranslation } = self;
                return {
                    ...superRenderProps(),
                    rpcDriverName: self.rpcDriverName,
                    config: self.configuration.renderer,
                    showForward,
                    showReverse,
                    showTranslation,
                };
            },
            regionCannotBeRendered( /* region */) {
                const view = (0, util_1.getContainingView)(self);
                if (view && view.bpPerPx >= 1) {
                    return 'Zoom in to see sequence';
                }
                return undefined;
            },
            get rendererTypeName() {
                return self.configuration.renderer.type;
            },
        };
    })
        .actions(self => ({
        toggleShowForward() {
            self.showForward = !self.showForward;
        },
        toggleShowReverse() {
            self.showReverse = !self.showReverse;
        },
        toggleShowTranslation() {
            self.showTranslation = !self.showTranslation;
        },
    }))
        .views(self => ({
        trackMenuItems() {
            return [
                {
                    label: 'Show forward',
                    type: 'checkbox',
                    checked: self.showForward,
                    onClick: () => {
                        self.toggleShowForward();
                    },
                },
                {
                    label: 'Show reverse',
                    type: 'checkbox',
                    checked: self.showReverse,
                    onClick: () => {
                        self.toggleShowReverse();
                    },
                },
                {
                    label: 'Show translation',
                    type: 'checkbox',
                    checked: self.showTranslation,
                    onClick: () => {
                        self.toggleShowTranslation();
                    },
                },
            ];
        },
    }));
}
exports.modelFactory = modelFactory;
//# sourceMappingURL=model.js.map
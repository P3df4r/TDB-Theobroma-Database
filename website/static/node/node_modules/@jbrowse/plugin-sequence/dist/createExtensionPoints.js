"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tracks_1 = require("@jbrowse/core/util/tracks");
exports.default = (pluginManager) => {
    pluginManager.addToExtensionPoint('Core-guessAdapterForLocation', (adapterGuesser) => {
        return (file, index, adapterHint) => {
            const regexGuess = /\.2bit$/i;
            const adapterName = 'TwoBitAdapter';
            const fileName = (0, tracks_1.getFileName)(file);
            const obj = {
                type: adapterName,
                twoBitLocation: file,
            };
            if (regexGuess.test(fileName) && !adapterHint) {
                return obj;
            }
            else if (adapterHint === adapterName) {
                return obj;
            }
            return adapterGuesser(file, index, adapterHint);
        };
    });
    pluginManager.addToExtensionPoint('Core-guessTrackTypeForLocation', (trackTypeGuesser) => {
        return (adapterName) => {
            if (adapterName === 'TwoBitAdapter') {
                return 'ReferenceSequenceTrack';
            }
            return trackTypeGuesser(adapterName);
        };
    });
    pluginManager.addToExtensionPoint('Core-guessAdapterForLocation', (adapterGuesser) => {
        return (file, index, adapterHint) => {
            const regexGuess = /\.(fa|fasta|fas|fna|mfa)$/i;
            const adapterName = 'IndexedFastaAdapter';
            const fileName = (0, tracks_1.getFileName)(file);
            const obj = {
                type: adapterName,
                fastaLocation: file,
                faiLocation: index || (0, tracks_1.makeIndex)(file, '.fai'),
            };
            if (regexGuess.test(fileName) && !adapterHint) {
                return obj;
            }
            else if (adapterHint === adapterName) {
                return obj;
            }
            return adapterGuesser(file, index, adapterHint);
        };
    });
    pluginManager.addToExtensionPoint('Core-guessTrackTypeForLocation', (trackTypeGuesser) => {
        return (adapterName) => {
            if (adapterName === 'IndexedFastaAdapter') {
                return 'ReferenceSequenceTrack';
            }
            return trackTypeGuesser(adapterName);
        };
    });
    pluginManager.addToExtensionPoint('Core-guessAdapterForLocation', (adapterGuesser) => {
        return (file, index, adapterHint) => {
            const regexGuess = /\.(fa|fasta|fas|fna|mfa)\.b?gz$/i;
            const adapterName = 'BgzipFastaAdapter';
            const fileName = (0, tracks_1.getFileName)(file);
            const obj = {
                type: adapterName,
                faiLocation: (0, tracks_1.makeIndex)(file, '.fai'),
                gziLocation: (0, tracks_1.makeIndex)(file, '.gzi'),
            };
            if (regexGuess.test(fileName) && !adapterHint) {
                return obj;
            }
            else if (adapterHint === adapterName) {
                return obj;
            }
            return adapterGuesser(file, index, adapterHint);
        };
    });
    pluginManager.addToExtensionPoint('Core-guessTrackTypeForLocation', (trackTypeGuesser) => {
        return (adapterName) => {
            if (adapterName === 'BgzipFastaAdapter') {
                return 'ReferenceSequenceTrack';
            }
            return trackTypeGuesser(adapterName);
        };
    });
};
//# sourceMappingURL=createExtensionPoints.js.map
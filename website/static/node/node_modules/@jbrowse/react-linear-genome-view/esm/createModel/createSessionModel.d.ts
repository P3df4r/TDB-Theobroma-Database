/// <reference types="react" />
import { DialogComponentType } from '@jbrowse/core/util/types';
import { AnyConfigurationModel } from '@jbrowse/core/configuration';
import { Instance, IAnyStateTreeNode } from 'mobx-state-tree';
import PluginManager from '@jbrowse/core/PluginManager';
import TextSearchManager from '@jbrowse/core/TextSearch/TextSearchManager';
import { ReferringNode } from '../types';
export default function sessionModelFactory(pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    name: import("mobx-state-tree").ISimpleType<string>;
    margin: import("mobx-state-tree").IType<number | undefined, number, number>;
    view: import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        width: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        setDisplayName(name: string): void;
        setWidth(newWidth: number): void;
        setMinimized(flag: boolean): void;
    } & {
        volatileWidth: number | undefined;
        minimumBlockWidth: number;
        draggingTrackId: string | undefined;
        volatileError: Error | undefined;
        afterDisplayedRegionsSetCallbacks: Function[];
        scaleFactor: number;
        trackRefs: {
            [key: string]: any;
        };
        coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        coarseTotalBp: number;
        leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
        searchQuery: string | undefined;
        seqDialogDisplayed: boolean;
    } & {
        readonly width: number;
        readonly interRegionPaddingWidth: number;
        readonly assemblyNames: string[];
    } & {
        MiniControlsComponent(): import("react").FC<any>;
        HeaderComponent(): import("react").FC<any>;
        readonly assemblyErrors: string;
        readonly assembliesInitialized: boolean;
        readonly initialized: boolean;
        readonly hasDisplayedRegions: boolean;
        readonly isSearchDialogDisplayed: boolean;
        readonly scaleBarHeight: number;
        readonly headerHeight: number;
        readonly trackHeights: any;
        readonly trackHeightsWithResizeHandles: any;
        readonly height: any;
        readonly totalBp: number;
        readonly maxBpPerPx: number;
        readonly minBpPerPx: number;
        readonly error: string | Error;
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly displayedRegionsTotalPx: number;
        renderProps(): any;
        searchScope(assemblyName: string): {
            assemblyName: string;
            includeAggregateIndexes: boolean;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        };
        getTrack(id: string): any;
        rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
        rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
        readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
    } & {
        setShowCytobands(flag: boolean): void;
        setWidth(newWidth: number): void;
        setError(error: Error | undefined): void;
        toggleHeader(): void;
        toggleHeaderOverview(): void;
        toggleNoTracksActive(): void;
        toggleShowGridlines(): void;
        scrollTo(offsetPx: number): number;
        zoomTo(bpPerPx: number): number;
        setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
        setGetSequenceDialogOpen(open: boolean): void;
        setNewView(bpPerPx: number, offsetPx: number): void;
        horizontallyFlip(): void;
        showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
        hideTrack(trackId: string): number;
    } & {
        moveTrack(movingId: string, targetId: string): void;
        closeView(): void;
        toggleTrack(trackId: string): void;
        setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
        toggleCenterLine(): void;
        setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
        activateTrackSelector(): import("@jbrowse/core/util").Widget;
        getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
            start: number;
            end: number;
            regionNumber?: number | undefined;
            reversed?: boolean | undefined;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
            widthPx: number;
            variant?: string | undefined;
            isLeftEndOfDisplayedRegion?: boolean | undefined;
        }[];
        afterDisplayedRegionsSet(cb: Function): void;
        horizontalScroll(distance: number): number;
        center(): void;
        showAllRegions(): void;
        showAllRegionsInAssembly(assemblyName?: string | undefined): void;
        setDraggingTrackId(idx?: string | undefined): void;
        setScaleFactor(factor: number): void;
        clearView(): void;
        exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
    } & {
        slide: (viewWidths: number) => void;
    } & {
        zoom: (targetBpPerPx: number) => void;
    } & {
        readonly canShowCytobands: boolean;
        readonly showCytobands: boolean;
        readonly anyCytobandsExist: boolean;
        readonly cytobandOffset: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        readonly visibleLocStrings: string;
        readonly coarseVisibleLocStrings: string;
    } & {
        setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
        afterAttach(): void;
    } & {
        moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
        navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
        navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
    } & {
        rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): {
            index: number;
            offsetPx: number;
        } | undefined;
        centerAt(coord: number, refName: string, regionNumber: number): void;
        pxToBp(px: number): {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        };
        readonly centerLineInfo: {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        } | undefined;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
    widgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
    activeWidgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>;
    connectionInstances: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
    sessionTracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
}, {
    /**
     * this is the globally "selected" object. can be anything.
     * code that wants to deal with this should examine it to see what
     * kind of thing it is.
     */
    selection: undefined;
    /**
     * this is the current "task" that is being performed in the UI.
     * this is usually an object of the form
     * `{ taskName: "configure", target: thing_being_configured }`
     */
    task: undefined;
    queueOfDialogs: [DialogComponentType, any][];
} & {
    readonly disableAddTracks: any;
    readonly DialogComponent: DialogComponentType | undefined;
    readonly DialogProps: any;
    readonly textSearchManager: TextSearchManager;
    readonly rpcManager: any;
    readonly configuration: any;
    readonly assemblies: any[];
    readonly assemblyNames: any[];
    readonly tracks: any;
    readonly aggregateTextSearchAdapters: any;
    readonly connections: any;
    readonly adminMode: boolean;
    readonly assemblyManager: any;
    readonly version: string;
    readonly views: ({
        id: string;
        displayName: string | undefined;
        minimized: boolean;
        type: string;
        offsetPx: number;
        bpPerPx: number;
        displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
        tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        hideHeader: boolean;
        hideHeaderOverview: boolean;
        hideNoTracksActive: boolean;
        trackSelectorType: string;
        trackLabels: string;
        showCenterLine: boolean;
        showCytobandsSetting: boolean;
        showGridlines: boolean;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        width: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        setDisplayName(name: string): void;
        setWidth(newWidth: number): void;
        setMinimized(flag: boolean): void;
    } & {
        volatileWidth: number | undefined;
        minimumBlockWidth: number;
        draggingTrackId: string | undefined;
        volatileError: Error | undefined;
        afterDisplayedRegionsSetCallbacks: Function[];
        scaleFactor: number;
        trackRefs: {
            [key: string]: any;
        };
        coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        coarseTotalBp: number;
        leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
        searchQuery: string | undefined;
        seqDialogDisplayed: boolean;
    } & {
        readonly width: number;
        readonly interRegionPaddingWidth: number;
        readonly assemblyNames: string[];
    } & {
        MiniControlsComponent(): import("react").FC<any>;
        HeaderComponent(): import("react").FC<any>;
        readonly assemblyErrors: string;
        readonly assembliesInitialized: boolean;
        readonly initialized: boolean;
        readonly hasDisplayedRegions: boolean;
        readonly isSearchDialogDisplayed: boolean;
        readonly scaleBarHeight: number;
        readonly headerHeight: number;
        readonly trackHeights: any;
        readonly trackHeightsWithResizeHandles: any;
        readonly height: any;
        readonly totalBp: number;
        readonly maxBpPerPx: number;
        readonly minBpPerPx: number;
        readonly error: string | Error;
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly displayedRegionsTotalPx: number;
        renderProps(): any;
        searchScope(assemblyName: string): {
            assemblyName: string;
            includeAggregateIndexes: boolean;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        };
        getTrack(id: string): any;
        rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
        rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
        readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
    } & {
        setShowCytobands(flag: boolean): void;
        setWidth(newWidth: number): void;
        setError(error: Error | undefined): void;
        toggleHeader(): void;
        toggleHeaderOverview(): void;
        toggleNoTracksActive(): void;
        toggleShowGridlines(): void;
        scrollTo(offsetPx: number): number;
        zoomTo(bpPerPx: number): number;
        setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
        setGetSequenceDialogOpen(open: boolean): void;
        setNewView(bpPerPx: number, offsetPx: number): void;
        horizontallyFlip(): void;
        showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
        hideTrack(trackId: string): number;
    } & {
        moveTrack(movingId: string, targetId: string): void;
        closeView(): void;
        toggleTrack(trackId: string): void;
        setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
        toggleCenterLine(): void;
        setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
        activateTrackSelector(): import("@jbrowse/core/util").Widget;
        getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
            start: number;
            end: number;
            regionNumber?: number | undefined;
            reversed?: boolean | undefined;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
            widthPx: number;
            variant?: string | undefined;
            isLeftEndOfDisplayedRegion?: boolean | undefined;
        }[];
        afterDisplayedRegionsSet(cb: Function): void;
        horizontalScroll(distance: number): number;
        center(): void;
        showAllRegions(): void;
        showAllRegionsInAssembly(assemblyName?: string | undefined): void;
        setDraggingTrackId(idx?: string | undefined): void;
        setScaleFactor(factor: number): void;
        clearView(): void;
        exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
    } & {
        slide: (viewWidths: number) => void;
    } & {
        zoom: (targetBpPerPx: number) => void;
    } & {
        readonly canShowCytobands: boolean;
        readonly showCytobands: boolean;
        readonly anyCytobandsExist: boolean;
        readonly cytobandOffset: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        readonly visibleLocStrings: string;
        readonly coarseVisibleLocStrings: string;
    } & {
        setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
        afterAttach(): void;
    } & {
        moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
        navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
        navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
    } & {
        rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): {
            index: number;
            offsetPx: number;
        } | undefined;
        centerAt(coord: number, refName: string, regionNumber: number): void;
        pxToBp(px: number): {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        };
        readonly centerLineInfo: {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        } | undefined;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        width: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        setDisplayName(name: string): void;
        setWidth(newWidth: number): void;
        setMinimized(flag: boolean): void;
    } & {
        volatileWidth: number | undefined;
        minimumBlockWidth: number;
        draggingTrackId: string | undefined;
        volatileError: Error | undefined;
        afterDisplayedRegionsSetCallbacks: Function[];
        scaleFactor: number;
        trackRefs: {
            [key: string]: any;
        };
        coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        coarseTotalBp: number;
        leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
        searchQuery: string | undefined;
        seqDialogDisplayed: boolean;
    } & {
        readonly width: number;
        readonly interRegionPaddingWidth: number;
        readonly assemblyNames: string[];
    } & {
        MiniControlsComponent(): import("react").FC<any>;
        HeaderComponent(): import("react").FC<any>;
        readonly assemblyErrors: string;
        readonly assembliesInitialized: boolean;
        readonly initialized: boolean;
        readonly hasDisplayedRegions: boolean;
        readonly isSearchDialogDisplayed: boolean;
        readonly scaleBarHeight: number;
        readonly headerHeight: number;
        readonly trackHeights: any;
        readonly trackHeightsWithResizeHandles: any;
        readonly height: any;
        readonly totalBp: number;
        readonly maxBpPerPx: number;
        readonly minBpPerPx: number;
        readonly error: string | Error;
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly displayedRegionsTotalPx: number;
        renderProps(): any;
        searchScope(assemblyName: string): {
            assemblyName: string;
            includeAggregateIndexes: boolean;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        };
        getTrack(id: string): any;
        rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
        rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
        readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
    } & {
        setShowCytobands(flag: boolean): void;
        setWidth(newWidth: number): void;
        setError(error: Error | undefined): void;
        toggleHeader(): void;
        toggleHeaderOverview(): void;
        toggleNoTracksActive(): void;
        toggleShowGridlines(): void;
        scrollTo(offsetPx: number): number;
        zoomTo(bpPerPx: number): number;
        setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
        setGetSequenceDialogOpen(open: boolean): void;
        setNewView(bpPerPx: number, offsetPx: number): void;
        horizontallyFlip(): void;
        showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
        hideTrack(trackId: string): number;
    } & {
        moveTrack(movingId: string, targetId: string): void;
        closeView(): void;
        toggleTrack(trackId: string): void;
        setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
        toggleCenterLine(): void;
        setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
        activateTrackSelector(): import("@jbrowse/core/util").Widget;
        getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
            start: number;
            end: number;
            regionNumber?: number | undefined;
            reversed?: boolean | undefined;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
            widthPx: number;
            variant?: string | undefined;
            isLeftEndOfDisplayedRegion?: boolean | undefined;
        }[];
        afterDisplayedRegionsSet(cb: Function): void;
        horizontalScroll(distance: number): number;
        center(): void;
        showAllRegions(): void;
        showAllRegionsInAssembly(assemblyName?: string | undefined): void;
        setDraggingTrackId(idx?: string | undefined): void;
        setScaleFactor(factor: number): void;
        clearView(): void;
        exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
    } & {
        slide: (viewWidths: number) => void;
    } & {
        zoom: (targetBpPerPx: number) => void;
    } & {
        readonly canShowCytobands: boolean;
        readonly showCytobands: boolean;
        readonly anyCytobandsExist: boolean;
        readonly cytobandOffset: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        readonly visibleLocStrings: string;
        readonly coarseVisibleLocStrings: string;
    } & {
        setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
        afterAttach(): void;
    } & {
        moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
        navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
        navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
    } & {
        rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): {
            index: number;
            offsetPx: number;
        } | undefined;
        centerAt(coord: number, refName: string, regionNumber: number): void;
        pxToBp(px: number): {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        };
        readonly centerLineInfo: {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        } | undefined;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    renderProps(): {
        theme: any;
    };
    readonly visibleWidget: any;
    /**
     * See if any MST nodes currently have a types.reference to this object.
     * @param object - object
     * @returns An array where the first element is the node referring
     * to the object and the second element is they property name the node is
     * using to refer to the object
     */
    getReferring(object: IAnyStateTreeNode): ReferringNode[];
} & {
    addTrackConf(trackConf: AnyConfigurationModel): any;
    queueDialog(callback: (doneCallback: () => void) => [DialogComponentType, any]): void;
    removeActiveDialog(): void;
    makeConnection(configuration: AnyConfigurationModel, initialSnapshot?: {}): any;
    removeReferring(referring: any, track: any, callbacks: Function[], dereferenceTypeCount: Record<string, number>): void;
    prepareToBreakConnection(configuration: AnyConfigurationModel): (Record<string, number> | (() => void))[];
    breakConnection(configuration: AnyConfigurationModel): void;
    addView(typeName: string, initialState?: {}): {
        id: string;
        displayName: string | undefined;
        minimized: boolean;
        type: string;
        offsetPx: number;
        bpPerPx: number;
        displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
        tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        hideHeader: boolean;
        hideHeaderOverview: boolean;
        hideNoTracksActive: boolean;
        trackSelectorType: string;
        trackLabels: string;
        showCenterLine: boolean;
        showCytobandsSetting: boolean;
        showGridlines: boolean;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        width: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        setDisplayName(name: string): void;
        setWidth(newWidth: number): void;
        setMinimized(flag: boolean): void;
    } & {
        volatileWidth: number | undefined;
        minimumBlockWidth: number;
        draggingTrackId: string | undefined;
        volatileError: Error | undefined;
        afterDisplayedRegionsSetCallbacks: Function[];
        scaleFactor: number;
        trackRefs: {
            [key: string]: any;
        };
        coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        coarseTotalBp: number;
        leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
        searchQuery: string | undefined;
        seqDialogDisplayed: boolean;
    } & {
        readonly width: number;
        readonly interRegionPaddingWidth: number;
        readonly assemblyNames: string[];
    } & {
        MiniControlsComponent(): import("react").FC<any>;
        HeaderComponent(): import("react").FC<any>;
        readonly assemblyErrors: string;
        readonly assembliesInitialized: boolean;
        readonly initialized: boolean;
        readonly hasDisplayedRegions: boolean;
        readonly isSearchDialogDisplayed: boolean;
        readonly scaleBarHeight: number;
        readonly headerHeight: number;
        readonly trackHeights: any;
        readonly trackHeightsWithResizeHandles: any;
        readonly height: any;
        readonly totalBp: number;
        readonly maxBpPerPx: number;
        readonly minBpPerPx: number;
        readonly error: string | Error;
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly displayedRegionsTotalPx: number;
        renderProps(): any;
        searchScope(assemblyName: string): {
            assemblyName: string;
            includeAggregateIndexes: boolean;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        };
        getTrack(id: string): any;
        rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
        rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
        readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
    } & {
        setShowCytobands(flag: boolean): void;
        setWidth(newWidth: number): void;
        setError(error: Error | undefined): void;
        toggleHeader(): void;
        toggleHeaderOverview(): void;
        toggleNoTracksActive(): void;
        toggleShowGridlines(): void;
        scrollTo(offsetPx: number): number;
        zoomTo(bpPerPx: number): number;
        setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
        setGetSequenceDialogOpen(open: boolean): void;
        setNewView(bpPerPx: number, offsetPx: number): void;
        horizontallyFlip(): void;
        showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
        hideTrack(trackId: string): number;
    } & {
        moveTrack(movingId: string, targetId: string): void;
        closeView(): void;
        toggleTrack(trackId: string): void;
        setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
        toggleCenterLine(): void;
        setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
        activateTrackSelector(): import("@jbrowse/core/util").Widget;
        getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
            start: number;
            end: number;
            regionNumber?: number | undefined;
            reversed?: boolean | undefined;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
            widthPx: number;
            variant?: string | undefined;
            isLeftEndOfDisplayedRegion?: boolean | undefined;
        }[];
        afterDisplayedRegionsSet(cb: Function): void;
        horizontalScroll(distance: number): number;
        center(): void;
        showAllRegions(): void;
        showAllRegionsInAssembly(assemblyName?: string | undefined): void;
        setDraggingTrackId(idx?: string | undefined): void;
        setScaleFactor(factor: number): void;
        clearView(): void;
        exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
    } & {
        slide: (viewWidths: number) => void;
    } & {
        zoom: (targetBpPerPx: number) => void;
    } & {
        readonly canShowCytobands: boolean;
        readonly showCytobands: boolean;
        readonly anyCytobandsExist: boolean;
        readonly cytobandOffset: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        readonly visibleLocStrings: string;
        readonly coarseVisibleLocStrings: string;
    } & {
        setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
        afterAttach(): void;
    } & {
        moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
        navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
        navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
    } & {
        rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): {
            index: number;
            offsetPx: number;
        } | undefined;
        centerAt(coord: number, refName: string, regionNumber: number): void;
        pxToBp(px: number): {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        };
        readonly centerLineInfo: {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        } | undefined;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        width: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        setDisplayName(name: string): void;
        setWidth(newWidth: number): void;
        setMinimized(flag: boolean): void;
    } & {
        volatileWidth: number | undefined;
        minimumBlockWidth: number;
        draggingTrackId: string | undefined;
        volatileError: Error | undefined;
        afterDisplayedRegionsSetCallbacks: Function[];
        scaleFactor: number;
        trackRefs: {
            [key: string]: any;
        };
        coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        coarseTotalBp: number;
        leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
        searchQuery: string | undefined;
        seqDialogDisplayed: boolean;
    } & {
        readonly width: number;
        readonly interRegionPaddingWidth: number;
        readonly assemblyNames: string[];
    } & {
        MiniControlsComponent(): import("react").FC<any>;
        HeaderComponent(): import("react").FC<any>;
        readonly assemblyErrors: string;
        readonly assembliesInitialized: boolean;
        readonly initialized: boolean;
        readonly hasDisplayedRegions: boolean;
        readonly isSearchDialogDisplayed: boolean;
        readonly scaleBarHeight: number;
        readonly headerHeight: number;
        readonly trackHeights: any;
        readonly trackHeightsWithResizeHandles: any;
        readonly height: any;
        readonly totalBp: number;
        readonly maxBpPerPx: number;
        readonly minBpPerPx: number;
        readonly error: string | Error;
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly displayedRegionsTotalPx: number;
        renderProps(): any;
        searchScope(assemblyName: string): {
            assemblyName: string;
            includeAggregateIndexes: boolean;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        };
        getTrack(id: string): any;
        rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
        rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
        readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
    } & {
        setShowCytobands(flag: boolean): void;
        setWidth(newWidth: number): void;
        setError(error: Error | undefined): void;
        toggleHeader(): void;
        toggleHeaderOverview(): void;
        toggleNoTracksActive(): void;
        toggleShowGridlines(): void;
        scrollTo(offsetPx: number): number;
        zoomTo(bpPerPx: number): number;
        setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
        setGetSequenceDialogOpen(open: boolean): void;
        setNewView(bpPerPx: number, offsetPx: number): void;
        horizontallyFlip(): void;
        showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
        hideTrack(trackId: string): number;
    } & {
        moveTrack(movingId: string, targetId: string): void;
        closeView(): void;
        toggleTrack(trackId: string): void;
        setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
        toggleCenterLine(): void;
        setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
        activateTrackSelector(): import("@jbrowse/core/util").Widget;
        getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
            start: number;
            end: number;
            regionNumber?: number | undefined;
            reversed?: boolean | undefined;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
            widthPx: number;
            variant?: string | undefined;
            isLeftEndOfDisplayedRegion?: boolean | undefined;
        }[];
        afterDisplayedRegionsSet(cb: Function): void;
        horizontalScroll(distance: number): number;
        center(): void;
        showAllRegions(): void;
        showAllRegionsInAssembly(assemblyName?: string | undefined): void;
        setDraggingTrackId(idx?: string | undefined): void;
        setScaleFactor(factor: number): void;
        clearView(): void;
        exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
    } & {
        slide: (viewWidths: number) => void;
    } & {
        zoom: (targetBpPerPx: number) => void;
    } & {
        readonly canShowCytobands: boolean;
        readonly showCytobands: boolean;
        readonly anyCytobandsExist: boolean;
        readonly cytobandOffset: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        readonly visibleLocStrings: string;
        readonly coarseVisibleLocStrings: string;
    } & {
        setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
        afterAttach(): void;
    } & {
        moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
        navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
        navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
    } & {
        rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): {
            index: number;
            offsetPx: number;
        } | undefined;
        centerAt(coord: number, refName: string, regionNumber: number): void;
        pxToBp(px: number): {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        };
        readonly centerLineInfo: {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        } | undefined;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    removeView(): void;
    addWidget(typeName: string, id: string, initialState?: {}, configuration?: {
        type: string;
    }): any;
    showWidget(widget: any): void;
    hasWidget(widget: any): boolean;
    hideWidget(widget: any): void;
    hideAllWidgets(): void;
    /**
     * set the global selection, i.e. the globally-selected object.
     * can be a feature, a view, just about anything
     * @param thing -
     */
    setSelection(thing: any): void;
    /**
     * clears the global selection
     */
    clearSelection(): void;
    clearConnections(): void;
    renameCurrentSession(sessionName: string): any;
} & {
    getTrackActionMenuItems(config: any): {
        label: string;
        onClick: () => void;
        icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
            muiName: string;
        };
    }[];
} & {
    notify(message: string, level?: import("@jbrowse/core/util").NotificationLevel | undefined, action?: import("@jbrowse/core/util").SnackAction | undefined): void;
    pushSnackbarMessage(message: string, level?: import("@jbrowse/core/util").NotificationLevel | undefined, action?: import("@jbrowse/core/util").SnackAction | undefined): number;
    popSnackbarMessage(): any;
    removeSnackbarMessage(message: string): void;
} & {
    readonly snackbarMessages: import("mobx").IObservableArray<any>;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type SessionStateModel = ReturnType<typeof sessionModelFactory>;
export type SessionModel = Instance<SessionStateModel>;

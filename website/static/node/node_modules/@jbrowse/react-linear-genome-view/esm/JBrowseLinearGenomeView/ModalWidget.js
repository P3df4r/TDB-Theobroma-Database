import React, { Suspense } from 'react';
import { AppBar, Dialog, Paper, Toolbar, Typography, ScopedCssBaseline, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { getEnv } from 'mobx-state-tree';
const useStyles = makeStyles()({
    paper: {
        overflow: 'auto',
    },
});
const ModalWidgetContents = observer(({ session }) => {
    const { visibleWidget } = session;
    if (!visibleWidget) {
        return (React.createElement(AppBar, { position: "relative" },
            React.createElement(Toolbar, null)));
    }
    const { pluginManager } = getEnv(session);
    const { ReactComponent, HeadingComponent, heading } = pluginManager.getWidgetType(visibleWidget.type);
    const Component = visibleWidget
        ? pluginManager.evaluateExtensionPoint('Core-replaceWidget', ReactComponent, {
            session,
            model: visibleWidget,
        })
        : null;
    return (React.createElement(React.Fragment, null,
        React.createElement(AppBar, { position: "static" },
            React.createElement(Toolbar, null, HeadingComponent ? (React.createElement(HeadingComponent, { model: visibleWidget })) : (React.createElement(Typography, { variant: "h6" }, heading)))),
        visibleWidget && Component ? (React.createElement(Suspense, { fallback: React.createElement("div", null, "Loading...") },
            React.createElement(ScopedCssBaseline, null,
                React.createElement(Component, { model: visibleWidget, session: session, overrideDimensions: {
                        height: (window.innerHeight * 5) / 8,
                        width: 800,
                    } })))) : null));
});
const ModalWidget = observer(({ session }) => {
    const { classes } = useStyles();
    const { visibleWidget, hideAllWidgets } = session;
    return (React.createElement(Dialog, { open: Boolean(visibleWidget), onClose: hideAllWidgets, maxWidth: "xl" },
        React.createElement(Paper, { className: classes.paper },
            React.createElement(ModalWidgetContents, { session: session }))));
});
export default ModalWidget;
//# sourceMappingURL=ModalWidget.js.map
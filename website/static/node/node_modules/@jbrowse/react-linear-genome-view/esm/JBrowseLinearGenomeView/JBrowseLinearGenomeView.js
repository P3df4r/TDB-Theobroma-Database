import React, { Suspense } from 'react';
import { observer } from 'mobx-react';
import { getEnv } from 'mobx-state-tree';
import { readConfObject } from '@jbrowse/core/configuration';
import { createJBrowseTheme } from '@jbrowse/core/ui';
import { ThemeProvider, ScopedCssBaseline } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
// locals
import ModalWidget from './ModalWidget';
import ViewContainer from './ViewContainer';
const useStyles = makeStyles()(() => ({
    // avoid parent styles getting into this div
    // https://css-tricks.com/almanac/properties/a/all/
    avoidParentStyle: {
        all: 'initial',
    },
}));
const JBrowseLinearGenomeView = observer(({ viewState }) => {
    const { classes } = useStyles();
    const { session } = viewState;
    const { view } = session;
    const { pluginManager } = getEnv(session);
    const viewType = pluginManager.getViewType(view.type);
    if (!viewType) {
        throw new Error(`unknown view type ${view.type}`);
    }
    const { ReactComponent } = viewType;
    const theme = createJBrowseTheme(readConfObject(viewState.config.configuration, 'theme'));
    return (React.createElement(ThemeProvider, { theme: theme },
        React.createElement("div", { className: classes.avoidParentStyle },
            React.createElement(ScopedCssBaseline, null,
                React.createElement(ViewContainer, { key: `view-${view.id}`, view: view },
                    React.createElement(Suspense, { fallback: React.createElement("div", null, "Loading...") },
                        React.createElement(ReactComponent, { model: view, session: session }))),
                React.createElement(ModalWidget, { session: session })))));
});
export default JBrowseLinearGenomeView;
//# sourceMappingURL=JBrowseLinearGenomeView.js.map
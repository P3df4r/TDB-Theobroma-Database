import React, { lazy, useEffect, useState, Suspense } from 'react';
import { IconButton, Paper, Typography, useTheme, alpha, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import MenuIcon from '@mui/icons-material/Menu';
import { observer } from 'mobx-react';
import { isAlive } from 'mobx-state-tree';
import useMeasure from 'react-use-measure';
import { Menu, Logomark } from '@jbrowse/core/ui';
import { getSession } from '@jbrowse/core/util';
const AboutDialog = lazy(() => import('./AboutDialog'));
const useStyles = makeStyles()(theme => ({
    viewContainer: {
        overflow: 'hidden',
        background: theme.palette.secondary.main,
        margin: theme.spacing(0.5),
    },
    icon: {
        color: theme.palette.secondary.contrastText,
    },
    displayName: {
        marginTop: 2,
        color: theme.palette.secondary.contrastText,
    },
    grow: {
        flexGrow: 1,
    },
    iconRoot: {
        '&:hover': {
            backgroundColor: alpha(theme.palette.secondary.contrastText, theme.palette.action.hoverOpacity),
            '@media (hover: none)': {
                backgroundColor: 'transparent',
            },
        },
    },
}));
const ViewMenu = observer(({ model, IconButtonProps, IconProps, }) => {
    var _a;
    const [anchorEl, setAnchorEl] = useState();
    if (!((_a = model.menuItems()) === null || _a === void 0 ? void 0 : _a.length)) {
        return null;
    }
    return (React.createElement(React.Fragment, null,
        React.createElement(IconButton, { ...IconButtonProps, "aria-label": "more", "aria-controls": "view-menu", "aria-haspopup": "true", onClick: event => setAnchorEl(event.currentTarget), "data-testid": "view_menu_icon" },
            React.createElement(MenuIcon, { ...IconProps })),
        React.createElement(Menu, { anchorEl: anchorEl, open: Boolean(anchorEl), onMenuItemClick: (_, callback) => {
                callback();
                setAnchorEl(undefined);
            }, onClose: () => setAnchorEl(undefined), menuItems: model.menuItems() })));
});
const ViewContainer = observer(({ view, children }) => {
    const { classes } = useStyles();
    const theme = useTheme();
    const session = getSession(view);
    const [dlgOpen, setDlgOpen] = useState(false);
    const [ref, { width }] = useMeasure();
    const padWidth = theme.spacing(1);
    useEffect(() => {
        if (width && isAlive(view)) {
            view.setWidth(width - parseInt(padWidth, 10) * 2);
        }
    }, [padWidth, view, width]);
    return (React.createElement(Paper, { elevation: 12, ref: ref, className: classes.viewContainer, style: { padding: `0px ${padWidth} ${padWidth}` } },
        session.DialogComponent ? (React.createElement(Suspense, { fallback: React.createElement("div", null) },
            React.createElement(session.DialogComponent, { ...session.DialogProps }))) : null,
        React.createElement("div", { style: { display: 'flex' } },
            React.createElement(ViewMenu, { model: view, IconButtonProps: {
                    classes: { root: classes.iconRoot },
                    edge: 'start',
                }, IconProps: { className: classes.icon } }),
            React.createElement("div", { className: classes.grow }),
            view.displayName ? (React.createElement(Typography, { variant: "body2", className: classes.displayName }, view.displayName)) : null,
            React.createElement("div", { className: classes.grow }),
            React.createElement(IconButton, { onClick: () => setDlgOpen(true) },
                React.createElement("div", { style: { width: 22, height: 22 } },
                    React.createElement(Logomark, { variant: "white" })))),
        React.createElement(Paper, null, children),
        dlgOpen ? (React.createElement(Suspense, { fallback: React.createElement("div", null) },
            React.createElement(AboutDialog, { open: true, onClose: () => setDlgOpen(false) }))) : null));
});
export default ViewContainer;
//# sourceMappingURL=ViewContainer.js.map
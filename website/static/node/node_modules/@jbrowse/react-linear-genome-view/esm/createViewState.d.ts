/// <reference types="react" />
import { PluginConstructor } from '@jbrowse/core/Plugin';
import { SnapshotIn, IJsonPatch } from 'mobx-state-tree';
import { createSessionModel, createConfigModel } from './createModel';
type SessionSnapshot = SnapshotIn<ReturnType<typeof createSessionModel>>;
type ConfigSnapshot = SnapshotIn<ReturnType<typeof createConfigModel>>;
type Assembly = ConfigSnapshot['assembly'];
type Tracks = ConfigSnapshot['tracks'];
type InternetAccounts = ConfigSnapshot['internetAccounts'];
type AggregateTextSearchAdapters = ConfigSnapshot['aggregateTextSearchAdapters'];
interface Location {
    refName: string;
    start?: number;
    end?: number;
    assemblyName?: string;
}
interface ViewStateOptions {
    assembly: Assembly;
    tracks: Tracks;
    internetAccounts?: InternetAccounts;
    aggregateTextSearchAdapters?: AggregateTextSearchAdapters;
    configuration?: Record<string, unknown>;
    plugins?: PluginConstructor[];
    location?: string | Location;
    defaultSession?: SessionSnapshot;
    disableAddTracks?: boolean;
    onChange?: (patch: IJsonPatch, reversePatch: IJsonPatch) => void;
    makeWorkerInstance?: () => Worker;
}
export default function createViewState(opts: ViewStateOptions): {
    config: {
        configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>;
        assembly: any;
        tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        internetAccounts: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        connections: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        plugins: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        configuration: import("@jbrowse/core/configuration").AnyConfigurationSchemaType;
        assembly: import("mobx-state-tree").IAnyType;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        internetAccounts: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        connections: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        plugins: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    session: {
        name: string;
        margin: number;
        view: {
            id: string;
            displayName: string | undefined;
            minimized: boolean;
            type: string;
            offsetPx: number;
            bpPerPx: number;
            displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            hideHeader: boolean;
            hideHeaderOverview: boolean;
            hideNoTracksActive: boolean;
            trackSelectorType: string;
            trackLabels: string;
            showCenterLine: boolean;
            showCytobandsSetting: boolean;
            showGridlines: boolean;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        } & {
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
            hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        widgets: import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>>;
        activeWidgets: import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>>;
        connectionInstances: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        sessionTracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        selection: undefined;
        task: undefined;
        queueOfDialogs: [import("@jbrowse/core/util").DialogComponentType, any][];
    } & {
        readonly disableAddTracks: any;
        readonly DialogComponent: import("@jbrowse/core/util").DialogComponentType | undefined;
        readonly DialogProps: any;
        readonly textSearchManager: import("@jbrowse/core/util").TextSearchManager;
        readonly rpcManager: any;
        readonly configuration: any;
        readonly assemblies: any[];
        readonly assemblyNames: any[];
        readonly tracks: any;
        readonly aggregateTextSearchAdapters: any;
        readonly connections: any;
        readonly adminMode: boolean;
        readonly assemblyManager: any;
        readonly version: string;
        readonly views: ({
            id: string;
            displayName: string | undefined;
            minimized: boolean;
            type: string;
            offsetPx: number;
            bpPerPx: number;
            displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            hideHeader: boolean;
            hideHeaderOverview: boolean;
            hideNoTracksActive: boolean;
            trackSelectorType: string;
            trackLabels: string;
            showCenterLine: boolean;
            showCytobandsSetting: boolean;
            showGridlines: boolean;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        } & {
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
            hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
        renderProps(): {
            theme: any;
        };
        readonly visibleWidget: any;
        getReferring(object: import("mobx-state-tree").IAnyStateTreeNode): import("./types").ReferringNode[];
    } & {
        addTrackConf(trackConf: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
        queueDialog(callback: (doneCallback: () => void) => [import("@jbrowse/core/util").DialogComponentType, any]): void;
        removeActiveDialog(): void;
        makeConnection(configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>, initialSnapshot?: {}): any;
        removeReferring(referring: any, track: any, callbacks: Function[], dereferenceTypeCount: Record<string, number>): void;
        prepareToBreakConnection(configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): (Record<string, number> | (() => void))[];
        breakConnection(configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): void;
        addView(typeName: string, initialState?: {}): {
            id: string;
            displayName: string | undefined;
            minimized: boolean;
            type: string;
            offsetPx: number;
            bpPerPx: number;
            displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            hideHeader: boolean;
            hideHeaderOverview: boolean;
            hideNoTracksActive: boolean;
            trackSelectorType: string;
            trackLabels: string;
            showCenterLine: boolean;
            showCytobandsSetting: boolean;
            showGridlines: boolean;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        } & {
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
            hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        removeView(): void;
        addWidget(typeName: string, id: string, initialState?: {}, configuration?: {
            type: string;
        }): any;
        showWidget(widget: any): void;
        hasWidget(widget: any): boolean;
        hideWidget(widget: any): void;
        hideAllWidgets(): void;
        setSelection(thing: any): void;
        clearSelection(): void;
        clearConnections(): void;
        renameCurrentSession(sessionName: string): any;
    } & {
        getTrackActionMenuItems(config: any): {
            label: string;
            onClick: () => void;
            icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
                muiName: string;
            };
        }[];
    } & {
        notify(message: string, level?: import("@jbrowse/core/util").NotificationLevel | undefined, action?: import("@jbrowse/core/util").SnackAction | undefined): void;
        pushSnackbarMessage(message: string, level?: import("@jbrowse/core/util").NotificationLevel | undefined, action?: import("@jbrowse/core/util").SnackAction | undefined): number;
        popSnackbarMessage(): any;
        removeSnackbarMessage(message: string): void;
    } & {
        readonly snackbarMessages: import("mobx").IObservableArray<any>;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        margin: import("mobx-state-tree").IType<number | undefined, number, number>;
        view: import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        } & {
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
            hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
        widgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
        activeWidgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>;
        connectionInstances: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        sessionTracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
    }, {
        selection: undefined;
        task: undefined;
        queueOfDialogs: [import("@jbrowse/core/util").DialogComponentType, any][];
    } & {
        readonly disableAddTracks: any;
        readonly DialogComponent: import("@jbrowse/core/util").DialogComponentType | undefined;
        readonly DialogProps: any;
        readonly textSearchManager: import("@jbrowse/core/util").TextSearchManager;
        readonly rpcManager: any;
        readonly configuration: any;
        readonly assemblies: any[];
        readonly assemblyNames: any[];
        readonly tracks: any;
        readonly aggregateTextSearchAdapters: any;
        readonly connections: any;
        readonly adminMode: boolean;
        readonly assemblyManager: any;
        readonly version: string;
        readonly views: ({
            id: string;
            displayName: string | undefined;
            minimized: boolean;
            type: string;
            offsetPx: number;
            bpPerPx: number;
            displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            hideHeader: boolean;
            hideHeaderOverview: boolean;
            hideNoTracksActive: boolean;
            trackSelectorType: string;
            trackLabels: string;
            showCenterLine: boolean;
            showCytobandsSetting: boolean;
            showGridlines: boolean;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        } & {
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
            hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
        renderProps(): {
            theme: any;
        };
        readonly visibleWidget: any;
        getReferring(object: import("mobx-state-tree").IAnyStateTreeNode): import("./types").ReferringNode[];
    } & {
        addTrackConf(trackConf: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
        queueDialog(callback: (doneCallback: () => void) => [import("@jbrowse/core/util").DialogComponentType, any]): void;
        removeActiveDialog(): void;
        makeConnection(configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>, initialSnapshot?: {}): any;
        removeReferring(referring: any, track: any, callbacks: Function[], dereferenceTypeCount: Record<string, number>): void;
        prepareToBreakConnection(configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): (Record<string, number> | (() => void))[];
        breakConnection(configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): void;
        addView(typeName: string, initialState?: {}): {
            id: string;
            displayName: string | undefined;
            minimized: boolean;
            type: string;
            offsetPx: number;
            bpPerPx: number;
            displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            hideHeader: boolean;
            hideHeaderOverview: boolean;
            hideNoTracksActive: boolean;
            trackSelectorType: string;
            trackLabels: string;
            showCenterLine: boolean;
            showCytobandsSetting: boolean;
            showGridlines: boolean;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        } & {
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
            hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        removeView(): void;
        addWidget(typeName: string, id: string, initialState?: {}, configuration?: {
            type: string;
        }): any;
        showWidget(widget: any): void;
        hasWidget(widget: any): boolean;
        hideWidget(widget: any): void;
        hideAllWidgets(): void;
        setSelection(thing: any): void;
        clearSelection(): void;
        clearConnections(): void;
        renameCurrentSession(sessionName: string): any;
    } & {
        getTrackActionMenuItems(config: any): {
            label: string;
            onClick: () => void;
            icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
                muiName: string;
            };
        }[];
    } & {
        notify(message: string, level?: import("@jbrowse/core/util").NotificationLevel | undefined, action?: import("@jbrowse/core/util").SnackAction | undefined): void;
        pushSnackbarMessage(message: string, level?: import("@jbrowse/core/util").NotificationLevel | undefined, action?: import("@jbrowse/core/util").SnackAction | undefined): number;
        popSnackbarMessage(): any;
        removeSnackbarMessage(message: string): void;
    } & {
        readonly snackbarMessages: import("mobx").IObservableArray<any>;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    assemblyManager: {
        assemblies: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        get(asmName: string): ({
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        readonly assemblyNamesList: any[];
        readonly assemblyList: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
        readonly rpcManager: any;
    } & {
        waitForAssembly(assemblyName: string): Promise<({
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
        getRefNameMapForAdapter(adapterConf: unknown, assemblyName: string | undefined, opts: {
            signal?: AbortSignal | undefined;
            sessionId: string;
        }): Promise<{
            [x: string]: string;
        } | undefined>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, assemblyName: string | undefined, opts: {
            signal?: AbortSignal | undefined;
            sessionId: string;
        }): Promise<{
            [x: string]: string;
        } | undefined>;
        isValidRefName(refName: string, assemblyName: string): boolean;
    } & {
        afterAttach(): void;
        removeAssembly(asm: {
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
        addAssembly(configuration: any): void;
        replaceAssembly(idx: number, configuration: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        assemblies: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }, {
        get(asmName: string): ({
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        readonly assemblyNamesList: any[];
        readonly assemblyList: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
        readonly rpcManager: any;
    } & {
        waitForAssembly(assemblyName: string): Promise<({
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
        getRefNameMapForAdapter(adapterConf: unknown, assemblyName: string | undefined, opts: {
            signal?: AbortSignal | undefined;
            sessionId: string;
        }): Promise<{
            [x: string]: string;
        } | undefined>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, assemblyName: string | undefined, opts: {
            signal?: AbortSignal | undefined;
            sessionId: string;
        }): Promise<{
            [x: string]: string;
        } | undefined>;
        isValidRefName(refName: string, assemblyName: string): boolean;
    } & {
        afterAttach(): void;
        removeAssembly(asm: {
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
        addAssembly(configuration: any): void;
        replaceAssembly(idx: number, configuration: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
    disableAddTracks: boolean;
    internetAccounts: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
} & import("mobx-state-tree/dist/internal").NonEmptyObject & {
    error: Error | undefined;
    rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
    textSearchManager: import("@jbrowse/core/util").TextSearchManager;
} & {
    setSession(sessionSnapshot: import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        name: import("mobx-state-tree").ISimpleType<string>;
        margin: import("mobx-state-tree").IType<number | undefined, number, number>;
        view: import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        } & {
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
            hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
        widgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
        activeWidgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>;
        connectionInstances: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        sessionTracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
    }>>): void;
    renameCurrentSession(sessionName: string): void;
    setError(errorMessage: Error | undefined): void;
    addInternetAccount(internetAccount: any): void;
    findAppropriateInternetAccount(location: import("@jbrowse/core/util").UriLocation): any;
} & {
    readonly jbrowse: {
        configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>;
        assembly: any;
        tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        internetAccounts: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        connections: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        plugins: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        configuration: import("@jbrowse/core/configuration").AnyConfigurationSchemaType;
        assembly: import("mobx-state-tree").IAnyType;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        internetAccounts: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        connections: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        plugins: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
} & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
    config: import("mobx-state-tree").IModelType<{
        configuration: import("@jbrowse/core/configuration").AnyConfigurationSchemaType;
        assembly: import("mobx-state-tree").IAnyType;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        internetAccounts: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        connections: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        plugins: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
    session: import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        margin: import("mobx-state-tree").IType<number | undefined, number, number>;
        view: import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        } & {
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
            hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
        widgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
        activeWidgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>;
        connectionInstances: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        sessionTracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
    }, {
        selection: undefined;
        task: undefined;
        queueOfDialogs: [import("@jbrowse/core/util").DialogComponentType, any][];
    } & {
        readonly disableAddTracks: any;
        readonly DialogComponent: import("@jbrowse/core/util").DialogComponentType | undefined;
        readonly DialogProps: any;
        readonly textSearchManager: import("@jbrowse/core/util").TextSearchManager;
        readonly rpcManager: any;
        readonly configuration: any;
        readonly assemblies: any[];
        readonly assemblyNames: any[];
        readonly tracks: any;
        readonly aggregateTextSearchAdapters: any;
        readonly connections: any;
        readonly adminMode: boolean;
        readonly assemblyManager: any;
        readonly version: string;
        readonly views: ({
            id: string;
            displayName: string | undefined;
            minimized: boolean;
            type: string;
            offsetPx: number;
            bpPerPx: number;
            displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            hideHeader: boolean;
            hideHeaderOverview: boolean;
            hideNoTracksActive: boolean;
            trackSelectorType: string;
            trackLabels: string;
            showCenterLine: boolean;
            showCytobandsSetting: boolean;
            showGridlines: boolean;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        } & {
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
            hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
        renderProps(): {
            theme: any;
        };
        readonly visibleWidget: any;
        getReferring(object: import("mobx-state-tree").IAnyStateTreeNode): import("./types").ReferringNode[];
    } & {
        addTrackConf(trackConf: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
        queueDialog(callback: (doneCallback: () => void) => [import("@jbrowse/core/util").DialogComponentType, any]): void;
        removeActiveDialog(): void;
        makeConnection(configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>, initialSnapshot?: {}): any;
        removeReferring(referring: any, track: any, callbacks: Function[], dereferenceTypeCount: Record<string, number>): void;
        prepareToBreakConnection(configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): (Record<string, number> | (() => void))[];
        breakConnection(configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): void;
        addView(typeName: string, initialState?: {}): {
            id: string;
            displayName: string | undefined;
            minimized: boolean;
            type: string;
            offsetPx: number;
            bpPerPx: number;
            displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            hideHeader: boolean;
            hideHeaderOverview: boolean;
            hideNoTracksActive: boolean;
            trackSelectorType: string;
            trackLabels: string;
            showCenterLine: boolean;
            showCytobandsSetting: boolean;
            showGridlines: boolean;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        } & {
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
            hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        removeView(): void;
        addWidget(typeName: string, id: string, initialState?: {}, configuration?: {
            type: string;
        }): any;
        showWidget(widget: any): void;
        hasWidget(widget: any): boolean;
        hideWidget(widget: any): void;
        hideAllWidgets(): void;
        setSelection(thing: any): void;
        clearSelection(): void;
        clearConnections(): void;
        renameCurrentSession(sessionName: string): any;
    } & {
        getTrackActionMenuItems(config: any): {
            label: string;
            onClick: () => void;
            icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
                muiName: string;
            };
        }[];
    } & {
        notify(message: string, level?: import("@jbrowse/core/util").NotificationLevel | undefined, action?: import("@jbrowse/core/util").SnackAction | undefined): void;
        pushSnackbarMessage(message: string, level?: import("@jbrowse/core/util").NotificationLevel | undefined, action?: import("@jbrowse/core/util").SnackAction | undefined): number;
        popSnackbarMessage(): any;
        removeSnackbarMessage(message: string): void;
    } & {
        readonly snackbarMessages: import("mobx").IObservableArray<any>;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
    assemblyManager: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        assemblies: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }, {
        get(asmName: string): ({
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        readonly assemblyNamesList: any[];
        readonly assemblyList: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
        readonly rpcManager: any;
    } & {
        waitForAssembly(assemblyName: string): Promise<({
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
        getRefNameMapForAdapter(adapterConf: unknown, assemblyName: string | undefined, opts: {
            signal?: AbortSignal | undefined;
            sessionId: string;
        }): Promise<{
            [x: string]: string;
        } | undefined>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, assemblyName: string | undefined, opts: {
            signal?: AbortSignal | undefined;
            sessionId: string;
        }): Promise<{
            [x: string]: string;
        } | undefined>;
        isValidRefName(refName: string, assemblyName: string): boolean;
    } & {
        afterAttach(): void;
        removeAssembly(asm: {
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: any;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string;
            }, lcAliases: {
                [x: string]: string;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
                [x: string]: string;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
        addAssembly(configuration: any): void;
        replaceAssembly(idx: number, configuration: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    disableAddTracks: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    internetAccounts: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
}, {
    error: Error | undefined;
    rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
    textSearchManager: import("@jbrowse/core/util").TextSearchManager;
} & {
    setSession(sessionSnapshot: import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        name: import("mobx-state-tree").ISimpleType<string>;
        margin: import("mobx-state-tree").IType<number | undefined, number, number>;
        view: import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        } & {
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").IType<string | undefined, string, string>;
            offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
            displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                refName: import("mobx-state-tree").ISimpleType<string>;
                start: import("mobx-state-tree").ISimpleType<number>;
                end: import("mobx-state-tree").ISimpleType<number>;
                reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            } & {
                assemblyName: import("mobx-state-tree").ISimpleType<string>;
            }, {
                setRefName(newRefName: string): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
            hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        }, {
            width: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            setDisplayName(name: string): void;
            setWidth(newWidth: number): void;
            setMinimized(flag: boolean): void;
        } & {
            volatileWidth: number | undefined;
            minimumBlockWidth: number;
            draggingTrackId: string | undefined;
            volatileError: Error | undefined;
            afterDisplayedRegionsSetCallbacks: Function[];
            scaleFactor: number;
            trackRefs: {
                [key: string]: any;
            };
            coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            coarseTotalBp: number;
            leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
            searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
            searchQuery: string | undefined;
            seqDialogDisplayed: boolean;
        } & {
            readonly width: number;
            readonly interRegionPaddingWidth: number;
            readonly assemblyNames: string[];
        } & {
            MiniControlsComponent(): import("react").FC<any>;
            HeaderComponent(): import("react").FC<any>;
            readonly assemblyErrors: string;
            readonly assembliesInitialized: boolean;
            readonly initialized: boolean;
            readonly hasDisplayedRegions: boolean;
            readonly isSearchDialogDisplayed: boolean;
            readonly scaleBarHeight: number;
            readonly headerHeight: number;
            readonly trackHeights: any;
            readonly trackHeightsWithResizeHandles: any;
            readonly height: any;
            readonly totalBp: number;
            readonly maxBpPerPx: number;
            readonly minBpPerPx: number;
            readonly error: string | Error;
            readonly maxOffset: number;
            readonly minOffset: number;
            readonly displayedRegionsTotalPx: number;
            renderProps(): any;
            searchScope(assemblyName: string): {
                assemblyName: string;
                includeAggregateIndexes: boolean;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
            };
            getTrack(id: string): any;
            rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
            rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
            readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
        } & {
            setShowCytobands(flag: boolean): void;
            setWidth(newWidth: number): void;
            setError(error: Error | undefined): void;
            toggleHeader(): void;
            toggleHeaderOverview(): void;
            toggleNoTracksActive(): void;
            toggleShowGridlines(): void;
            scrollTo(offsetPx: number): number;
            zoomTo(bpPerPx: number): number;
            setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
            setGetSequenceDialogOpen(open: boolean): void;
            setNewView(bpPerPx: number, offsetPx: number): void;
            horizontallyFlip(): void;
            showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
            hideTrack(trackId: string): number;
        } & {
            moveTrack(movingId: string, targetId: string): void;
            closeView(): void;
            toggleTrack(trackId: string): void;
            setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
            toggleCenterLine(): void;
            setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
            activateTrackSelector(): import("@jbrowse/core/util").Widget;
            getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
                start: number;
                end: number;
                regionNumber?: number | undefined;
                reversed?: boolean | undefined;
                refName: string;
                assemblyName: string;
                key: string;
                offsetPx: number;
                widthPx: number;
                variant?: string | undefined;
                isLeftEndOfDisplayedRegion?: boolean | undefined;
            }[];
            afterDisplayedRegionsSet(cb: Function): void;
            horizontalScroll(distance: number): number;
            center(): void;
            showAllRegions(): void;
            showAllRegionsInAssembly(assemblyName?: string | undefined): void;
            setDraggingTrackId(idx?: string | undefined): void;
            setScaleFactor(factor: number): void;
            clearView(): void;
            exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
        } & {
            slide: (viewWidths: number) => void;
        } & {
            zoom: (targetBpPerPx: number) => void;
        } & {
            readonly canShowCytobands: boolean;
            readonly showCytobands: boolean;
            readonly anyCytobandsExist: boolean;
            readonly cytobandOffset: number;
        } & {
            menuItems(): import("@jbrowse/core/ui").MenuItem[];
        } & {
            readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
            readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
            readonly visibleLocStrings: string;
            readonly coarseVisibleLocStrings: string;
        } & {
            setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
            afterAttach(): void;
        } & {
            moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
            navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
            navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
            navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
        } & {
            rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            bpToPx({ refName, coord, regionNumber, }: {
                refName: string;
                coord: number;
                regionNumber?: number | undefined;
            }): {
                index: number;
                offsetPx: number;
            } | undefined;
            centerAt(coord: number, refName: string, regionNumber: number): void;
            pxToBp(px: number): {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            };
            readonly centerLineInfo: {
                coord: number;
                index: number;
                refName: string;
                oob: boolean;
                assemblyName: string;
                offset: number;
                start: number;
                end: number;
                reversed: boolean;
            } | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
        widgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
        activeWidgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>;
        connectionInstances: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        sessionTracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
    }>>): void;
    renameCurrentSession(sessionName: string): void;
    setError(errorMessage: Error | undefined): void;
    addInternetAccount(internetAccount: any): void;
    findAppropriateInternetAccount(location: import("@jbrowse/core/util").UriLocation): any;
} & {
    readonly jbrowse: {
        configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>;
        assembly: any;
        tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        internetAccounts: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        connections: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        plugins: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        configuration: import("@jbrowse/core/configuration").AnyConfigurationSchemaType;
        assembly: import("mobx-state-tree").IAnyType;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        internetAccounts: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        connections: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        aggregateTextSearchAdapters: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        plugins: import("mobx-state-tree").IType<any, any, any>;
    }, {
        readonly assemblies: any[];
        readonly assemblyName: string;
        readonly rpcManager: any;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
export {};

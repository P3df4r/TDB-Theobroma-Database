"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-restricted-globals */
require("./workerPolyfill");
// @ts-ignore
const librpc_web_mod_1 = __importDefault(require("librpc-web-mod"));
const mobx_react_1 = require("mobx-react");
const PluginManager_1 = __importDefault(require("@jbrowse/core/PluginManager"));
const remoteAbortSignals_1 = require("@jbrowse/core/rpc/remoteAbortSignals");
const PluginLoader_1 = __importDefault(require("@jbrowse/core/PluginLoader"));
const serialize_error_1 = require("serialize-error");
// locals
const corePlugins_1 = __importDefault(require("./corePlugins"));
// static rendering is used for "SSR" style rendering which is done on the
// worker
(0, mobx_react_1.enableStaticRendering)(true);
// waits for a message from the main thread containing our configuration, which
// must be sent on boot
function receiveConfiguration() {
    const configurationP = new Promise(resolve => {
        function listener(event) {
            if (event.data.message === 'config') {
                resolve(event.data.config);
                removeEventListener('message', listener);
            }
        }
        self.addEventListener('message', listener);
    });
    postMessage({ message: 'readyForConfig' });
    return configurationP;
}
async function getPluginManager() {
    // Load runtime plugins
    const config = await receiveConfiguration();
    const pluginLoader = new PluginLoader_1.default(config.plugins, {
        fetchESM: url => { var _a; return _a = url, Promise.resolve().then(() => __importStar(require(_a))); },
    });
    pluginLoader.installGlobalReExports(self);
    const runtimePlugins = await pluginLoader.load(config.windowHref);
    const plugins = [...corePlugins_1.default.map(p => ({ plugin: p })), ...runtimePlugins];
    const pluginManager = new PluginManager_1.default(plugins.map(P => new P.plugin()));
    pluginManager.createPluggableElements();
    pluginManager.configure();
    return pluginManager;
}
function wrapForRpc(func) {
    return (args) => {
        const { channel, rpcDriverClassName } = args;
        return func({
            ...args,
            statusCallback: (message) => {
                // @ts-ignore
                self.rpcServer.emit(channel, message);
            },
        }, rpcDriverClassName);
    };
}
getPluginManager()
    .then(pluginManager => {
    const rpcConfig = Object.fromEntries(pluginManager
        .getRpcElements()
        .map(entry => [entry.name, wrapForRpc(entry.execute.bind(entry))]));
    // @ts-ignore
    self.rpcServer = new librpc_web_mod_1.default.Server({
        ...rpcConfig,
        ...(0, remoteAbortSignals_1.remoteAbortRpcHandler)(),
        ping: () => {
            // the ping method is required by the worker driver for checking the
            // health of the worker
        },
    });
    postMessage({ message: 'ready' });
})
    .catch(error => {
    postMessage({ message: 'error', error: (0, serialize_error_1.serializeError)(error) });
});
exports.default = () => {
    /* do nothing */
};
//# sourceMappingURL=rpcWorker.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = require("@jbrowse/core/configuration");
const RpcManager_1 = __importDefault(require("@jbrowse/core/rpc/RpcManager"));
const mobx_state_tree_1 = require("mobx-state-tree");
function createConfigModel(pluginManager, assemblyConfigSchemasType) {
    return mobx_state_tree_1.types
        .model('Configuration', {
        configuration: (0, configuration_1.ConfigurationSchema)('Root', {
            rpc: RpcManager_1.default.configSchema,
            highResolutionScaling: {
                type: 'number',
                defaultValue: 2,
            },
            featureDetails: (0, configuration_1.ConfigurationSchema)('FeatureDetails', {
                sequenceTypes: {
                    type: 'stringArray',
                    defaultValue: ['mRNA', 'transcript'],
                },
            }),
            formatDetails: (0, configuration_1.ConfigurationSchema)('FormatDetails', {
                feature: {
                    type: 'frozen',
                    description: 'adds extra fields to the feature details',
                    defaultValue: {},
                    contextVariable: ['feature'],
                },
                subfeatures: {
                    type: 'frozen',
                    description: 'adds extra fields to the subfeatures of a feature',
                    defaultValue: {},
                    contextVariable: ['feature'],
                },
                depth: {
                    type: 'number',
                    defaultValue: 2,
                    description: 'depth to iterate on subfeatures',
                },
            }),
            formatAbout: (0, configuration_1.ConfigurationSchema)('FormatAbout', {
                config: {
                    type: 'frozen',
                    description: 'formats configuration object in about dialog',
                    defaultValue: {},
                    contextVariable: ['config'],
                },
                hideUris: {
                    type: 'boolean',
                    defaultValue: false,
                },
            }),
            theme: { type: 'frozen', defaultValue: {} },
        }),
        assembly: assemblyConfigSchemasType,
        tracks: mobx_state_tree_1.types.array(pluginManager.pluggableConfigSchemaType('track')),
        internetAccounts: mobx_state_tree_1.types.array(pluginManager.pluggableConfigSchemaType('internet account')),
        connections: mobx_state_tree_1.types.array(pluginManager.pluggableConfigSchemaType('connection')),
        aggregateTextSearchAdapters: mobx_state_tree_1.types.array(pluginManager.pluggableConfigSchemaType('text search adapter')),
        plugins: mobx_state_tree_1.types.frozen(),
    })
        .views(self => ({
        get assemblies() {
            return [self.assembly];
        },
        get assemblyName() {
            return (0, configuration_1.readConfObject)(self.assembly, 'name');
        },
        get rpcManager() {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return (0, mobx_state_tree_1.getParent)(self).rpcManager;
        },
    }));
}
exports.default = createConfigModel;
//# sourceMappingURL=createConfigModel.js.map
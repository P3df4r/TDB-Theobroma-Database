"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const Menu_1 = __importDefault(require("@mui/icons-material/Menu"));
const mobx_react_1 = require("mobx-react");
const mobx_state_tree_1 = require("mobx-state-tree");
const react_use_measure_1 = __importDefault(require("react-use-measure"));
const ui_1 = require("@jbrowse/core/ui");
const util_1 = require("@jbrowse/core/util");
const AboutDialog = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./AboutDialog'))));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    viewContainer: {
        overflow: 'hidden',
        background: theme.palette.secondary.main,
        margin: theme.spacing(0.5),
    },
    icon: {
        color: theme.palette.secondary.contrastText,
    },
    displayName: {
        marginTop: 2,
        color: theme.palette.secondary.contrastText,
    },
    grow: {
        flexGrow: 1,
    },
    iconRoot: {
        '&:hover': {
            backgroundColor: (0, material_1.alpha)(theme.palette.secondary.contrastText, theme.palette.action.hoverOpacity),
            '@media (hover: none)': {
                backgroundColor: 'transparent',
            },
        },
    },
}));
const ViewMenu = (0, mobx_react_1.observer)(({ model, IconButtonProps, IconProps, }) => {
    var _a;
    const [anchorEl, setAnchorEl] = (0, react_1.useState)();
    if (!((_a = model.menuItems()) === null || _a === void 0 ? void 0 : _a.length)) {
        return null;
    }
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(material_1.IconButton, { ...IconButtonProps, "aria-label": "more", "aria-controls": "view-menu", "aria-haspopup": "true", onClick: event => setAnchorEl(event.currentTarget), "data-testid": "view_menu_icon" },
            react_1.default.createElement(Menu_1.default, { ...IconProps })),
        react_1.default.createElement(ui_1.Menu, { anchorEl: anchorEl, open: Boolean(anchorEl), onMenuItemClick: (_, callback) => {
                callback();
                setAnchorEl(undefined);
            }, onClose: () => setAnchorEl(undefined), menuItems: model.menuItems() })));
});
const ViewContainer = (0, mobx_react_1.observer)(({ view, children }) => {
    const { classes } = useStyles();
    const theme = (0, material_1.useTheme)();
    const session = (0, util_1.getSession)(view);
    const [dlgOpen, setDlgOpen] = (0, react_1.useState)(false);
    const [ref, { width }] = (0, react_use_measure_1.default)();
    const padWidth = theme.spacing(1);
    (0, react_1.useEffect)(() => {
        if (width && (0, mobx_state_tree_1.isAlive)(view)) {
            view.setWidth(width - parseInt(padWidth, 10) * 2);
        }
    }, [padWidth, view, width]);
    return (react_1.default.createElement(material_1.Paper, { elevation: 12, ref: ref, className: classes.viewContainer, style: { padding: `0px ${padWidth} ${padWidth}` } },
        session.DialogComponent ? (react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement("div", null) },
            react_1.default.createElement(session.DialogComponent, { ...session.DialogProps }))) : null,
        react_1.default.createElement("div", { style: { display: 'flex' } },
            react_1.default.createElement(ViewMenu, { model: view, IconButtonProps: {
                    classes: { root: classes.iconRoot },
                    edge: 'start',
                }, IconProps: { className: classes.icon } }),
            react_1.default.createElement("div", { className: classes.grow }),
            view.displayName ? (react_1.default.createElement(material_1.Typography, { variant: "body2", className: classes.displayName }, view.displayName)) : null,
            react_1.default.createElement("div", { className: classes.grow }),
            react_1.default.createElement(material_1.IconButton, { onClick: () => setDlgOpen(true) },
                react_1.default.createElement("div", { style: { width: 22, height: 22 } },
                    react_1.default.createElement(ui_1.Logomark, { variant: "white" })))),
        react_1.default.createElement(material_1.Paper, null, children),
        dlgOpen ? (react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement("div", null) },
            react_1.default.createElement(AboutDialog, { open: true, onClose: () => setDlgOpen(false) }))) : null));
});
exports.default = ViewContainer;
//# sourceMappingURL=ViewContainer.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const mobx_state_tree_1 = require("mobx-state-tree");
const configuration_1 = require("@jbrowse/core/configuration");
const ui_1 = require("@jbrowse/core/ui");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
// locals
const ModalWidget_1 = __importDefault(require("./ModalWidget"));
const ViewContainer_1 = __importDefault(require("./ViewContainer"));
const useStyles = (0, mui_1.makeStyles)()(() => ({
    // avoid parent styles getting into this div
    // https://css-tricks.com/almanac/properties/a/all/
    avoidParentStyle: {
        all: 'initial',
    },
}));
const JBrowseLinearGenomeView = (0, mobx_react_1.observer)(({ viewState }) => {
    const { classes } = useStyles();
    const { session } = viewState;
    const { view } = session;
    const { pluginManager } = (0, mobx_state_tree_1.getEnv)(session);
    const viewType = pluginManager.getViewType(view.type);
    if (!viewType) {
        throw new Error(`unknown view type ${view.type}`);
    }
    const { ReactComponent } = viewType;
    const theme = (0, ui_1.createJBrowseTheme)((0, configuration_1.readConfObject)(viewState.config.configuration, 'theme'));
    return (react_1.default.createElement(material_1.ThemeProvider, { theme: theme },
        react_1.default.createElement("div", { className: classes.avoidParentStyle },
            react_1.default.createElement(material_1.ScopedCssBaseline, null,
                react_1.default.createElement(ViewContainer_1.default, { key: `view-${view.id}`, view: view },
                    react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement("div", null, "Loading...") },
                        react_1.default.createElement(ReactComponent, { model: view, session: session }))),
                react_1.default.createElement(ModalWidget_1.default, { session: session })))));
});
exports.default = JBrowseLinearGenomeView;
//# sourceMappingURL=JBrowseLinearGenomeView.js.map
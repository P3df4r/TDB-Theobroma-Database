"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mobx_state_tree_1 = require("mobx-state-tree");
const configuration_1 = require("@jbrowse/core/configuration");
/**
 * #config Gff3TabixAdapter
 */
function x() { } // eslint-disable-line @typescript-eslint/no-unused-vars
const Gff3TabixAdapter = (0, configuration_1.ConfigurationSchema)('Gff3TabixAdapter', {
    /**
     * #slot
     */
    gffGzLocation: {
        type: 'fileLocation',
        defaultValue: { uri: '/path/to/my.gff.gz', locationType: 'UriLocation' },
    },
    index: (0, configuration_1.ConfigurationSchema)('Gff3TabixIndex', {
        /**
         * #slot index.indexType
         */
        indexType: {
            model: mobx_state_tree_1.types.enumeration('IndexType', ['TBI', 'CSI']),
            type: 'stringEnum',
            defaultValue: 'TBI',
        },
        /**
         * #slot index.indexType
         */
        location: {
            type: 'fileLocation',
            defaultValue: {
                uri: '/path/to/my.gff.gz.tbi',
                locationType: 'UriLocation',
            },
        },
    }),
    /**
     * #slot
     * the Gff3TabixAdapter has to "redispatch" if it fetches a region and
     * features it finds inside that region extend outside the region we requested.
     * you can disable this for certain feature types to avoid fetching e.g. the
     * entire chromosome
     */
    dontRedispatch: {
        type: 'stringArray',
        defaultValue: ['chromosome', 'region'],
    },
}, { explicitlyTyped: true });
exports.default = Gff3TabixAdapter;
//# sourceMappingURL=configSchema.js.map
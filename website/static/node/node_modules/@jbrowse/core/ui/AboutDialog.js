"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AboutContents = exports.FileInfo = void 0;
const react_1 = __importStar(require("react"));
const copy_to_clipboard_1 = __importDefault(require("copy-to-clipboard"));
const material_1 = require("@mui/material");
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const mui_1 = require("tss-react/mui");
const configuration_1 = require("../configuration");
const LoadingEllipses_1 = __importDefault(require("./LoadingEllipses"));
const util_1 = require("../util");
const tracks_1 = require("../util/tracks");
const BaseFeatureDetail_1 = require("../BaseFeatureWidget/BaseFeatureDetail");
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    content: {
        minWidth: 800,
    },
}));
function FileInfo({ config }) {
    const [error, setError] = (0, react_1.useState)();
    const [info, setInfo] = (0, react_1.useState)();
    const session = (0, util_1.getSession)(config);
    const { rpcManager } = session;
    (0, react_1.useEffect)(() => {
        const aborter = new AbortController();
        const { signal } = aborter;
        let cancelled = false;
        (async () => {
            try {
                const adapterConfig = (0, configuration_1.readConfObject)(config, 'adapter');
                const result = await rpcManager.call(config.trackId, 'CoreGetInfo', {
                    adapterConfig,
                    signal,
                });
                if (!cancelled) {
                    setInfo(result);
                }
            }
            catch (e) {
                if (!cancelled) {
                    console.error(e);
                    setError(e);
                }
            }
        })();
        return () => {
            aborter.abort();
            cancelled = true;
        };
    }, [config, rpcManager]);
    const details = typeof info === 'string'
        ? {
            header: `<pre>${info
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')}</pre>`,
        }
        : info || {};
    return info !== null ? (react_1.default.createElement(BaseFeatureDetail_1.BaseCard, { title: "File info" }, error ? (react_1.default.createElement(material_1.Typography, { color: "error" }, `${error}`)) : info === undefined ? (react_1.default.createElement(LoadingEllipses_1.default, { message: "Loading file data" })) : (react_1.default.createElement(BaseFeatureDetail_1.Attributes, { attributes: details })))) : null;
}
exports.FileInfo = FileInfo;
function AboutContents({ config }) {
    const [copied, setCopied] = (0, react_1.useState)(false);
    const conf = (0, configuration_1.readConfObject)(config);
    const session = (0, util_1.getSession)(config);
    const hideUris = (0, configuration_1.getConf)(session, ['formatAbout', 'hideUris']) ||
        (0, configuration_1.readConfObject)(config, ['formatAbout', 'hideUris']);
    const { pluginManager } = (0, util_1.getEnv)(session);
    const confPostExt = pluginManager.evaluateExtensionPoint('Core-customizeAbout', {
        config: {
            ...conf,
            ...(0, configuration_1.getConf)(session, ['formatAbout', 'config'], { config: conf }),
            ...(0, configuration_1.readConfObject)(config, ['formatAbout', 'config'], { config: conf }),
        },
    }, { session, config });
    const ExtraPanel = pluginManager.evaluateExtensionPoint('Core-extraAboutPanel', null, { session, config });
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(BaseFeatureDetail_1.BaseCard, { title: "Configuration" },
            !hideUris ? (react_1.default.createElement(material_1.Button, { variant: "contained", style: { float: 'right' }, onClick: () => {
                    (0, copy_to_clipboard_1.default)(JSON.stringify(conf, null, 2));
                    setCopied(true);
                    setTimeout(() => setCopied(false), 1000);
                } }, copied ? 'Copied to clipboard!' : 'Copy config')) : null,
            react_1.default.createElement(BaseFeatureDetail_1.Attributes, { attributes: confPostExt, omit: ['displays', 'baseUri', 'refNames', 'formatAbout'], hideUris: hideUris })),
        ExtraPanel ? (react_1.default.createElement(BaseFeatureDetail_1.BaseCard, { title: ExtraPanel.name },
            react_1.default.createElement(ExtraPanel.Component, { config: config }))) : null,
        react_1.default.createElement(FileInfo, { config: config })));
}
exports.AboutContents = AboutContents;
function AboutDialog({ config, handleClose, }) {
    const { classes } = useStyles();
    const session = (0, util_1.getSession)(config);
    const trackName = (0, tracks_1.getTrackName)(config, session);
    const { pluginManager } = (0, util_1.getEnv)(session);
    const AboutComponent = pluginManager.evaluateExtensionPoint('Core-replaceAbout', AboutContents, { session, config });
    return (react_1.default.createElement(material_1.Dialog, { open: true, onClose: handleClose, maxWidth: "xl" },
        react_1.default.createElement(material_1.DialogTitle, null,
            trackName,
            react_1.default.createElement(material_1.IconButton, { className: classes.closeButton, onClick: () => handleClose(), size: "large" },
                react_1.default.createElement(Close_1.default, null))),
        react_1.default.createElement(material_1.DialogContent, { className: classes.content },
            react_1.default.createElement(AboutComponent, { config: config }))));
}
exports.default = AboutDialog;

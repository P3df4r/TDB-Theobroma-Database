"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const react_error_boundary_1 = require("react-error-boundary");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const util_1 = require("../util");
const LoadingEllipses_1 = __importDefault(require("./LoadingEllipses"));
// icons
const Delete_1 = __importDefault(require("@mui/icons-material/Delete"));
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const Minimize_1 = __importDefault(require("@mui/icons-material/Minimize"));
const MoreVert_1 = __importDefault(require("@mui/icons-material/MoreVert"));
// locals
const Drawer_1 = __importDefault(require("./Drawer"));
const ErrorMessage_1 = __importDefault(require("./ErrorMessage"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    formControl: {
        margin: 0,
    },
    spacer: {
        flexGrow: 1,
    },
    drawerSelect: {
        margin: 0,
        color: theme.palette.secondary.contrastText,
    },
    dropDownIcon: {
        color: theme.palette.secondary.contrastText,
    },
    header: {
        background: theme.palette.secondary.main,
    },
}));
const DrawerHeader = (0, mobx_react_1.observer)(({ session, setToolbarHeight, }) => {
    const { pluginManager } = (0, util_1.getEnv)(session);
    const { visibleWidget, activeWidgets, drawerPosition } = session;
    const { classes } = useStyles();
    const [anchorEl, setAnchorEl] = (0, react_1.useState)(null);
    return (react_1.default.createElement(material_1.AppBar, { position: "sticky", className: classes.header, ref: ref => setToolbarHeight((ref === null || ref === void 0 ? void 0 : ref.getBoundingClientRect().height) || 0) },
        react_1.default.createElement(material_1.Toolbar, { disableGutters: true },
            react_1.default.createElement(material_1.FormControl, { className: classes.formControl },
                react_1.default.createElement(material_1.Select, { value: visibleWidget === null || visibleWidget === void 0 ? void 0 : visibleWidget.id, "data-testid": "widget-drawer-selects", className: classes.drawerSelect, classes: { icon: classes.dropDownIcon }, renderValue: widgetId => {
                        const widget = session.activeWidgets.get(widgetId);
                        if (!widget) {
                            return (react_1.default.createElement(material_1.Typography, { variant: "h6", color: "inherit" }, "Unknown widget"));
                        }
                        const widgetType = pluginManager.getWidgetType(widget.type);
                        const { HeadingComponent, heading } = widgetType;
                        return HeadingComponent ? (react_1.default.createElement(HeadingComponent, { model: widget })) : (react_1.default.createElement(material_1.Typography, { variant: "h6", color: "inherit" }, heading));
                    }, onChange: e => {
                        const w = session.activeWidgets.get(e.target.value);
                        if (!w) {
                            session.notify(`Widget not found ${e.target.value}`, 'warning');
                        }
                        else {
                            session.showWidget(w);
                        }
                    } }, Array.from(activeWidgets.values()).map(widget => {
                    const widgetType = pluginManager.getWidgetType(widget.type);
                    const { HeadingComponent, heading } = widgetType;
                    return (react_1.default.createElement(material_1.MenuItem, { "data-testid": `widget-drawer-selects-item-${widget.type}`, key: widget.id, value: widget.id },
                        HeadingComponent ? (react_1.default.createElement(HeadingComponent, { model: widget })) : (react_1.default.createElement(material_1.Typography, { variant: "h6", color: "inherit" }, heading)),
                        react_1.default.createElement(material_1.IconButton, { "data-testid": `${widget.type}-drawer-delete`, color: "inherit", "aria-label": "Delete", onClick: () => session.hideWidget(widget) },
                            react_1.default.createElement(Delete_1.default, null))));
                }))),
            react_1.default.createElement("div", { className: classes.spacer }),
            react_1.default.createElement("div", null,
                react_1.default.createElement(material_1.IconButton, { "data-testid": "drawer-close", color: "inherit", onClick: event => setAnchorEl(event.currentTarget) },
                    react_1.default.createElement(MoreVert_1.default, null)),
                react_1.default.createElement(material_1.Tooltip, { title: "Minimize drawer" },
                    react_1.default.createElement(material_1.IconButton, { "data-testid": "drawer-minimize", color: "inherit", onClick: () => {
                            session.notify(`Drawer minimized, click button on ${drawerPosition} side of screen to re-open`, 'info');
                            session.minimizeWidgetDrawer();
                        } },
                        react_1.default.createElement(Minimize_1.default, null))),
                react_1.default.createElement(material_1.Tooltip, { title: "Close drawer" },
                    react_1.default.createElement(material_1.IconButton, { "data-testid": "drawer-close", color: "inherit", onClick: () => session.hideWidget(visibleWidget) },
                        react_1.default.createElement(Close_1.default, null))))),
        react_1.default.createElement(material_1.Menu, { anchorEl: anchorEl, open: Boolean(anchorEl), onClose: () => setAnchorEl(null) }, ['left', 'right'].map(option => (react_1.default.createElement(material_1.MenuItem, { key: option, selected: drawerPosition === 'option', onClick: () => {
                session.setDrawerPosition(option);
                setAnchorEl(null);
            } }, option))))));
});
const DrawerWidget = (0, mobx_react_1.observer)(({ session }) => {
    const { visibleWidget } = session;
    const { pluginManager } = (0, util_1.getEnv)(session);
    const DrawerComponent = visibleWidget
        ? pluginManager.evaluateExtensionPoint('Core-replaceWidget', pluginManager.getWidgetType(visibleWidget.type).ReactComponent, {
            session,
            model: visibleWidget,
        })
        : null;
    // we track the toolbar height because components that use virtualized
    // height want to be able to fill the contained, minus the toolbar height
    // (the position static/sticky is included in AutoSizer estimates)
    const [toolbarHeight, setToolbarHeight] = (0, react_1.useState)(0);
    return (react_1.default.createElement(Drawer_1.default, { session: session },
        react_1.default.createElement(DrawerHeader, { session: session, setToolbarHeight: setToolbarHeight }),
        react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement(LoadingEllipses_1.default, null) },
            react_1.default.createElement(react_error_boundary_1.ErrorBoundary, { FallbackComponent: ({ error }) => react_1.default.createElement(ErrorMessage_1.default, { error: error }) }, DrawerComponent ? (react_1.default.createElement(DrawerComponent, { model: visibleWidget, session: session, toolbarHeight: toolbarHeight })) : null))));
});
exports.default = DrawerWidget;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const Launch_1 = __importDefault(require("@mui/icons-material/Launch"));
const react_error_boundary_1 = require("react-error-boundary");
const mobx_react_1 = require("mobx-react");
const mobx_state_tree_1 = require("mobx-state-tree");
// locals
const configuration_1 = require("../configuration");
// ui elements
const DrawerWidget_1 = __importDefault(require("./DrawerWidget"));
const DropDownMenu_1 = __importDefault(require("./DropDownMenu"));
const ErrorMessage_1 = __importDefault(require("./ErrorMessage"));
const LoadingEllipses_1 = __importDefault(require("./LoadingEllipses"));
const EditableTypography_1 = __importDefault(require("./EditableTypography"));
const Snackbar_1 = __importDefault(require("./Snackbar"));
const ViewContainer_1 = __importDefault(require("./ViewContainer"));
const Logo_1 = require("./Logo");
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    root: {
        fontFamily: 'Roboto',
        display: 'grid',
        height: '100vh',
        width: '100%',
    },
    fabLeft: {
        zIndex: 10000,
        position: 'fixed',
        bottom: theme.spacing(2),
        left: theme.spacing(2),
    },
    fabRight: {
        zIndex: 10000,
        position: 'fixed',
        bottom: theme.spacing(2),
        right: theme.spacing(2),
    },
    menuBarAndComponents: {
        gridColumn: 'main',
        display: 'grid',
        gridTemplateRows: '[menubar] min-content [components] auto',
        height: '100vh',
    },
    menuBar: {
        gridRow: 'menubar',
    },
    components: {
        overflowY: 'auto',
        gridRow: 'components',
    },
    appBar: {
        flexGrow: 1,
    },
    grow: {
        flexGrow: 1,
    },
    inputBase: {
        color: theme.palette.primary.contrastText,
    },
    inputRoot: {
        '&:hover': {
            backgroundColor: theme.palette.primary.light,
        },
    },
    inputFocused: {
        borderColor: theme.palette.secondary.main,
        backgroundColor: theme.palette.primary.light,
    },
    selectPaper: {
        padding: theme.spacing(4),
    },
}));
const Logo = (0, mobx_react_1.observer)(({ session }) => {
    const { configuration } = session;
    const logoPath = (0, configuration_1.readConfObject)(configuration, 'logoPath');
    if (!(logoPath === null || logoPath === void 0 ? void 0 : logoPath.uri)) {
        return react_1.default.createElement(Logo_1.LogoFull, { variant: "white" });
    }
    else {
        return react_1.default.createElement("img", { src: logoPath.uri, alt: "Custom logo" });
    }
});
const AppToolbar = (0, mobx_react_1.observer)(({ session, HeaderButtons = react_1.default.createElement("div", null), }) => {
    const { classes } = useStyles();
    const { savedSessionNames, name, menus } = session;
    function handleNameChange(newName) {
        if (savedSessionNames === null || savedSessionNames === void 0 ? void 0 : savedSessionNames.includes(newName)) {
            session.notify(`Cannot rename session to "${newName}", a saved session with that name already exists`, 'warning');
        }
        else {
            session.renameCurrentSession(newName);
        }
    }
    return (react_1.default.createElement(material_1.Toolbar, null,
        menus.map(menu => (react_1.default.createElement(DropDownMenu_1.default, { key: menu.label, menuTitle: menu.label, menuItems: menu.menuItems, session: session }))),
        react_1.default.createElement("div", { className: classes.grow }),
        react_1.default.createElement(material_1.Tooltip, { title: "Rename Session", arrow: true },
            react_1.default.createElement(EditableTypography_1.default, { value: name, setValue: handleNameChange, variant: "body1", classes: {
                    inputBase: classes.inputBase,
                    inputRoot: classes.inputRoot,
                    inputFocused: classes.inputFocused,
                } })),
        HeaderButtons,
        react_1.default.createElement("div", { className: classes.grow }),
        react_1.default.createElement("div", { style: { width: 150, maxHeight: 48 } },
            react_1.default.createElement(Logo, { session: session }))));
});
const ViewLauncher = (0, mobx_react_1.observer)(({ session }) => {
    var _a;
    const { classes } = useStyles();
    const { pluginManager } = (0, mobx_state_tree_1.getEnv)(session);
    const viewTypes = pluginManager.getElementTypeRecord('view').all();
    const [value, setValue] = (0, react_1.useState)((_a = viewTypes[0]) === null || _a === void 0 ? void 0 : _a.name);
    return (react_1.default.createElement(material_1.Paper, { className: classes.selectPaper },
        react_1.default.createElement(material_1.Typography, null, "Select a view to launch"),
        react_1.default.createElement(material_1.FormControl, { style: { margin: 2 } },
            react_1.default.createElement(material_1.Select, { value: value, onChange: event => setValue(event.target.value) }, viewTypes.map(({ name }) => (react_1.default.createElement(material_1.MenuItem, { key: name, value: name }, name))))),
        react_1.default.createElement(material_1.FormControl, { style: { margin: 2 } },
            react_1.default.createElement(material_1.Button, { onClick: () => session.addView(value, {}), variant: "contained", color: "primary" }, "Launch view"))));
});
const ViewPanel = (0, mobx_react_1.observer)(({ view, session }) => {
    const { pluginManager } = (0, mobx_state_tree_1.getEnv)(session);
    const viewType = pluginManager.getViewType(view.type);
    if (!viewType) {
        throw new Error(`unknown view type ${view.type}`);
    }
    const { ReactComponent } = viewType;
    return (react_1.default.createElement(ViewContainer_1.default, { view: view, onClose: () => session.removeView(view), onMinimize: () => view.setMinimized(!view.minimized) }, !view.minimized ? (react_1.default.createElement(react_error_boundary_1.ErrorBoundary, { FallbackComponent: ({ error }) => react_1.default.createElement(ErrorMessage_1.default, { error: error }) },
        react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement(LoadingEllipses_1.default, null) },
            react_1.default.createElement(ReactComponent, { model: view, session: session, getTrackType: pluginManager.getTrackType })))) : (false)));
});
const App = (0, mobx_react_1.observer)((props) => {
    const { session } = props;
    const { classes } = useStyles();
    const { minimized, visibleWidget, drawerWidth, activeWidgets, views, drawerPosition, } = session;
    const drawerVisible = visibleWidget && !minimized;
    let grid;
    if (drawerPosition === 'right') {
        grid = [
            `[main] 1fr`,
            drawerVisible ? `[drawer] ${drawerWidth}px` : undefined,
        ];
    }
    else if (drawerPosition === 'left') {
        grid = [
            drawerVisible ? `[drawer] ${drawerWidth}px` : undefined,
            `[main] 1fr`,
        ];
    }
    return (react_1.default.createElement("div", { className: classes.root, style: {
            gridTemplateColumns: grid === null || grid === void 0 ? void 0 : grid.filter(f => !!f).join(' '),
        } },
        drawerVisible && drawerPosition === 'left' ? (react_1.default.createElement(DrawerWidget_1.default, { session: session })) : null,
        session.DialogComponent ? (react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement("div", null) },
            react_1.default.createElement(session.DialogComponent, { ...session.DialogProps }))) : null,
        react_1.default.createElement("div", { className: classes.menuBarAndComponents },
            react_1.default.createElement("div", { className: classes.menuBar },
                react_1.default.createElement(material_1.AppBar, { className: classes.appBar, position: "static" },
                    react_1.default.createElement(AppToolbar, { ...props }))),
            react_1.default.createElement("div", { className: classes.components },
                views.length ? (views.map(view => (react_1.default.createElement(ViewPanel, { key: `view-${view.id}`, view: view, session: session })))) : (react_1.default.createElement(ViewLauncher, { ...props })),
                react_1.default.createElement("div", { style: { height: 300 } }))),
        activeWidgets.size > 0 && minimized ? (react_1.default.createElement(material_1.Tooltip, { title: "Open drawer widget" },
            react_1.default.createElement(material_1.Fab, { className: drawerPosition === 'right' ? classes.fabRight : classes.fabLeft, color: "primary", "data-testid": "drawer-maximize", onClick: () => session.showWidgetDrawer() },
                react_1.default.createElement(Launch_1.default, null)))) : null,
        drawerVisible && drawerPosition === 'right' ? (react_1.default.createElement(DrawerWidget_1.default, { session: session })) : null,
        react_1.default.createElement(Snackbar_1.default, { session: session })));
});
exports.default = App;

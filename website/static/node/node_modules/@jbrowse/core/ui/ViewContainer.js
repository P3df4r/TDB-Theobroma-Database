"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const mobx_state_tree_1 = require("mobx-state-tree");
const react_use_measure_1 = __importDefault(require("react-use-measure"));
// icons
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const Minimize_1 = __importDefault(require("@mui/icons-material/Minimize"));
const Add_1 = __importDefault(require("@mui/icons-material/Add"));
const Menu_1 = __importDefault(require("@mui/icons-material/Menu"));
const ArrowDownward_1 = __importDefault(require("@mui/icons-material/ArrowDownward"));
const ArrowUpward_1 = __importDefault(require("@mui/icons-material/ArrowUpward"));
// locals
const util_1 = require("../util");
const EditableTypography_1 = __importDefault(require("./EditableTypography"));
const Menu_2 = __importDefault(require("./Menu"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    viewContainer: {
        overflow: 'hidden',
        background: theme.palette.secondary.main,
        margin: theme.spacing(0.5),
    },
    icon: {
        color: theme.palette.secondary.contrastText,
    },
    grow: {
        flexGrow: 1,
    },
    input: {
        paddingBottom: 0,
        paddingTop: 2,
    },
    inputBase: {
        color: theme.palette.secondary.contrastText,
    },
    inputRoot: {
        '&:hover': {
            backgroundColor: theme.palette.secondary.light,
        },
    },
    inputFocused: {
        borderColor: theme.palette.primary.main,
        backgroundColor: theme.palette.secondary.light,
    },
}));
const ViewMenu = (0, mobx_react_1.observer)(({ model, IconButtonProps, IconProps, }) => {
    const [anchorEl, setAnchorEl] = (0, react_1.useState)();
    const { menuItems } = model;
    const session = (0, util_1.getSession)(model);
    const items = [
        ...(session.views.length > 1
            ? [
                {
                    label: 'Move view up',
                    icon: ArrowUpward_1.default,
                    onClick: () => session.moveViewUp(model.id),
                },
                {
                    label: 'Move view down',
                    icon: ArrowDownward_1.default,
                    onClick: () => session.moveViewDown(model.id),
                },
            ]
            : []),
        // <=1.3.3 didn't use a function, so check as value also
        ...((typeof menuItems === 'function' ? menuItems() : menuItems) || []),
    ];
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(material_1.IconButton, { ...IconButtonProps, onClick: event => setAnchorEl(event.currentTarget), "data-testid": "view_menu_icon" },
            react_1.default.createElement(Menu_1.default, { ...IconProps, fontSize: "small" })),
        react_1.default.createElement(Menu_2.default, { anchorEl: anchorEl, open: Boolean(anchorEl), onMenuItemClick: (_event, callback) => {
                callback();
                setAnchorEl(undefined);
            }, onClose: () => setAnchorEl(undefined), menuItems: items })));
});
const ViewContainer = (0, mobx_react_1.observer)(({ view, onClose, onMinimize, style, children, }) => {
    var _a;
    const { classes } = useStyles();
    const theme = (0, material_1.useTheme)();
    const padWidth = theme.spacing(1);
    const [ref, { width }] = (0, react_use_measure_1.default)();
    (0, react_1.useEffect)(() => {
        if (width && (0, mobx_state_tree_1.isAlive)(view)) {
            view.setWidth(width - parseInt(padWidth, 10) * 2);
        }
    }, [padWidth, view, width]);
    const scrollRef = (0, react_1.useRef)(null);
    // scroll the view into view when first mounted
    // note that this effect will run only once, because of
    // the empty array second param
    (0, react_1.useEffect)(() => {
        var _a, _b;
        (_b = (_a = scrollRef.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView) === null || _b === void 0 ? void 0 : _b.call(_a, { block: 'center' });
    }, []);
    return (react_1.default.createElement(material_1.Paper, { ref: ref, elevation: 12, className: classes.viewContainer, style: { ...style, padding: `0px ${padWidth} ${padWidth}` } },
        react_1.default.createElement("div", { ref: scrollRef, style: { display: 'flex' } },
            react_1.default.createElement(ViewMenu, { model: view, IconProps: { className: classes.icon } }),
            react_1.default.createElement("div", { className: classes.grow }),
            react_1.default.createElement(material_1.Tooltip, { title: "Rename view", arrow: true },
                react_1.default.createElement(EditableTypography_1.default, { value: (view.displayName ||
                        (
                        // @ts-ignore
                        (_a = view.assemblyNames) === null || _a === void 0 ? void 0 : _a.join(',')) ||
                        'Untitled view') + (view.minimized ? ' (minimized)' : ''), setValue: val => view.setDisplayName(val), variant: "body2", classes: {
                        input: classes.input,
                        inputBase: classes.inputBase,
                        inputRoot: classes.inputRoot,
                        inputFocused: classes.inputFocused,
                    } })),
            react_1.default.createElement("div", { className: classes.grow }),
            react_1.default.createElement(material_1.IconButton, { "data-testid": "minimize_view", onClick: onMinimize }, view.minimized ? (react_1.default.createElement(Add_1.default, { className: classes.icon, fontSize: "small" })) : (react_1.default.createElement(Minimize_1.default, { className: classes.icon, fontSize: "small" }))),
            react_1.default.createElement(material_1.IconButton, { "data-testid": "close_view", onClick: onClose },
                react_1.default.createElement(Close_1.default, { className: classes.icon, fontSize: "small" }))),
        react_1.default.createElement(material_1.Paper, null, children)));
});
exports.default = ViewContainer;

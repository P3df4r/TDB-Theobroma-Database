"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const configuration_1 = require("../configuration");
const useStyles = (0, mui_1.makeStyles)()({
    hoverLabel: {
        border: '1px solid black',
        position: 'absolute',
        background: '#fffa',
        pointerEvents: 'none',
        zIndex: 10000,
    },
});
const Tooltip = ({ offsetX, offsetY, configuration, feature, timeout = 300, }) => {
    const { classes } = useStyles();
    const [shown, setShown] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        // only show the loading message after short timeout to prevent excessive
        // flickering
        const handle = setTimeout(() => setShown(true), timeout);
        return () => clearTimeout(handle);
    });
    if (feature && shown) {
        const text = (0, configuration_1.readConfObject)(configuration, 'mouseover', { feature });
        return (react_1.default.createElement("div", { className: classes.hoverLabel, style: { left: offsetX, top: offsetY } }, text));
    }
    return null;
};
exports.default = (0, mobx_react_1.observer)(Tooltip);

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
// locals
const types_1 = require("../../util/types");
const LocalFileChooser_1 = __importDefault(require("./LocalFileChooser"));
const UrlChooser_1 = __importDefault(require("./UrlChooser"));
// icons
const ArrowDropDown_1 = __importDefault(require("@mui/icons-material/ArrowDropDown"));
function ToggleButtonWithTooltip(props) {
    const { title, children, ...other } = props;
    return (react_1.default.createElement(material_1.Tooltip, { title: title || '' },
        react_1.default.createElement(material_1.ToggleButton, { ...other }, children)));
}
function shorten(str, len) {
    if (typeof str === 'string' && str.length > len) {
        return `${str.substring(0, len)}â€¦`;
    }
    return str;
}
const FileSelector = (0, mobx_react_1.observer)((props) => {
    const { location, name, description, rootModel, setLocation } = props;
    const fileOrUrl = !location || (0, types_1.isUriLocation)(location) ? 'url' : 'file';
    const [toggleButtonValue, setToggleButtonValue] = (0, react_1.useState)(location && 'internetAccountId' in location && location.internetAccountId
        ? location.internetAccountId
        : fileOrUrl);
    const accts = (0, types_1.isAppRootModel)(rootModel)
        ? rootModel.internetAccounts.slice()
        : [];
    const numShown = 2;
    const [shownAccts, setShownAccts] = (0, react_1.useState)(accts.slice(0, numShown));
    const [hiddenAccts, setHiddenAccts] = (0, react_1.useState)(accts.slice(numShown));
    const [anchorEl, setAnchorEl] = (0, react_1.useState)(null);
    const selectedAcct = accts.find(ia => ia.internetAccountId === toggleButtonValue);
    const setLocationWithAccount = (location) => {
        setLocation({
            ...location,
            internetAccountId: selectedAcct
                ? selectedAcct.internetAccountId
                : undefined,
        });
    };
    // if you swap account selection after inputting url
    if (location &&
        selectedAcct &&
        (0, types_1.isUriLocation)(location) &&
        location.internetAccountId !== selectedAcct.internetAccountId) {
        setLocationWithAccount(location);
    }
    let locationInput = (react_1.default.createElement(UrlChooser_1.default, { ...props, setLocation: setLocationWithAccount, label: selectedAcct === null || selectedAcct === void 0 ? void 0 : selectedAcct.selectorLabel }));
    if (toggleButtonValue === 'file') {
        locationInput = react_1.default.createElement(LocalFileChooser_1.default, { ...props });
    }
    if (selectedAcct === null || selectedAcct === void 0 ? void 0 : selectedAcct.SelectorComponent) {
        const { SelectorComponent } = selectedAcct;
        locationInput = (react_1.default.createElement(SelectorComponent, { ...props, setLocation: setLocationWithAccount }));
    }
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(material_1.Box, { display: "flex" },
            react_1.default.createElement(material_1.InputLabel, { shrink: true }, name)),
        react_1.default.createElement(material_1.Box, { display: "flex", flexDirection: "row" },
            react_1.default.createElement(material_1.Box, null,
                react_1.default.createElement(material_1.ToggleButtonGroup, { value: toggleButtonValue, exclusive: true, onChange: (_event, newState) => {
                        if (newState) {
                            setToggleButtonValue(newState);
                        }
                        if ((0, types_1.isUriLocation)(location)) {
                            setLocationWithAccount(location);
                        }
                    }, "aria-label": "file, url, or account picker" },
                    new URLSearchParams(window.location.search).get('adminKey') ? null : (react_1.default.createElement(material_1.ToggleButton, { value: "file", "aria-label": "local file" }, "File")),
                    react_1.default.createElement(material_1.ToggleButton, { value: "url", "aria-label": "url" }, "URL"),
                    shownAccts.map(({ internetAccountId, toggleContents, name }) => (react_1.default.createElement(ToggleButtonWithTooltip, { key: internetAccountId, value: internetAccountId, "aria-label": name, title: name }, typeof toggleContents === 'string'
                        ? shorten(toggleContents, 5)
                        : toggleContents || shorten(name, 5)))),
                    hiddenAccts.length ? (
                    // @ts-ignore
                    react_1.default.createElement(material_1.ToggleButton, { onClick: event => setAnchorEl(event.target), selected: false },
                        "More",
                        react_1.default.createElement(ArrowDropDown_1.default, null))) : null),
                react_1.default.createElement(material_1.Menu, { open: Boolean(anchorEl), anchorEl: anchorEl, onClose: () => setAnchorEl(null), anchorOrigin: {
                        vertical: 'bottom',
                        horizontal: 'center',
                    }, transformOrigin: {
                        vertical: 'top',
                        horizontal: 'center',
                    } }, hiddenAccts === null || hiddenAccts === void 0 ? void 0 : hiddenAccts.map((acct, idx) => (react_1.default.createElement(material_1.MenuItem, { key: acct.internetAccountId, value: acct.internetAccountId, onClick: () => {
                        const prev = shownAccts[shownAccts.length - 1];
                        setShownAccts([
                            ...shownAccts.slice(0, shownAccts.length - 1),
                            acct,
                        ]);
                        setHiddenAccts([
                            prev,
                            ...hiddenAccts.slice(0, idx),
                            ...hiddenAccts.slice(idx + 1),
                        ]);
                        setToggleButtonValue(acct.internetAccountId);
                        setAnchorEl(null);
                    } }, acct.name)))))),
        locationInput,
        react_1.default.createElement(material_1.FormHelperText, null, description)));
});
exports.default = FileSelector;

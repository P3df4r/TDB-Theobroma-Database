"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const mobx_react_1 = require("mobx-react");
function MessageSnackbar({ session, }) {
    const [open, setOpen] = (0, react_1.useState)(false);
    const [snackbarMessage, setSnackbarMessage] = (0, react_1.useState)();
    const { popSnackbarMessage, snackbarMessages } = session;
    const latestMessage = snackbarMessages.length
        ? snackbarMessages[snackbarMessages.length - 1]
        : null;
    (0, react_1.useEffect)(() => {
        let timeoutId;
        if (snackbarMessage) {
            if (!latestMessage) {
                setSnackbarMessage(undefined);
            }
            else if (snackbarMessage[0] !== latestMessage[0]) {
                setOpen(false);
                timeoutId = setTimeout(() => {
                    setSnackbarMessage(latestMessage);
                    setOpen(true);
                }, 100);
            }
        }
        else if (latestMessage) {
            setSnackbarMessage(latestMessage);
            setOpen(true);
        }
        return () => {
            clearTimeout(timeoutId);
        };
    }, [latestMessage, snackbarMessage]);
    const handleClose = (_event, reason) => {
        if (reason === 'clickaway') {
            return;
        }
        popSnackbarMessage();
        setOpen(false);
    };
    const [message, level, action] = snackbarMessage || [];
    return (react_1.default.createElement(material_1.Snackbar, { open: open && !!message, onClose: handleClose, anchorOrigin: { vertical: 'bottom', horizontal: 'center' } },
        react_1.default.createElement(material_1.Alert, { onClose: handleClose, action: action ? (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(material_1.Button, { color: "inherit", onClick: e => {
                        action.onClick();
                        handleClose(e);
                    } }, action.name),
                react_1.default.createElement(material_1.IconButton, { "aria-label": "close", color: "inherit", onClick: handleClose },
                    react_1.default.createElement(Close_1.default, null)))) : null, severity: level || 'warning' }, message)));
}
exports.default = (0, mobx_react_1.observer)(MessageSnackbar);

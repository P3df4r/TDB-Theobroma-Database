"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mui_1 = require("tss-react/mui");
const useStyles = (0, mui_1.makeStyles)()({
    horizontalHandle: {
        cursor: 'row-resize',
        width: '100%',
    },
    verticalHandle: {
        cursor: 'col-resize',
        height: '100%',
    },
    flexbox_verticalHandle: {
        cursor: 'col-resize',
        alignSelf: 'stretch', // the height: 100% is actually unable to function inside flexbox
    },
    flexbox_horizontalHandle: {
        cursor: 'row-resize',
        alignSelf: 'stretch', // similar to above
    },
});
function ResizeHandle({ onDrag, vertical = false, flexbox = false, className: originalClassName, ...props }) {
    const [mouseDragging, setMouseDragging] = (0, react_1.useState)(false);
    const prevPos = (0, react_1.useRef)(0);
    const { classes, cx } = useStyles();
    (0, react_1.useEffect)(() => {
        function mouseMove(event) {
            event.preventDefault();
            const pos = vertical ? event.clientX : event.clientY;
            const distance = pos - prevPos.current;
            if (distance) {
                onDrag(distance);
                prevPos.current = pos;
            }
        }
        function mouseUp() {
            setMouseDragging(false);
        }
        if (mouseDragging) {
            window.addEventListener('mousemove', mouseMove, true);
            window.addEventListener('mouseup', mouseUp, true);
            return () => {
                window.removeEventListener('mousemove', mouseMove, true);
                window.removeEventListener('mouseup', mouseUp, true);
            };
        }
        return () => { };
    }, [mouseDragging, onDrag, vertical]);
    let className;
    if (flexbox) {
        if (vertical) {
            className = classes.flexbox_verticalHandle;
        }
        else {
            className = classes.flexbox_horizontalHandle;
        }
    }
    else if (vertical) {
        className = classes.verticalHandle;
    }
    else {
        className = classes.horizontalHandle;
    }
    return (react_1.default.createElement("div", { "data-resizer": "true", onMouseDown: event => {
            event.preventDefault();
            prevPos.current = vertical ? event.clientX : event.clientY;
            setMouseDragging(true);
        }, role: "presentation", className: cx(className, originalClassName), ...props }));
}
exports.default = ResizeHandle;

import { Instance, IAnyType } from 'mobx-state-tree';
import PluginManager from '../PluginManager';
import { Region, Feature } from '../util';
type RefNameAliases = Record<string, string>;
export interface BaseOptions {
    signal?: AbortSignal;
    sessionId: string;
    statusCallback?: Function;
}
export interface RefNameMap {
    forwardMap: RefNameAliases;
    reverseMap: RefNameAliases;
}
export interface BasicRegion {
    start: number;
    end: number;
    refName: string;
    assemblyName: string;
}
export interface Loading {
    adapterRegionsWithAssembly: Region[];
    refNameAliases: RefNameAliases;
    lowerCaseRefNameAliases: RefNameAliases;
    cytobands: Feature[];
}
export default function assemblyFactory(assemblyConfigType: IAnyType, pm: PluginManager): import("mobx-state-tree").IModelType<{
    configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
}, {
    error: unknown;
    loaded: boolean;
    loadingP: Promise<void> | undefined;
    volatileRegions: BasicRegion[] | undefined;
    refNameAliases: RefNameAliases | undefined;
    lowerCaseRefNameAliases: RefNameAliases | undefined;
    cytobands: Feature[] | undefined;
} & {
    readonly initialized: boolean;
    readonly name: string;
    readonly regions: BasicRegion[] | undefined;
    readonly aliases: string[];
    readonly displayName: string | undefined;
    hasName(name: string): boolean;
    readonly allAliases: string[];
    readonly allRefNames: string[] | undefined;
    readonly lowerCaseRefNames: string[] | undefined;
    readonly allRefNamesWithLowerCase: string[] | undefined;
    readonly rpcManager: any;
    readonly refNameColors: string[];
} & {
    readonly refNames: string[] | undefined;
} & {
    getCanonicalRefName(refName: string): string;
    getRefNameColor(refName: string): string | undefined;
    isValidRefName(refName: string): boolean;
} & {
    setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: Loading): void;
    setError(e: unknown): void;
    setRegions(regions: Region[]): void;
    setRefNameAliases(aliases: RefNameAliases, lcAliases: RefNameAliases): void;
    setCytobands(cytobands: Feature[]): void;
    setLoadingP(p?: Promise<void>): void;
    load(): Promise<void>;
    loadPre(): Promise<void>;
} & {
    getAdapterMapEntry(adapterConf: unknown, options: BaseOptions): Promise<RefNameMap>;
    /**
     * get Map of `canonical-name -> adapter-specific-name`
     */
    getRefNameMapForAdapter(adapterConf: unknown, opts: BaseOptions): Promise<RefNameAliases>;
    /**
     * get Map of `adapter-specific-name -> canonical-name`
     */
    getReverseRefNameMapForAdapter(adapterConf: unknown, opts: BaseOptions): Promise<RefNameAliases>;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type AssemblyModel = ReturnType<typeof assemblyFactory>;
export type Assembly = Instance<AssemblyModel>;
export {};

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const styles_1 = require("@mui/material/styles");
const react_dom_1 = require("react-dom");
const ui_1 = require("../../ui");
const util_1 = require("../../util");
function ServerSideRenderedContent(props) {
    const ssrContainerNode = (0, react_1.useRef)(null);
    const { theme, html, RenderingComponent, ...rest } = props;
    const jbrowseTheme = (0, ui_1.createJBrowseTheme)(theme);
    (0, react_1.useEffect)(() => {
        const domNode = ssrContainerNode.current;
        function doHydrate() {
            if (domNode) {
                if (domNode) {
                    (0, react_dom_1.unmountComponentAtNode)(domNode);
                }
                domNode.innerHTML = html;
                // defer main-thread rendering and hydration for when
                // we have some free time. helps keep the framerate up.
                //
                // note: the timeout param to rIC below helps when you are doing
                // a long continuous scroll, it forces it to evaluate because
                // otherwise the continuous scroll would never give it time to do
                // so
                (0, util_1.rIC)(() => {
                    (0, react_dom_1.hydrate)(react_1.default.createElement(styles_1.ThemeProvider, { theme: jbrowseTheme },
                        react_1.default.createElement(RenderingComponent, { ...rest })), domNode);
                }, { timeout: 300 });
            }
        }
        doHydrate();
        return () => {
            if (domNode) {
                (0, react_dom_1.unmountComponentAtNode)(domNode);
            }
        };
    }, [html, jbrowseTheme, rest, RenderingComponent]);
    return (react_1.default.createElement("div", { ref: ssrContainerNode, "data-html-size": html.length, className: "ssr-container" }));
}
exports.default = ServerSideRenderedContent;

import { Instance } from 'mobx-state-tree';
import { AnyConfigurationSchemaType } from '../../configuration';
import PluginManager from '../../PluginManager';
import { MenuItem } from '../../ui';
/**
 * #stateModel BaseTrackModel
 * these MST models only exist for tracks that are *shown*.
 * they should contain only UI state for the track, and have
 * a reference to a track configuration (stored under
 * session.configuration.assemblies.get(assemblyName).tracks).
 * note that multiple displayed tracks could use the same
 * configuration.
 */
export declare function createBaseTrackModel(pm: PluginManager, trackType: string, baseTrackConfig: AnyConfigurationSchemaType): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    configuration: import("mobx-state-tree").ITypeUnion<any, any, any>;
    minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    displays: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
}, {
    /**
     * #getter
     * determines which webworker to send the track to, currently based on trackId
     */
    readonly rpcSessionId: any;
    /**
     * #getter
     */
    readonly name: any;
    /**
     * #getter
     */
    readonly textSearchAdapter: any;
    /**
     * #getter
     */
    readonly adapterType: import("..").AdapterType;
    /**
     * #getter
     */
    readonly viewMenuActions: MenuItem[];
    /**
     * #getter
     */
    readonly canConfigure: any;
} & {
    /**
     * #action
     */
    setMinimized(flag: boolean): void;
    /**
     * #action
     */
    activateConfigurationUI(): void;
    /**
     * #action
     */
    showDisplay(displayId: string, initialSnapshot?: {}): void;
    /**
     * #action
     */
    hideDisplay(displayId: string): number;
    /**
     * #action
     */
    replaceDisplay(oldId: string, newId: string, initialSnapshot?: {}): void;
} & {
    /**
     * #method
     */
    trackMenuItems(): MenuItem[];
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type BaseTrackStateModel = ReturnType<typeof createBaseTrackModel>;
export type BaseTrackModel = Instance<BaseTrackStateModel>;

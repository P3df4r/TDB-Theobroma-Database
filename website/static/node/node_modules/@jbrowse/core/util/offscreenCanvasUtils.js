"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderToAbstractCanvas = void 0;
const react_1 = __importDefault(require("react"));
const canvas_sequencer_1 = require("canvas-sequencer");
// locals
const offscreenCanvasPonyfill_1 = require("./offscreenCanvasPonyfill");
const index_1 = require("./index");
async function renderToAbstractCanvas(width, height, opts, cb) {
    const { exportSVG, highResolutionScaling: scaling = 1 } = opts;
    if (exportSVG) {
        if (!exportSVG.rasterizeLayers) {
            const fakeCtx = new canvas_sequencer_1.CanvasSequence();
            const result = await cb(fakeCtx);
            return {
                ...result,
                canvasRecordedData: fakeCtx.toJSON(),
            };
        }
        else {
            const scale = 4;
            const canvas = (0, offscreenCanvasPonyfill_1.createCanvas)(Math.ceil(width * scale), height * scale);
            const ctx = canvas.getContext('2d');
            if (!ctx) {
                throw new Error('2d canvas rendering not supported on this platform');
            }
            ctx.scale(scale, scale);
            const result = await cb(ctx);
            // two methods needed for converting canvas to PNG, one for webworker
            // offscreen canvas, one for main thread
            return {
                ...result,
                reactElement: (react_1.default.createElement("image", { width: width, height: height, xlinkHref: 'convertToBlob' in canvas
                        ? await (0, index_1.blobToDataURL)(await canvas.convertToBlob({
                            type: 'image/png',
                        }))
                        : canvas.toDataURL() })),
            };
        }
    }
    else {
        const canvas = (0, offscreenCanvasPonyfill_1.createCanvas)(Math.ceil(width * scaling), height * scaling);
        const ctx = canvas.getContext('2d');
        if (!ctx) {
            throw new Error('2d canvas rendering not supported on this platform');
        }
        ctx.scale(scaling, scaling);
        const result = await cb(ctx);
        return { ...result, imageData: await (0, offscreenCanvasPonyfill_1.createImageBitmap)(canvas) };
    }
}
exports.renderToAbstractCanvas = renderToAbstractCanvas;

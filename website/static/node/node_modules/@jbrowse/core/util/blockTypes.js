"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterRegionPaddingBlock = exports.ElidedBlock = exports.ContentBlock = exports.BaseBlock = exports.BlockSet = void 0;
class BlockSet {
    constructor(blocks = []) {
        this.blocks = blocks;
    }
    push(block) {
        if (block instanceof ElidedBlock) {
            if (this.blocks.length) {
                const lastBlock = this.blocks[this.blocks.length - 1];
                if (lastBlock instanceof ElidedBlock) {
                    lastBlock.push(block);
                    return;
                }
            }
        }
        this.blocks.push(block);
    }
    getBlocks() {
        return this.blocks;
    }
    getRegions() {
        return this.blocks.map(block => block.toRegion());
    }
    map(func, thisarg) {
        return this.blocks.map(func, thisarg);
    }
    forEach(func, thisarg) {
        return this.blocks.forEach(func, thisarg);
    }
    get length() {
        return this.blocks.length;
    }
    get totalWidthPx() {
        return this.blocks.length
            ? this.blocks.map(blocks => blocks.widthPx).reduce((a, b) => a + b)
            : 0;
    }
    get totalWidthPxWithoutBorders() {
        return this.blocks.length
            ? this.blocks
                .filter(block => block.variant !== 'boundary')
                .map(blocks => blocks.widthPx)
                .reduce((a, b) => a + b)
            : 0;
    }
    get offsetPx() {
        return this.blocks.length ? this.blocks[0].offsetPx : 0;
    }
    get contentBlocks() {
        return this.blocks.filter(block => block instanceof ContentBlock);
    }
    get totalBp() {
        return this.contentBlocks
            .map(block => block.end - block.start)
            .reduce((a, b) => a + b, 0);
    }
}
exports.BlockSet = BlockSet;
class BaseBlock {
    /**
     * a block that should be shown as filled with data
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    constructor(data) {
        this.widthPx = 0;
        Object.assign(this, data);
        this.assemblyName = data.assemblyName;
        this.refName = data.refName;
        this.start = data.start;
        this.end = data.end;
        this.key = data.key;
        this.offsetPx = data.offsetPx;
    }
    /**
     * rename the reference sequence of this block and return a new one
     *
     * @param refName -
     * @returns either a new block with a renamed reference sequence,
     * or the same block, if the ref name is not actually different
     */
    renameReference(refName) {
        if (this.refName && refName !== this.refName) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return new this.constructor({ ...this, refName });
        }
        return this;
    }
    toRegion() {
        return {
            refName: this.refName,
            start: this.start,
            end: this.end,
            assemblyName: this.assemblyName,
            reversed: this.reversed,
        };
    }
}
exports.BaseBlock = BaseBlock;
class ContentBlock extends BaseBlock {
}
exports.ContentBlock = ContentBlock;
/**
 * marker block representing one or more blocks that are
 * too small to be shown at the current zoom level
 */
class ElidedBlock extends BaseBlock {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    constructor(data) {
        super(data);
        this.elidedBlockCount = 0;
        this.widthPx = data.widthPx;
    }
    push(otherBlock) {
        this.elidedBlockCount += 1;
        if (otherBlock) {
            this.refName = '';
            this.start = 0;
            this.end = 0;
            this.widthPx += otherBlock.widthPx;
        }
    }
}
exports.ElidedBlock = ElidedBlock;
/**
 * marker block that sits between two different displayed regions
 * and provides a thick border between them
 */
class InterRegionPaddingBlock extends BaseBlock {
}
exports.InterRegionPaddingBlock = InterRegionPaddingBlock;

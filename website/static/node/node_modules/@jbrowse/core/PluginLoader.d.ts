import { PluginConstructor } from './Plugin';
export interface UMDLocPluginDefinition {
    umdLoc: {
        uri: string;
        baseUri?: string;
    };
    name: string;
}
export interface UMDUrlPluginDefinition {
    umdUrl: string;
    name: string;
}
export interface LegacyUMDPluginDefinition {
    url: string;
    name: string;
}
type UMDPluginDefinition = UMDLocPluginDefinition | UMDUrlPluginDefinition;
export declare function isUMDPluginDefinition(def: PluginDefinition): def is UMDPluginDefinition | LegacyUMDPluginDefinition;
export interface ESMLocPluginDefinition {
    esmLoc: {
        uri: string;
        baseUri?: string;
    };
}
export interface ESMUrlPluginDefinition {
    esmUrl: string;
}
export type ESMPluginDefinition = ESMLocPluginDefinition | ESMUrlPluginDefinition;
export declare function isESMPluginDefinition(def: PluginDefinition): def is ESMPluginDefinition;
export interface CJSPluginDefinition {
    cjsUrl: string;
}
export declare function isCJSPluginDefinition(def: PluginDefinition): def is CJSPluginDefinition;
export interface PluginDefinition extends Partial<UMDUrlPluginDefinition>, Partial<UMDLocPluginDefinition>, Partial<LegacyUMDPluginDefinition>, Partial<ESMLocPluginDefinition>, Partial<ESMUrlPluginDefinition>, Partial<CJSPluginDefinition> {
}
export interface PluginRecord {
    plugin: PluginConstructor;
    definition: PluginDefinition;
}
export interface LoadedPlugin {
    default: PluginConstructor;
}
export declare function getWindowPath(windowHref: string): string;
export default class PluginLoader {
    definitions: PluginDefinition[];
    fetchESM?: (url: string) => Promise<unknown>;
    fetchCJS?: (url: string) => Promise<LoadedPlugin>;
    constructor(defs?: PluginDefinition[], args?: {
        fetchESM?: (url: string) => Promise<unknown>;
        fetchCJS?: (url: string) => Promise<LoadedPlugin>;
    });
    loadScript(scriptUrl: string): Promise<void>;
    loadCJSPlugin(def: CJSPluginDefinition, windowHref: string): Promise<LoadedPlugin>;
    loadESMPlugin(def: ESMPluginDefinition, windowHref: string): Promise<LoadedPlugin>;
    loadUMDPlugin(def: UMDPluginDefinition | LegacyUMDPluginDefinition, windowHref: string): Promise<{
        default: PluginConstructor;
    }>;
    loadPlugin(def: PluginDefinition, windowHref: string): Promise<PluginConstructor>;
    installGlobalReExports(target: WindowOrWorkerGlobalScope): void;
    load(windowHref?: string): Promise<{
        plugin: PluginConstructor;
        definition: PluginDefinition;
    }[]>;
}
export {};

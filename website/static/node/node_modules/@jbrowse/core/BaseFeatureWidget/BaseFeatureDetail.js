"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureDetails = exports.BaseAttributes = exports.Attributes = exports.UriLink = exports.BaseCoreDetails = exports.SimpleValue = exports.BasicValue = exports.FieldName = exports.BaseCard = exports.useStyles = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const react_1 = __importStar(require("react"));
const react_error_boundary_1 = require("react-error-boundary");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const ExpandMore_1 = __importDefault(require("@mui/icons-material/ExpandMore"));
const x_data_grid_1 = require("@mui/x-data-grid");
const mobx_react_1 = require("mobx-react");
const is_object_1 = __importDefault(require("is-object"));
// locals
const util_1 = require("../util");
const ui_1 = require("../ui");
const SequenceFeatureDetails_1 = __importDefault(require("./SequenceFeatureDetails"));
const util_2 = require("./util");
const MAX_FIELD_NAME_WIDTH = 170;
// these are always omitted as too detailed
const globalOmit = [
    '__jbrowsefmt',
    'length',
    'position',
    'subfeatures',
    'uniqueId',
    'exonFrames',
    'parentId',
    'thickStart',
    'thickEnd',
];
// coreDetails are omitted in some circumstances
const coreDetails = [
    'name',
    'start',
    'end',
    'strand',
    'refName',
    'description',
    'type',
];
exports.useStyles = (0, mui_1.makeStyles)()(theme => ({
    expansionPanelDetails: {
        display: 'block',
        padding: theme.spacing(1),
    },
    expandIcon: {
        color: '#FFFFFF',
    },
    field: {
        display: 'flex',
        flexWrap: 'wrap',
    },
    fieldDescription: {
        '&:hover': {
            background: 'yellow',
        },
    },
    fieldName: {
        wordBreak: 'break-all',
        minWidth: 90,
        borderBottom: '1px solid #0003',
        fontSize: 12,
        background: theme.palette.grey[200],
        marginRight: theme.spacing(1),
        padding: theme.spacing(0.5),
    },
    fieldValue: {
        wordBreak: 'break-word',
        maxHeight: 300,
        fontSize: 12,
        padding: theme.spacing(0.5),
        overflow: 'auto',
    },
    fieldSubvalue: {
        wordBreak: 'break-word',
        maxHeight: 300,
        padding: theme.spacing(0.5),
        background: theme.palette.grey[100],
        border: `1px solid ${theme.palette.grey[300]}`,
        boxSizing: 'border-box',
        overflow: 'auto',
    },
}));
function BaseCard({ children, title, defaultExpanded = true, }) {
    const { classes } = (0, exports.useStyles)();
    const [expanded, setExpanded] = (0, react_1.useState)(defaultExpanded);
    return (react_1.default.createElement(material_1.Accordion, { expanded: expanded, onChange: () => setExpanded(s => !s), TransitionProps: { unmountOnExit: true } },
        react_1.default.createElement(material_1.AccordionSummary, { expandIcon: react_1.default.createElement(ExpandMore_1.default, { className: classes.expandIcon }) },
            react_1.default.createElement(material_1.Typography, { variant: "button" },
                " ",
                title)),
        react_1.default.createElement(material_1.AccordionDetails, { className: classes.expansionPanelDetails }, children)));
}
exports.BaseCard = BaseCard;
const FieldName = ({ description, name, width, prefix = [], }) => {
    const { classes, cx } = (0, exports.useStyles)();
    const val = [...prefix, name].join('.');
    return description ? (react_1.default.createElement(material_1.Tooltip, { title: description, placement: "left" },
        react_1.default.createElement("div", { className: cx(classes.fieldDescription, classes.fieldName) }, val))) : (react_1.default.createElement("div", { className: classes.fieldName, style: { width: width } }, val));
};
exports.FieldName = FieldName;
const BasicValue = ({ value }) => {
    const { classes } = (0, exports.useStyles)();
    const isLink = `${value}`.match(/^https?:\/\//);
    return (react_1.default.createElement("div", { className: classes.fieldValue }, react_1.default.isValidElement(value) ? (value) : isLink ? (react_1.default.createElement(ui_1.SanitizedHTML, { html: `<a href="${value}">${value}</a>` })) : (react_1.default.createElement(ui_1.SanitizedHTML, { html: (0, is_object_1.default)(value) ? JSON.stringify(value) : String(value) }))));
};
exports.BasicValue = BasicValue;
const SimpleValue = ({ name, value, description, prefix, width, }) => {
    const { classes } = (0, exports.useStyles)();
    return value !== null && value !== undefined ? (react_1.default.createElement("div", { className: classes.field },
        react_1.default.createElement(exports.FieldName, { prefix: prefix, description: description, name: name, width: width }),
        react_1.default.createElement(exports.BasicValue, { value: value }))) : null;
};
exports.SimpleValue = SimpleValue;
const ArrayValue = ({ name, value, description, prefix = [], }) => {
    const { classes } = (0, exports.useStyles)();
    if (value.length === 1) {
        return (0, is_object_1.default)(value[0]) ? (react_1.default.createElement(Attributes, { attributes: value[0], prefix: [...prefix, name] })) : (react_1.default.createElement("div", { className: classes.field },
            react_1.default.createElement(exports.FieldName, { prefix: prefix, description: description, name: name }),
            react_1.default.createElement(exports.BasicValue, { value: value[0] })));
    }
    else if (value.every(val => (0, is_object_1.default)(val))) {
        return (react_1.default.createElement(react_1.default.Fragment, null, value.map((val, i) => (react_1.default.createElement(Attributes, { key: JSON.stringify(val) + '-' + i, attributes: val, prefix: [...prefix, name + '-' + i] })))));
    }
    else {
        return (react_1.default.createElement("div", { className: classes.field },
            react_1.default.createElement(exports.FieldName, { prefix: prefix, description: description, name: name }),
            value.map((val, i) => (react_1.default.createElement("div", { key: JSON.stringify(val) + '-' + i, className: classes.fieldSubvalue },
                react_1.default.createElement(exports.BasicValue, { value: val }))))));
    }
};
const toLocale = (n) => n.toLocaleString('en-US');
function Position(props) {
    const { feature } = props;
    const strand = feature.strand;
    const strandMap = {
        '-1': '-',
        '0': '',
        '1': '+',
    };
    const str = strandMap[strand] ? `(${strandMap[strand]})` : '';
    // @ts-ignore
    const loc = (0, util_1.assembleLocString)(feature);
    return react_1.default.createElement(react_1.default.Fragment, null, `${loc} ${str}`);
}
function CoreDetails(props) {
    const { feature } = props;
    const obj = feature;
    // eslint-disable-next-line no-underscore-dangle
    const formattedFeat = { ...obj, ...obj.__jbrowsefmt };
    const { start, end } = formattedFeat;
    const displayedDetails = {
        ...formattedFeat,
        length: toLocale(end - start),
    };
    const coreRenderedDetails = {
        description: 'Description',
        name: 'Name',
        length: 'Length',
        type: 'Type',
    };
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(exports.SimpleValue, { name: "Position", value: react_1.default.createElement(Position, { ...props, feature: formattedFeat }) }),
        Object.entries(coreRenderedDetails)
            .map(([key, name]) => [name, displayedDetails[key]])
            .filter(([, value]) => value != null)
            .map(([name, value]) => (react_1.default.createElement(exports.SimpleValue, { key: name, name: name, value: value })))));
}
const BaseCoreDetails = (props) => {
    return (react_1.default.createElement(BaseCard, { ...props, title: "Primary data" },
        react_1.default.createElement(CoreDetails, { ...props })));
};
exports.BaseCoreDetails = BaseCoreDetails;
function UriLink({ value, }) {
    const href = (0, util_1.getUriLink)(value);
    return react_1.default.createElement(ui_1.SanitizedHTML, { html: `<a href="${href}">${href}</a>` });
}
exports.UriLink = UriLink;
const DataGridDetails = ({ value, prefix, name, }) => {
    const keys = Object.keys(value[0]).sort();
    const unionKeys = new Set(keys);
    value.forEach((val) => Object.keys(val).forEach(k => unionKeys.add(k)));
    if (unionKeys.size < keys.length + 5) {
        // avoids key 'id' from being used in row data
        const rows = Object.entries(value).map(([k, val]) => {
            const { id, ...rest } = val;
            return {
                id: k,
                identifier: id,
                ...rest,
            };
        });
        // avoids key 'id' from being used in column names, and tries
        // to make it at the start of the colNames array
        let colNames;
        if (unionKeys.has('id')) {
            unionKeys.delete('id');
            colNames = ['identifier', ...unionKeys];
        }
        else {
            colNames = [...unionKeys];
        }
        const columns = colNames.map(val => ({
            field: val,
            renderCell: (params) => {
                const { value } = params;
                return (0, util_1.isUriLocation)(value) ? react_1.default.createElement(UriLink, { value: value }) : (0, util_1.getStr)(value);
            },
            width: (0, util_1.measureGridWidth)(rows.map(r => r[val])),
        }));
        const rowHeight = 25;
        const hideFoot = rows.length < 100;
        const headHeight = 80;
        const height = Math.min(rows.length, 100) * rowHeight + headHeight + (hideFoot ? 0 : 50);
        // disableSelection on click helps avoid
        // https://github.com/mui-org/material-ui-x/issues/1197
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(exports.FieldName, { prefix: prefix, name: name }),
            react_1.default.createElement("div", { style: {
                    height,
                    width: '100%',
                } },
                react_1.default.createElement(x_data_grid_1.DataGrid, { disableSelectionOnClick: true, rowHeight: rowHeight, rows: rows, hideFooterSelectedRowCount: true, columns: columns, hideFooter: hideFoot }))));
    }
    return null;
};
// pick using a path from an object, similar to _.get from lodash with special logic
// for Descriptions from e.g. VCF headers
// @param arr  example ['a','b'], obj = {a:{b:'hello}}
// @returns hello (with special addition to grab description also)
function accessNested(arr, obj = {}) {
    arr.forEach(elt => {
        if (obj) {
            obj = obj[elt];
        }
    });
    return typeof obj === 'string'
        ? obj
        : typeof (obj === null || obj === void 0 ? void 0 : obj.Description) === 'string'
            ? obj.Description
            : undefined;
}
function generateMaxWidth(array, prefix) {
    const arr = [];
    array.forEach(key => {
        const val = [...prefix, key[0]].join('.');
        arr.push((0, util_1.measureText)(val, 12));
    });
    return Math.ceil(Math.max(...arr)) + 10;
}
function UriAttribute({ value, prefix, name, }) {
    const { classes } = (0, exports.useStyles)();
    const { uri, baseUri = '' } = value;
    let href;
    try {
        href = new URL(uri, baseUri).href;
    }
    catch (e) {
        href = uri;
    }
    return (react_1.default.createElement("div", { className: classes.field },
        react_1.default.createElement(exports.FieldName, { prefix: prefix, name: name }),
        react_1.default.createElement(exports.BasicValue, { value: href })));
}
function Attributes(props) {
    const { attributes, omit = [], omitSingleLevel = [], descriptions, formatter = val => val, hideUris, prefix = [], } = props;
    const omits = [...omit, ...globalOmit, ...omitSingleLevel];
    const { __jbrowsefmt, ...rest } = attributes;
    const formattedAttributes = { ...rest, ...__jbrowsefmt };
    const maxLabelWidth = generateMaxWidth(Object.entries(formattedAttributes).filter(([k, v]) => v !== undefined && !omits.includes(k)), prefix);
    return (react_1.default.createElement(react_1.default.Fragment, null, Object.entries(formattedAttributes)
        .filter(([k, v]) => v !== undefined && !omits.includes(k))
        .map(([key, value]) => {
        const description = accessNested([...prefix, key], descriptions);
        if (Array.isArray(value)) {
            // check if it looks like an array of objects, which could be used
            // in data grid
            return value.length > 1 && value.every(val => (0, is_object_1.default)(val)) ? (react_1.default.createElement(DataGridDetails, { key: key, name: key, prefix: prefix, value: value })) : (react_1.default.createElement(ArrayValue, { key: key, name: key, value: value, description: description, prefix: prefix }));
        }
        else if ((0, is_object_1.default)(value)) {
            const { omitSingleLevel, ...rest } = props;
            return (0, util_1.isUriLocation)(value) ? (hideUris ? null : (react_1.default.createElement(UriAttribute, { key: key, name: key, prefix: prefix, value: value }))) : (react_1.default.createElement(Attributes, { ...rest, key: key, attributes: value, descriptions: descriptions, prefix: [...prefix, key] }));
        }
        else {
            return (react_1.default.createElement(exports.SimpleValue, { key: key, name: key, value: formatter(value, key), description: description, prefix: prefix, width: Math.min(maxLabelWidth, MAX_FIELD_NAME_WIDTH) }));
        }
    })));
}
exports.Attributes = Attributes;
const BaseAttributes = (props) => {
    const { feature } = props;
    return (react_1.default.createElement(BaseCard, { ...props, title: "Attributes" },
        react_1.default.createElement(Attributes, { ...props, attributes: feature })));
};
exports.BaseAttributes = BaseAttributes;
function isEmpty(obj) {
    return Object.keys(obj).length === 0;
}
function generateTitle(name, id, type) {
    return [(0, util_2.ellipses)(`${name}` || `${id}`), `${type}`]
        .filter(f => !!f)
        .join(' - ');
}
const FeatureDetails = (props) => {
    const { omit = [], model, feature, depth = 0 } = props;
    const { name = '', id = '', type = '', subfeatures } = feature;
    const pm = (0, util_1.getEnv)(model).pluginManager;
    const session = (0, util_1.getSession)(model);
    const ExtraPanel = pm.evaluateExtensionPoint('Core-extraFeaturePanel', null, {
        session,
        feature,
        model,
    });
    return (react_1.default.createElement(BaseCard, { title: generateTitle(name, id, type) },
        react_1.default.createElement(material_1.Typography, null, "Core details"),
        react_1.default.createElement(CoreDetails, { ...props }),
        feature.mate ? (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(material_1.Divider, null),
            react_1.default.createElement(material_1.Typography, null, "Mate details"),
            react_1.default.createElement(CoreDetails, { ...props, feature: feature.mate }))) : null,
        react_1.default.createElement(material_1.Divider, null),
        react_1.default.createElement(material_1.Typography, null, "Attributes"),
        react_1.default.createElement(Attributes, { attributes: feature, ...props, omit: omit, omitSingleLevel: coreDetails }),
        react_1.default.createElement(react_error_boundary_1.ErrorBoundary, { FallbackComponent: ({ error }) => react_1.default.createElement(ui_1.ErrorMessage, { error: error }) },
            react_1.default.createElement(SequenceFeatureDetails_1.default, { ...props })),
        ExtraPanel ? (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(material_1.Divider, null),
            react_1.default.createElement(BaseCard, { title: ExtraPanel.name },
                react_1.default.createElement(ExtraPanel.Component, { ...props })))) : null,
        (subfeatures === null || subfeatures === void 0 ? void 0 : subfeatures.length) ? (react_1.default.createElement(BaseCard, { title: "Subfeatures", defaultExpanded: depth < 1 }, subfeatures.map(sub => (react_1.default.createElement(exports.FeatureDetails, { key: JSON.stringify(sub), feature: sub, model: model, depth: depth + 1 }))))) : null));
};
exports.FeatureDetails = FeatureDetails;
const BaseFeatureDetails = (0, mobx_react_1.observer)(({ model }) => {
    const { featureData } = model;
    if (!featureData) {
        return null;
    }
    // replacing undefined with null helps with allowing fields to be hidden,
    // setting null is not allowed by jexl so we set it to undefined to hide. see
    // config guide. this replacement happens both here and when snapshotting the
    // featureData
    const feature = JSON.parse(JSON.stringify(featureData, (_, v) => typeof v === 'undefined' ? null : v));
    return isEmpty(feature) ? null : (react_1.default.createElement(exports.FeatureDetails, { model: model, feature: feature }));
});
exports.default = BaseFeatureDetails;

import React from 'react';
import { IAnyStateTreeNode } from 'mobx-state-tree';
import { BaseCardProps, BaseProps } from './types';
import { SimpleFeatureSerializedNoId } from '../util/simpleFeature';
export declare const useStyles: (params: void, styleOverrides?: {
    props: {
        classes?: Record<string, string> | undefined;
    } & Record<string, unknown>;
    ownerState?: Record<string, unknown> | undefined;
} | undefined) => {
    classes: Record<"expansionPanelDetails" | "expandIcon" | "field" | "fieldDescription" | "fieldName" | "fieldValue" | "fieldSubvalue", string>;
    theme: import("@mui/material").Theme;
    css: import("tss-react").Css;
    cx: import("tss-react").Cx;
};
export declare function BaseCard({ children, title, defaultExpanded, }: BaseCardProps): JSX.Element;
export declare const FieldName: ({ description, name, width, prefix, }: {
    description?: React.ReactNode;
    name: string;
    prefix?: string[] | undefined;
    width?: number | undefined;
}) => JSX.Element;
export declare const BasicValue: ({ value }: {
    value: string | React.ReactNode;
}) => JSX.Element;
export declare const SimpleValue: ({ name, value, description, prefix, width, }: {
    description?: React.ReactNode;
    name: string;
    value: any;
    prefix?: string[] | undefined;
    width?: number | undefined;
}) => JSX.Element | null;
export declare const BaseCoreDetails: (props: BaseProps) => JSX.Element;
interface AttributeProps {
    attributes: Record<string, any>;
    omit?: string[];
    omitSingleLevel?: string[];
    formatter?: (val: unknown, key: string) => React.ReactNode;
    descriptions?: Record<string, React.ReactNode>;
    prefix?: string[];
    hideUris?: boolean;
}
export declare function UriLink({ value, }: {
    value: {
        uri: string;
        baseUri?: string;
    };
}): JSX.Element;
export declare function Attributes(props: AttributeProps): JSX.Element;
export declare const BaseAttributes: (props: BaseProps) => JSX.Element;
export interface BaseInputProps extends BaseCardProps {
    omit?: string[];
    model: any;
    descriptions?: Record<string, React.ReactNode>;
    formatter?: (val: unknown, key: string) => React.ReactNode;
}
export declare const FeatureDetails: (props: {
    model: IAnyStateTreeNode;
    feature: SimpleFeatureSerializedNoId;
    depth?: number | undefined;
    omit?: string[] | undefined;
    formatter?: ((val: unknown, key: string) => React.ReactNode) | undefined;
}) => JSX.Element;
declare const BaseFeatureDetails: ({ model }: BaseInputProps) => JSX.Element | null;
export default BaseFeatureDetails;

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Genomic = exports.GenecDNA = exports.GeneProtein = exports.GeneCDS = void 0;
const react_1 = __importDefault(require("react"));
const util_1 = require("./util");
// note that these are currently put into the style section instead of being
// defined in classes to aid copy and paste to an external document e.g. word
const proteinColor = 'rgb(220,160,220)';
const intronColor = undefined;
const cdsColor = 'rgb(220,220,180)';
const updownstreamColor = 'rgba(250,200,200)';
const utrColor = 'rgb(200,240,240)';
const genomeColor = 'rgb(200,280,200)';
function GeneCDS({ cds, sequence }) {
    return react_1.default.createElement("span", { style: { background: cdsColor } }, (0, util_1.stitch)(cds, sequence));
}
exports.GeneCDS = GeneCDS;
function GeneProtein({ cds, sequence, codonTable, }) {
    const str = (0, util_1.stitch)(cds, sequence);
    let protein = '';
    for (let i = 0; i < str.length; i += 3) {
        // use & symbol for undefined codon, or partial slice
        protein += codonTable[str.slice(i, i + 3)] || '&';
    }
    return react_1.default.createElement("span", { style: { background: proteinColor } }, protein);
}
exports.GeneProtein = GeneProtein;
function GenecDNA({ utr, cds, exons, sequence, upstream, downstream, includeIntrons, collapseIntron, intronBp, }) {
    const chunks = (cds.length ? [...cds, ...utr].sort((a, b) => a.start - b.start) : exons).filter(f => f.start !== f.end);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        upstream ? (react_1.default.createElement("span", { style: { background: updownstreamColor } }, upstream)) : null,
        chunks.map((chunk, idx) => {
            var _a;
            const intron = sequence.slice(chunk.end, (_a = chunks[idx + 1]) === null || _a === void 0 ? void 0 : _a.start);
            return (react_1.default.createElement(react_1.default.Fragment, { key: JSON.stringify(chunk) },
                react_1.default.createElement("span", { style: {
                        background: chunk.type === 'CDS' ? cdsColor : utrColor,
                    } }, sequence.slice(chunk.start, chunk.end)),
                includeIntrons && idx < chunks.length - 1 ? (react_1.default.createElement("span", { style: { background: intronColor } }, collapseIntron && intron.length > intronBp * 2
                    ? `${intron.slice(0, intronBp)}...${intron.slice(-intronBp)}`
                    : intron)) : null));
        }),
        downstream ? (react_1.default.createElement("span", { style: { background: updownstreamColor } }, downstream)) : null));
}
exports.GenecDNA = GenecDNA;
function Genomic({ sequence, upstream, downstream, }) {
    return (react_1.default.createElement(react_1.default.Fragment, null,
        upstream ? (react_1.default.createElement("span", { style: { background: updownstreamColor } }, upstream)) : null,
        react_1.default.createElement("span", { style: {
                background: genomeColor,
            } }, sequence),
        downstream ? (react_1.default.createElement("span", { style: { background: updownstreamColor } }, downstream)) : null));
}
exports.Genomic = Genomic;

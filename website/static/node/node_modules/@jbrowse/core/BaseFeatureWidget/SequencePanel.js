"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const util_1 = require("../util");
const util_2 = require("./util");
const SequenceBox_1 = require("./SequenceBox");
const SequencePanel = react_1.default.forwardRef((props, ref) => {
    const { feature, mode, intronBp = 10 } = props;
    let { sequence: { seq, upstream = '', downstream = '' }, } = props;
    const { subfeatures = [] } = feature;
    const children = subfeatures
        .sort((a, b) => a.start - b.start)
        .map(sub => ({
        ...sub,
        start: sub.start - feature.start,
        end: sub.end - feature.start,
    }));
    // we filter duplicate entries in cds and exon lists duplicate entries may be
    // rare but was seen in Gencode v36 track NCList, likely a bug on GFF3 or
    // probably worth ignoring here (produces broken protein translations if
    // included)
    //
    // position 1:224,800,006..225,203,064 gene ENSG00000185842.15 first
    // transcript ENST00000445597.6
    //
    // http://localhost:3000/?config=test_data%2Fconfig.json&session=share-FUl7G1isvF&password=HXh5Y
    let cds = (0, util_2.dedupe)(children.filter(sub => sub.type === 'CDS'));
    let utr = (0, util_2.dedupe)(children.filter(sub => sub.type.match(/utr/i)));
    let exons = (0, util_2.dedupe)(children.filter(sub => sub.type === 'exon'));
    if (!utr.length && cds.length && exons.length) {
        utr = (0, util_2.calculateUTRs)(cds, exons);
    }
    if (!utr.length && cds.length && !exons.length) {
        utr = (0, util_2.calculateUTRs2)(cds, {
            start: 0,
            end: feature.end - feature.start,
            type: 'gene',
        });
    }
    if (feature.strand === -1) {
        // doing this in a single assignment is needed because downstream and
        // upstream are swapped so this avoids a temp variable
        ;
        [seq, upstream, downstream] = [
            (0, util_1.revcom)(seq),
            (0, util_1.revcom)(downstream),
            (0, util_1.revcom)(upstream),
        ];
        cds = (0, util_2.revlist)(cds, seq.length);
        exons = (0, util_2.revlist)(exons, seq.length);
        utr = (0, util_2.revlist)(utr, seq.length);
    }
    const codonTable = (0, util_1.generateCodonTable)(util_1.defaultCodonTable);
    return (react_1.default.createElement("div", { ref: ref, "data-testid": "sequence_panel" },
        react_1.default.createElement("div", { style: {
                fontFamily: 'monospace',
                wordWrap: 'break-word',
                overflow: 'auto',
                fontSize: 12,
                maxWidth: 600,
                maxHeight: 500,
            } },
            `>${feature.name ||
                feature.id ||
                feature.refName + ':' + (feature.start + 1) + '-' + feature.end}-${mode}\n`,
            react_1.default.createElement("br", null),
            mode === 'genomic' ? (react_1.default.createElement(SequenceBox_1.Genomic, { sequence: seq })) : mode === 'genomic_sequence_updown' ? (react_1.default.createElement(SequenceBox_1.Genomic, { sequence: seq, upstream: upstream, downstream: downstream })) : mode === 'cds' ? (react_1.default.createElement(SequenceBox_1.GeneCDS, { cds: cds, sequence: seq })) : mode === 'cdna' ? (react_1.default.createElement(SequenceBox_1.GenecDNA, { exons: exons, cds: cds, utr: utr, sequence: seq, intronBp: intronBp })) : mode === 'protein' ? (react_1.default.createElement(SequenceBox_1.GeneProtein, { cds: cds, codonTable: codonTable, sequence: seq })) : mode === 'gene' ? (react_1.default.createElement(SequenceBox_1.GenecDNA, { exons: exons, cds: cds, utr: utr, sequence: seq, includeIntrons: true, intronBp: intronBp })) : mode === 'gene_collapsed_intron' ? (react_1.default.createElement(SequenceBox_1.GenecDNA, { exons: exons, cds: cds, sequence: seq, utr: utr, includeIntrons: true, collapseIntron: true, intronBp: intronBp })) : mode === 'gene_updownstream' ? (react_1.default.createElement(SequenceBox_1.GenecDNA, { exons: exons, cds: cds, sequence: seq, utr: utr, upstream: upstream, downstream: downstream, includeIntrons: true, intronBp: intronBp })) : mode === 'gene_updownstream_collapsed_intron' ? (react_1.default.createElement(SequenceBox_1.GenecDNA, { exons: exons, cds: cds, sequence: seq, utr: utr, upstream: upstream, downstream: downstream, includeIntrons: true, collapseIntron: true, intronBp: intronBp })) : (react_1.default.createElement("div", null, "Unknown type")))));
});
exports.default = SequencePanel;

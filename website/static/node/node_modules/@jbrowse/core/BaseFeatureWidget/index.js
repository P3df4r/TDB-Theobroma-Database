"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stateModelFactory = exports.configSchema = void 0;
const mobx_state_tree_1 = require("mobx-state-tree");
const mobx_1 = require("mobx");
const clone_1 = __importDefault(require("clone"));
const configuration_1 = require("../configuration");
const util_1 = require("../util");
const mst_1 = require("../util/types/mst");
const configSchema = (0, configuration_1.ConfigurationSchema)('BaseFeatureWidget', {});
exports.configSchema = configSchema;
function formatSubfeatures(obj, depth, parse, currentDepth = 0, returnObj = {}) {
    var _a;
    if (depth <= currentDepth) {
        return returnObj;
    }
    returnObj.subfeatures = (_a = obj.subfeatures) === null || _a === void 0 ? void 0 : _a.map(sub => {
        formatSubfeatures(sub, depth, parse, currentDepth + 1, returnObj);
        return parse(sub);
    });
    return returnObj;
}
function stateModelFactory(pluginManager) {
    return mobx_state_tree_1.types
        .model('BaseFeatureWidget', {
        id: mst_1.ElementId,
        type: mobx_state_tree_1.types.literal('BaseFeatureWidget'),
        featureData: mobx_state_tree_1.types.frozen(),
        formattedFields: mobx_state_tree_1.types.frozen(),
        unformattedFeatureData: mobx_state_tree_1.types.frozen(),
        view: mobx_state_tree_1.types.safeReference(pluginManager.pluggableMstType('view', 'stateModel')),
        track: mobx_state_tree_1.types.safeReference(pluginManager.pluggableMstType('track', 'stateModel')),
        trackId: mobx_state_tree_1.types.maybe(mobx_state_tree_1.types.string),
        trackType: mobx_state_tree_1.types.maybe(mobx_state_tree_1.types.string),
    })
        .actions(self => ({
        setFeatureData(featureData) {
            self.unformattedFeatureData = featureData;
        },
        clearFeatureData() {
            self.featureData = undefined;
        },
        setFormattedData(feat) {
            self.featureData = feat;
        },
        setExtra(type, trackId) {
            self.trackId = trackId;
            self.trackType = type;
        },
    }))
        .actions(self => ({
        afterCreate() {
            (0, mobx_state_tree_1.addDisposer)(self, (0, mobx_1.autorun)(() => {
                var _a, _b;
                self.setExtra((_a = self.track) === null || _a === void 0 ? void 0 : _a.type, (_b = self.track) === null || _b === void 0 ? void 0 : _b.configuration.trackId);
                const { unformattedFeatureData, track } = self;
                const session = (0, util_1.getSession)(self);
                if (unformattedFeatureData) {
                    const feature = (0, clone_1.default)(unformattedFeatureData);
                    const f = (obj, arg2) => (0, configuration_1.getConf)(obj, ['formatDetails', arg2], { feature });
                    if (track) {
                        // eslint-disable-next-line no-underscore-dangle
                        feature.__jbrowsefmt = {
                            ...f(session, 'feature'),
                            ...f(track, 'feature'),
                        };
                        const depth = (0, configuration_1.getConf)(track, ['formatDetails', 'depth']);
                        formatSubfeatures(feature, depth, sub => {
                            // eslint-disable-next-line no-underscore-dangle
                            sub.__jbrowsefmt = {
                                ...f(session, 'subfeature'),
                                ...f(track, 'subfeature'),
                            };
                        });
                    }
                    self.setFormattedData(feature);
                }
            }));
        },
    }))
        .preProcessSnapshot(snap => {
        // @ts-ignore
        const { featureData, finalizedFeatureData, ...rest } = snap;
        return {
            unformattedFeatureData: featureData,
            featureData: finalizedFeatureData,
            ...rest,
        };
    })
        .postProcessSnapshot(snap => {
        // xref https://github.com/mobxjs/mobx-state-tree/issues/1524 for Omit
        const { unformattedFeatureData, featureData, ...rest } = snap;
        // finalizedFeatureData avoids running formatter twice if loading from
        // snapshot
        return {
            // replacing undefined with null helps with allowing fields to be
            // hidden, setting null is not allowed by jexl so we set it to
            // undefined to hide. see config guide. this replacement happens both
            // here and when displaying the featureData in base feature widget
            finalizedFeatureData: JSON.parse(JSON.stringify(featureData, (_, v) => typeof v === 'undefined' ? null : v)),
            ...rest,
        };
    });
}
exports.default = stateModelFactory;
exports.stateModelFactory = stateModelFactory;

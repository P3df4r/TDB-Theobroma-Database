import { lazy } from 'react';
import { when } from 'mobx';
import { isAbstractMenuManager } from '@jbrowse/core/util';
import Plugin from '@jbrowse/core/Plugin';
import ViewType from '@jbrowse/core/pluggableElementTypes/ViewType';
import DataUsageIcon from '@mui/icons-material/DataUsage';
import stateModelFactory from './CircularView/models/CircularView';
export default class CircularViewPlugin extends Plugin {
    constructor() {
        super(...arguments);
        this.name = 'CircularViewPlugin';
    }
    install(pluginManager) {
        pluginManager.addViewType(() => new ViewType({
            ReactComponent: lazy(() => import('./CircularView/components/CircularView')),
            stateModel: stateModelFactory(pluginManager),
            name: 'CircularView',
        }));
        pluginManager.addToExtensionPoint('LaunchView-CircularView', 
        // @ts-ignore
        async ({ session, assembly, loc, tracks = [], }) => {
            const { assemblyManager } = session;
            const view = session.addView('CircularView', {});
            await when(() => view.initialized);
            if (!assembly) {
                throw new Error('No assembly provided when launching circular genome view');
            }
            const asm = await assemblyManager.waitForAssembly(assembly);
            if (!asm) {
                throw new Error(`Assembly "${assembly}" not found when launching circular genome view`);
            }
            view.setDisplayedRegions(asm.regions || []);
            tracks.forEach(track => view.showTrack(track));
        });
    }
    configure(pluginManager) {
        if (isAbstractMenuManager(pluginManager.rootModel)) {
            pluginManager.rootModel.appendToSubMenu(['Add'], {
                label: 'Circular view',
                icon: DataUsageIcon,
                onClick: (session) => {
                    session.addView('CircularView', {});
                },
            });
        }
    }
}
export { BaseChordDisplayModel, baseChordDisplayConfig, BaseChordDisplayComponent, } from './BaseChordDisplay';
//# sourceMappingURL=index.js.map
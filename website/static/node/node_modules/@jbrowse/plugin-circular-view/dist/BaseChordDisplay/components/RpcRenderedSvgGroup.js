"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_state_tree_1 = require("mobx-state-tree");
const mobx_react_1 = require("mobx-react");
const react_dom_1 = require("react-dom");
const util_1 = require("@jbrowse/core/util");
function RpcRenderedSvgGroup({ model, }) {
    const { data, html, filled, renderingComponent } = model;
    const ssrContainerNode = (0, react_1.useRef)(null);
    (0, react_1.useEffect)(() => {
        const domNode = ssrContainerNode.current;
        function doHydrate() {
            if (domNode && filled) {
                if (domNode.innerHTML) {
                    domNode.style.display = 'none';
                    (0, react_dom_1.unmountComponentAtNode)(domNode);
                }
                // setting outline:none fixes react "focusable" element issue. see
                // https://github.com/GMOD/jbrowse-components/issues/2160
                domNode.style.outline = 'none';
                domNode.innerHTML = html;
                // use requestIdleCallback to defer main-thread rendering
                // and hydration for when we have some free time. helps
                // keep the framerate up.
                (0, util_1.rIC)(() => {
                    if (!(0, mobx_state_tree_1.isAlive)(model)) {
                        return;
                    }
                    const mainThreadRendering = react_1.default.createElement(renderingComponent, { ...data, ...model.renderProps() }, null);
                    (0, util_1.rIC)(() => {
                        if (!(0, mobx_state_tree_1.isAlive)(model)) {
                            return;
                        }
                        (0, react_dom_1.hydrate)(mainThreadRendering, domNode);
                    });
                });
            }
        }
        doHydrate();
        return () => {
            if (domNode) {
                (0, react_dom_1.unmountComponentAtNode)(domNode);
            }
        };
    });
    return react_1.default.createElement("g", { ref: ssrContainerNode });
}
exports.default = (0, mobx_react_1.observer)(RpcRenderedSvgGroup);
//# sourceMappingURL=RpcRenderedSvgGroup.js.map
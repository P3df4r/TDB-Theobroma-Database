"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const mobx_react_1 = require("mobx-react");
const ui_1 = require("@jbrowse/core/ui");
const util_1 = require("@jbrowse/core/util");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const colors_1 = require("@mui/material/colors");
// icons
const ZoomOut_1 = __importDefault(require("@mui/icons-material/ZoomOut"));
const ZoomIn_1 = __importDefault(require("@mui/icons-material/ZoomIn"));
const RotateLeft_1 = __importDefault(require("@mui/icons-material/RotateLeft"));
const RotateRight_1 = __importDefault(require("@mui/icons-material/RotateRight"));
const LockOpen_1 = __importDefault(require("@mui/icons-material/LockOpen"));
const Lock_1 = __importDefault(require("@mui/icons-material/Lock"));
const Icons_1 = require("@jbrowse/core/ui/Icons");
// locals
const Ruler_1 = __importDefault(require("./Ruler"));
const ImportForm_1 = __importDefault(require("./ImportForm"));
const dragHandleHeight = 3;
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    root: {
        position: 'relative',
        marginBottom: theme.spacing(1),
        overflow: 'hidden',
        background: 'white',
    },
    scroller: {
        overflow: 'auto',
    },
    sliceRoot: {
        background: 'none',
        // background: theme.palette.background.paper,
        boxSizing: 'content-box',
        display: 'block',
    },
    iconButton: {
        padding: '4px',
        margin: '0 2px 0 2px',
    },
    controls: {
        overflow: 'hidden',
        whiteSpace: 'nowrap',
        position: 'absolute',
        background: colors_1.grey[200],
        boxSizing: 'border-box',
        borderRight: '1px solid #a2a2a2',
        borderBottom: '1px solid #a2a2a2',
        left: 0,
        top: 0,
    },
    importFormContainer: {
        marginBottom: theme.spacing(4),
    },
}));
const Slices = (0, mobx_react_1.observer)(({ model }) => {
    return (react_1.default.createElement(react_1.default.Fragment, null,
        model.staticSlices.map(slice => (react_1.default.createElement(Ruler_1.default, { key: (0, util_1.assembleLocString)(
            // @ts-ignore
            slice.region.elided ? slice.region.regions[0] : slice.region), model: model, slice: slice }))),
        model.tracks.map(track => {
            const display = track.displays[0];
            return (react_1.default.createElement(display.RenderingComponent, { key: display.id, display: display, view: model }));
        })));
});
const Controls = (0, mobx_react_1.observer)(({ model, showingFigure, }) => {
    const { classes } = useStyles();
    return (react_1.default.createElement("div", { className: classes.controls },
        react_1.default.createElement(material_1.IconButton, { onClick: model.zoomOutButton, className: classes.iconButton, title: model.lockedFitToWindow ? 'unlock to zoom out' : 'zoom out', disabled: !showingFigure || model.atMaxBpPerPx || model.lockedFitToWindow, color: "secondary" },
            react_1.default.createElement(ZoomOut_1.default, null)),
        react_1.default.createElement(material_1.IconButton, { onClick: model.zoomInButton, className: classes.iconButton, title: "zoom in", disabled: !showingFigure || model.atMinBpPerPx, color: "secondary" },
            react_1.default.createElement(ZoomIn_1.default, null)),
        react_1.default.createElement(material_1.IconButton, { onClick: model.rotateCounterClockwiseButton, className: classes.iconButton, title: "rotate counter-clockwise", disabled: !showingFigure, color: "secondary" },
            react_1.default.createElement(RotateLeft_1.default, null)),
        react_1.default.createElement(material_1.IconButton, { onClick: model.rotateClockwiseButton, className: classes.iconButton, title: "rotate clockwise", disabled: !showingFigure, color: "secondary" },
            react_1.default.createElement(RotateRight_1.default, null)),
        react_1.default.createElement(material_1.IconButton, { onClick: model.toggleFitToWindowLock, className: classes.iconButton, title: model.lockedFitToWindow
                ? 'locked model to window size'
                : 'unlocked model to zoom further', disabled: model.tooSmallToLock, color: "secondary" }, model.lockedFitToWindow ? react_1.default.createElement(Lock_1.default, null) : react_1.default.createElement(LockOpen_1.default, null)),
        model.hideTrackSelectorButton ? null : (react_1.default.createElement(material_1.IconButton, { onClick: model.activateTrackSelector, title: "Open track selector", "data-testid": "circular_track_select", color: "secondary" },
            react_1.default.createElement(Icons_1.TrackSelector, null)))));
});
const CircularView = (0, mobx_react_1.observer)(({ model }) => {
    const { classes } = useStyles();
    const initialized = !!model.displayedRegions.length &&
        !!model.figureWidth &&
        !!model.figureHeight;
    const showImportForm = !initialized && !model.disableImportForm;
    const showFigure = initialized && !showImportForm;
    return (react_1.default.createElement("div", { className: classes.root, style: {
            width: model.width,
            height: model.height,
        }, "data-testid": model.id }, model.error ? (react_1.default.createElement(ui_1.ErrorMessage, { error: model.error })) : (react_1.default.createElement(react_1.default.Fragment, null,
        showImportForm ? react_1.default.createElement(ImportForm_1.default, { model: model }) : null,
        react_1.default.createElement(react_1.default.Fragment, null,
            !showFigure ? null : (react_1.default.createElement("div", { className: classes.scroller, style: {
                    width: model.width,
                    height: model.height,
                } },
                react_1.default.createElement("div", { style: {
                        transform: [`rotate(${model.offsetRadians}rad)`].join(' '),
                        transition: 'transform 0.5s',
                        transformOrigin: model.centerXY
                            .map(x => `${x}px`)
                            .join(' '),
                    } },
                    react_1.default.createElement("svg", { style: {
                            position: 'absolute',
                            left: 0,
                            top: 0,
                        }, className: classes.sliceRoot, width: `${model.figureWidth}px`, height: `${model.figureHeight}px`, version: "1.1" },
                        react_1.default.createElement("g", { transform: `translate(${model.centerXY})` },
                            react_1.default.createElement(Slices, { model: model })))))),
            react_1.default.createElement(Controls, { model: model, showingFigure: showFigure }),
            model.hideVerticalResizeHandle ? null : (react_1.default.createElement(ui_1.ResizeHandle, { onDrag: model.resizeHeight, style: {
                    height: dragHandleHeight,
                    position: 'absolute',
                    bottom: 0,
                    left: 0,
                    background: '#ccc',
                    boxSizing: 'border-box',
                    borderTop: '1px solid #fafafa',
                } })))))));
});
exports.default = CircularView;
//# sourceMappingURL=CircularView.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const mobx_state_tree_1 = require("mobx-state-tree");
const util_1 = require("@jbrowse/core/util");
exports.default = (0, mobx_react_1.observer)(({ text, x, y, region, reversed, bpPerPx, exportSVG, feature, viewParams, color = 'black', fontHeight = 13, featureWidth = 0, allowedWidthExpansion = 0, displayModel = {}, }) => {
    const totalWidth = featureWidth + allowedWidthExpansion;
    const measuredTextWidth = (0, util_1.measureText)(text, fontHeight);
    const params = (0, mobx_state_tree_1.isStateTreeNode)(displayModel) && (0, mobx_state_tree_1.isAlive)(displayModel)
        ? (0, util_1.getViewParams)(displayModel)
        : viewParams;
    const viewLeft = reversed ? params.end : params.start;
    const [labelVisible, setLabelVisible] = (0, react_1.useState)(exportSVG);
    // we use an effect to set the label visible because there can be a
    // mismatch between the server and the client after hydration due to the
    // floating labels. if we are exporting an SVG we allow it as is though and
    // do not use the effetct
    (0, react_1.useEffect)(() => {
        setLabelVisible(true);
    }, []);
    if ((0, mobx_state_tree_1.isStateTreeNode)(region) && !(0, mobx_state_tree_1.isAlive)(region)) {
        return null;
    }
    const rstart = region.start;
    const rend = region.end;
    const fstart = feature.get('start');
    const fend = feature.get('end');
    const featureWidthBp = measuredTextWidth * bpPerPx;
    // this tricky bit of code helps smooth over block boundaries
    // not supported for reverse mode currently
    // reason: reverse mode allocates space for the label in the "normal
    // forward orientation" making it hard to slide. The reverse mode should
    // allocate the label space in the reverse orientation to slide it
    if (viewLeft < rend &&
        viewLeft > rstart &&
        fstart < viewLeft &&
        viewLeft + featureWidthBp < fend) {
        x = params.offsetPx;
    }
    else if (fstart < viewLeft &&
        viewLeft + featureWidthBp < fend &&
        viewLeft + featureWidthBp > rstart &&
        viewLeft + featureWidthBp < rend) {
        x = params.offsetPx1;
    }
    return labelVisible ? (react_1.default.createElement("text", { x: x, y: y + fontHeight, fill: color, fontSize: fontHeight }, measuredTextWidth > totalWidth
        ? `${text.slice(0, totalWidth / (fontHeight * 0.6))}...`
        : text)) : null;
});
//# sourceMappingURL=FeatureLabel.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const configuration_1 = require("@jbrowse/core/configuration");
const mobx_react_1 = require("mobx-react");
const util_1 = require("./util");
function Subfeatures(props) {
    var _a;
    const { feature, featureLayout, selected } = props;
    return (react_1.default.createElement(react_1.default.Fragment, null, (_a = feature.get('subfeatures')) === null || _a === void 0 ? void 0 : _a.map(subfeature => {
        const subfeatureId = String(subfeature.id());
        const subfeatureLayout = featureLayout.getSubRecord(subfeatureId);
        if (!subfeatureLayout) {
            return null;
        }
        const { GlyphComponent } = subfeatureLayout.data || {};
        return (react_1.default.createElement(GlyphComponent, { key: `glyph-${subfeatureId}`, ...props, feature: subfeature, featureLayout: subfeatureLayout, selected: selected }));
    })));
}
Subfeatures.layOut = ({ layout, feature, bpPerPx, reversed, config, extraGlyphs, }) => {
    var _a;
    const subLayout = (0, util_1.layOutFeature)({
        layout,
        feature,
        bpPerPx,
        reversed,
        config,
        extraGlyphs,
    });
    const displayMode = (0, configuration_1.readConfObject)(config, 'displayMode');
    if (displayMode !== 'reducedRepresentation') {
        let topOffset = 0;
        (_a = feature.get('subfeatures')) === null || _a === void 0 ? void 0 : _a.forEach(subfeature => {
            const SubfeatureGlyphComponent = (0, util_1.chooseGlyphComponent)(subfeature, extraGlyphs);
            const subfeatureHeight = (0, configuration_1.readConfObject)(config, 'height', {
                feature: subfeature,
            });
            const subSubLayout = (SubfeatureGlyphComponent.layOut || util_1.layOut)({
                layout: subLayout,
                feature: subfeature,
                bpPerPx,
                reversed,
                config,
                extraGlyphs,
            });
            subSubLayout.move(0, topOffset);
            topOffset +=
                displayMode === 'collapse'
                    ? 0
                    : (displayMode === 'compact'
                        ? subfeatureHeight / 3
                        : subfeatureHeight) + 2;
        });
    }
    return subLayout;
};
exports.default = (0, mobx_react_1.observer)(Subfeatures);
//# sourceMappingURL=Subfeatures.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const mobx_react_1 = require("mobx-react");
const configuration_1 = require("@jbrowse/core/configuration");
// locals
const util_1 = require("./util");
const Arrow_1 = __importDefault(require("./Arrow"));
const utrHeightFraction = 0.65;
function Box(props) {
    const { feature, region, config, featureLayout, bpPerPx, topLevel } = props;
    const { start, end } = region;
    const screenWidth = (end - start) / bpPerPx;
    const width = (feature.get('end') - feature.get('start')) / bpPerPx;
    const { left = 0 } = featureLayout.absolute;
    let { top = 0, height = 0 } = featureLayout.absolute;
    if (left + width < 0) {
        return null;
    }
    if ((0, util_1.isUTR)(feature)) {
        top += ((1 - utrHeightFraction) / 2) * height;
        height *= utrHeightFraction;
    }
    const leftWithinBlock = Math.max(left, 0);
    const diff = leftWithinBlock - left;
    const widthWithinBlock = Math.max(2, Math.min(width - diff, screenWidth));
    // if feature has parent and type is intron, then don't render the intron
    // subfeature (if it doesn't have a parent, then maybe the introns are
    // separately displayed features that should be displayed)
    return feature.parent() && feature.get('type') === 'intron' ? null : (react_1.default.createElement(react_1.default.Fragment, null,
        topLevel ? react_1.default.createElement(Arrow_1.default, { ...props }) : null,
        react_1.default.createElement("rect", { "data-testid": `box-${feature.id()}`, x: leftWithinBlock, y: top, width: widthWithinBlock, height: height, fill: (0, util_1.isUTR)(feature)
                ? (0, configuration_1.readConfObject)(config, 'color3', { feature })
                : (0, configuration_1.readConfObject)(config, 'color1', { feature }), stroke: (0, configuration_1.readConfObject)(config, 'outline', { feature }) })));
}
exports.default = (0, mobx_react_1.observer)(Box);
//# sourceMappingURL=Box.js.map
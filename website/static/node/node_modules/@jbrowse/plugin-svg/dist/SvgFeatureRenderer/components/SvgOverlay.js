"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const util_1 = require("@jbrowse/core/util");
const mobx_react_1 = require("mobx-react");
function OverlayRect({ rect, region, bpPerPx, ...rectProps }) {
    if (!rect) {
        return null;
    }
    const [leftBp, topPx, rightBp, bottomPx] = rect;
    const [leftPx, rightPx] = (0, util_1.bpSpanPx)(leftBp, rightBp, region, bpPerPx);
    const rectTop = Math.round(topPx);
    const screenWidth = (region.end - region.start) / bpPerPx;
    const rectHeight = Math.round(bottomPx - topPx);
    const width = rightPx - leftPx;
    if (leftPx + width < 0) {
        return null;
    }
    const leftWithinBlock = Math.max(leftPx, 0);
    const diff = leftWithinBlock - leftPx;
    const widthWithinBlock = Math.max(1, Math.min(width - diff, screenWidth));
    return (react_1.default.createElement("rect", { x: leftWithinBlock - 2, y: rectTop - 2, width: widthWithinBlock + 4, height: rectHeight + 4, ...rectProps }));
}
function SvgOverlay({ displayModel = {}, blockKey, region, bpPerPx, movedDuringLastMouseDown, ...handlers }) {
    var _a, _b;
    const { selectedFeatureId, featureIdUnderMouse, contextMenuFeature } = displayModel;
    const mouseoverFeatureId = featureIdUnderMouse || (contextMenuFeature === null || contextMenuFeature === void 0 ? void 0 : contextMenuFeature.id());
    function onFeatureMouseDown(event) {
        const { onFeatureMouseDown: handler } = handlers;
        if (!(handler && mouseoverFeatureId)) {
            return undefined;
        }
        return handler(event, mouseoverFeatureId);
    }
    function onFeatureMouseEnter(event) {
        const { onFeatureMouseEnter: handler } = handlers;
        if (!(handler && mouseoverFeatureId)) {
            return undefined;
        }
        return handler(event, mouseoverFeatureId);
    }
    function onFeatureMouseOut(event) {
        const { onFeatureMouseOut: handler } = handlers;
        if (!(handler && mouseoverFeatureId)) {
            return undefined;
        }
        return handler(event, mouseoverFeatureId);
    }
    function onFeatureMouseOver(event) {
        const { onFeatureMouseOver: handler } = handlers;
        if (!(handler && mouseoverFeatureId)) {
            return undefined;
        }
        return handler(event, mouseoverFeatureId);
    }
    function onFeatureMouseUp(event) {
        const { onFeatureMouseUp: handler } = handlers;
        if (!(handler && mouseoverFeatureId)) {
            return undefined;
        }
        return handler(event, mouseoverFeatureId);
    }
    function onFeatureMouseLeave(event) {
        const { onFeatureMouseLeave: handler } = handlers;
        if (!(handler && mouseoverFeatureId)) {
            return undefined;
        }
        return handler(event, mouseoverFeatureId);
    }
    function onFeatureMouseMove(event) {
        const { onFeatureMouseMove: handler } = handlers;
        if (!(handler && mouseoverFeatureId)) {
            return undefined;
        }
        return handler(event, mouseoverFeatureId);
    }
    function onFeatureClick(event) {
        if (movedDuringLastMouseDown) {
            return undefined;
        }
        const { onFeatureClick: handler } = handlers;
        if (!(handler && mouseoverFeatureId)) {
            return undefined;
        }
        event.stopPropagation();
        return handler(event, mouseoverFeatureId);
    }
    function onFeatureContextMenu(event) {
        const { onFeatureContextMenu: handler } = handlers;
        if (!(handler && mouseoverFeatureId)) {
            return undefined;
        }
        return handler(event, mouseoverFeatureId);
    }
    return (react_1.default.createElement(react_1.default.Fragment, null,
        mouseoverFeatureId ? (react_1.default.createElement(OverlayRect, { rect: (_a = displayModel.getFeatureByID) === null || _a === void 0 ? void 0 : _a.call(displayModel, blockKey, mouseoverFeatureId), region: region, bpPerPx: bpPerPx, fill: "#000", fillOpacity: "0.2", onMouseDown: onFeatureMouseDown, onMouseEnter: onFeatureMouseEnter, onMouseOut: onFeatureMouseOut, onMouseOver: onFeatureMouseOver, onMouseUp: onFeatureMouseUp, onMouseLeave: onFeatureMouseLeave, onMouseMove: onFeatureMouseMove, onClick: onFeatureClick, onContextMenu: onFeatureContextMenu, onFocus: onFeatureMouseOver, onBlur: onFeatureMouseOut, "data-testid": mouseoverFeatureId })) : null,
        selectedFeatureId ? (react_1.default.createElement(OverlayRect, { rect: (_b = displayModel.getFeatureByID) === null || _b === void 0 ? void 0 : _b.call(displayModel, blockKey, selectedFeatureId), region: region, bpPerPx: bpPerPx, stroke: "#00b8ff", fill: "none" })) : null));
}
exports.default = (0, mobx_react_1.observer)(SvgOverlay);
//# sourceMappingURL=SvgOverlay.js.map
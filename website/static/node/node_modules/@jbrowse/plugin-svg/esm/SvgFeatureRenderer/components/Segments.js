import React from 'react';
import { readConfObject, } from '@jbrowse/core/configuration';
import { observer } from 'mobx-react';
import Arrow from './Arrow';
function Segments(props) {
    const { feature, featureLayout, selected, config, 
    // some subfeatures may be computed e.g. makeUTRs,
    // so these are passed as a prop, or feature.get('subfeatures') by default
    subfeatures = feature.get('subfeatures'), } = props;
    const color2 = readConfObject(config, 'color2', { feature });
    const { left = 0, top = 0, width = 0, height = 0 } = featureLayout.absolute;
    const y = top + height / 2;
    return (React.createElement(React.Fragment, null,
        React.createElement("line", { "data-testid": feature.id(), x1: left, y1: y, y2: y, x2: left + width, stroke: color2 }), subfeatures === null || subfeatures === void 0 ? void 0 :
        subfeatures.map(subfeature => {
            const subfeatureId = String(subfeature.id());
            const subfeatureLayout = featureLayout.getSubRecord(subfeatureId);
            // This subfeature got filtered out
            if (!subfeatureLayout) {
                return null;
            }
            const { GlyphComponent } = subfeatureLayout.data || {};
            return (React.createElement(GlyphComponent, { key: `glyph-${subfeatureId}`, ...props, feature: subfeature, topLevel: false, featureLayout: subfeatureLayout, selected: selected }));
        }),
        React.createElement(Arrow, { ...props })));
}
export default observer(Segments);
//# sourceMappingURL=Segments.js.map
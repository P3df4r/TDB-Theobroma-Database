import React, { useState } from 'react';
import { Button, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, Divider, FormGroup, FormControlLabel, IconButton, TextField, Typography, } from '@mui/material';
import { getSnapshot } from 'mobx-state-tree';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { getSession } from '@jbrowse/core/util';
// icons
import CloseIcon from '@mui/icons-material/Close';
const useStyles = makeStyles()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    dialogContent: {
        width: '40em',
    },
}));
function SequenceDialog({ model, handleClose, }) {
    const { classes } = useStyles();
    const [value, setValue] = useState('');
    const [searchForward, setSearchForward] = useState(true);
    const [searchReverse, setSearchReverse] = useState(true);
    const [caseInsensitive, setCaseInsensitive] = useState(true);
    let error;
    try {
        new RegExp(value);
    }
    catch (e) {
        error = e;
    }
    return (React.createElement(Dialog, { maxWidth: "xl", open: true, onClose: handleClose },
        React.createElement(DialogTitle, null,
            "Sequence search",
            handleClose ? (React.createElement(IconButton, { className: classes.closeButton, onClick: () => handleClose(), size: "large" },
                React.createElement(CloseIcon, null))) : null),
        React.createElement(Divider, null),
        React.createElement(DialogContent, { className: classes.dialogContent },
            React.createElement(Typography, null, "Supply a sequence to search for. A track will be created with the resulting matches once submitted. You can also supply regex style expressions e.g. AACT(C|T)."),
            React.createElement(TextField, { value: value, onChange: e => setValue(e.target.value), helperText: "Sequence search pattern" }),
            React.createElement(FormGroup, null,
                React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: searchForward, onChange: event => setSearchForward(event.target.checked) }), label: "Search forward strand" }),
                React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: searchReverse, onChange: event => setSearchReverse(event.target.checked) }), label: "Search reverse strand" }),
                React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: caseInsensitive, onChange: event => setCaseInsensitive(event.target.checked) }), label: "Case insensitive" })),
            error ? React.createElement(Typography, { color: "error" }, `${error}`) : null),
        React.createElement(DialogActions, null,
            React.createElement(Button, { onClick: () => {
                    var _a;
                    if (value) {
                        const trackId = `sequence_search_${+Date.now()}`;
                        const session = getSession(model);
                        const { assemblyManager } = session;
                        const assemblyName = model.assemblyNames[0];
                        session.addTrackConf({
                            trackId,
                            name: `Sequence search ${value}`,
                            assemblyNames: [assemblyName],
                            type: 'FeatureTrack',
                            adapter: {
                                type: 'SequenceSearchAdapter',
                                search: value,
                                searchForward,
                                searchReverse,
                                caseInsensitive,
                                sequenceAdapter: getSnapshot((_a = assemblyManager.get(assemblyName)) === null || _a === void 0 ? void 0 : _a.configuration.sequence.adapter),
                            },
                        });
                        model.toggleTrack(trackId);
                    }
                    handleClose();
                }, variant: "contained", color: "primary" }, "Submit"),
            React.createElement(Button, { onClick: () => handleClose(), variant: "contained", color: "secondary" }, "Close"))));
}
export default observer(SequenceDialog);
//# sourceMappingURL=SequenceSearchDialog.js.map
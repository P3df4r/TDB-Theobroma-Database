import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { IconButton, Paper } from '@mui/material';
import ZoomIn from '@mui/icons-material/ZoomIn';
import ZoomOut from '@mui/icons-material/ZoomOut';
import ArrowDown from '@mui/icons-material/KeyboardArrowDown';
import Menu from '@jbrowse/core/ui/Menu';
const MiniControls = observer((props) => {
    const { model } = props;
    const { bpPerPx, maxBpPerPx, minBpPerPx, scaleFactor, hideHeader } = model;
    const [anchorEl, setAnchorEl] = useState();
    return hideHeader ? (React.createElement("div", { style: { position: 'absolute', right: '0px', zIndex: '1001' } },
        React.createElement(Paper, { style: { background: '#aaa7' } },
            React.createElement(IconButton, { color: "secondary", onClick: event => setAnchorEl(event.currentTarget) },
                React.createElement(ArrowDown, { fontSize: "small" })),
            React.createElement(IconButton, { "data-testid": "zoom_out", onClick: () => model.zoom(bpPerPx * 2), disabled: bpPerPx >= maxBpPerPx - 0.0001 || scaleFactor !== 1, color: "secondary" },
                React.createElement(ZoomOut, { fontSize: "small" })),
            React.createElement(IconButton, { "data-testid": "zoom_in", onClick: () => model.zoom(model.bpPerPx / 2), disabled: bpPerPx <= minBpPerPx + 0.0001 || scaleFactor !== 1, color: "secondary" },
                React.createElement(ZoomIn, { fontSize: "small" })),
            React.createElement(Menu, { anchorEl: anchorEl, open: Boolean(anchorEl), onMenuItemClick: (_, callback) => {
                    callback();
                    setAnchorEl(undefined);
                }, onClose: () => setAnchorEl(undefined), menuItems: model.menuItems() })))) : null;
});
export default MiniControls;
//# sourceMappingURL=MiniControls.js.map
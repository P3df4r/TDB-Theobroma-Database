import React, { useRef, useEffect, useState } from 'react';
import { observer } from 'mobx-react';
import { Popover, Tooltip, Typography, alpha } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { stringify } from '@jbrowse/core/util';
import { Menu } from '@jbrowse/core/ui';
const useStyles = makeStyles()(theme => {
    const { primary, tertiary } = theme.palette;
    const background = tertiary
        ? alpha(tertiary.main, 0.7)
        : alpha(primary.main, 0.7);
    return {
        rubberBand: {
            height: '100%',
            background,
            position: 'absolute',
            zIndex: 10,
            textAlign: 'center',
            overflow: 'hidden',
        },
        rubberBandControl: {
            cursor: 'crosshair',
            width: '100%',
            minHeight: 8,
        },
        rubberBandText: {
            color: tertiary ? tertiary.contrastText : primary.contrastText,
        },
        popover: {
            mouseEvents: 'none',
            cursor: 'crosshair',
        },
        paper: {
            paddingLeft: theme.spacing(1),
            paddingRight: theme.spacing(1),
        },
        guide: {
            pointerEvents: 'none',
            height: '100%',
            width: 1,
            position: 'absolute',
            zIndex: 10,
        },
    };
});
const VerticalGuide = observer(({ model, coordX }) => {
    const { classes } = useStyles();
    return (React.createElement(Tooltip, { open: true, placement: "top", title: stringify(model.pxToBp(coordX)), arrow: true },
        React.createElement("div", { className: classes.guide, style: {
                left: coordX,
                background: 'red',
            } })));
});
function RubberBand({ model, ControlComponent = React.createElement("div", null), }) {
    const [startX, setStartX] = useState();
    const [currentX, setCurrentX] = useState();
    // clientX and clientY used for anchorPosition for menu
    // offsetX used for calculations about width of selection
    const [anchorPosition, setAnchorPosition] = useState();
    const [guideX, setGuideX] = useState();
    const controlsRef = useRef(null);
    const rubberBandRef = useRef(null);
    const { classes } = useStyles();
    const mouseDragging = startX !== undefined && anchorPosition === undefined;
    const { setOffsets, pxToBp } = model;
    useEffect(() => {
        function computeOffsets(offsetX) {
            if (startX === undefined) {
                return;
            }
            let leftPx = startX;
            let rightPx = offsetX;
            if (rightPx < leftPx) {
                ;
                [leftPx, rightPx] = [rightPx, leftPx];
            }
            const leftOffset = pxToBp(leftPx);
            const rightOffset = pxToBp(rightPx);
            return { leftOffset, rightOffset };
        }
        function globalMouseMove(event) {
            if (controlsRef.current && mouseDragging) {
                const relativeX = event.clientX - controlsRef.current.getBoundingClientRect().left;
                setCurrentX(relativeX);
            }
        }
        function globalMouseUp(event) {
            if (startX !== undefined && controlsRef.current) {
                const { clientX, clientY } = event;
                const ref = controlsRef.current;
                const offsetX = clientX - ref.getBoundingClientRect().left;
                // as stated above, store both clientX/Y and offsetX for different
                // purposes
                setAnchorPosition({
                    offsetX,
                    clientX,
                    clientY,
                });
                const args = computeOffsets(offsetX);
                if (args) {
                    const { leftOffset, rightOffset } = args;
                    setOffsets(leftOffset, rightOffset);
                }
                setGuideX(undefined);
            }
        }
        if (mouseDragging) {
            window.addEventListener('mousemove', globalMouseMove);
            window.addEventListener('mouseup', globalMouseUp);
            return () => {
                window.removeEventListener('mousemove', globalMouseMove);
                window.removeEventListener('mouseup', globalMouseUp);
            };
        }
        return () => { };
    }, [startX, mouseDragging, anchorPosition, setOffsets, pxToBp]);
    useEffect(() => {
        if (!mouseDragging &&
            currentX !== undefined &&
            startX !== undefined &&
            Math.abs(currentX - startX) <= 3) {
            handleClose();
        }
    }, [mouseDragging, currentX, startX, model.bpPerPx]);
    function mouseDown(event) {
        event.preventDefault();
        event.stopPropagation();
        const relativeX = event.clientX -
            event.target.getBoundingClientRect().left;
        setStartX(relativeX);
        setCurrentX(relativeX);
    }
    function mouseMove(event) {
        const target = event.target;
        setGuideX(event.clientX - target.getBoundingClientRect().left);
    }
    function mouseOut() {
        setGuideX(undefined);
        model.setOffsets(undefined, undefined);
    }
    function handleClose() {
        setAnchorPosition(undefined);
        setStartX(undefined);
        setCurrentX(undefined);
    }
    const open = Boolean(anchorPosition);
    function handleMenuItemClick(_, callback) {
        callback();
        handleClose();
    }
    if (startX === undefined) {
        return (React.createElement(React.Fragment, null,
            guideX !== undefined ? (React.createElement(VerticalGuide, { model: model, coordX: guideX })) : null,
            React.createElement("div", { "data-testid": "rubberBand_controls", className: classes.rubberBandControl, role: "presentation", ref: controlsRef, onMouseDown: mouseDown, onMouseOut: mouseOut, onMouseMove: mouseMove }, ControlComponent)));
    }
    /* Calculating Pixels for Mouse Dragging */
    const right = anchorPosition ? anchorPosition.offsetX : currentX || 0;
    const left = right < startX ? right : startX;
    const width = Math.abs(right - startX);
    const leftBpOffset = model.pxToBp(left);
    const rightBpOffset = model.pxToBp(left + width);
    const numOfBpSelected = Math.ceil(width * model.bpPerPx);
    return (React.createElement(React.Fragment, null,
        rubberBandRef.current ? (React.createElement(React.Fragment, null,
            React.createElement(Popover, { className: classes.popover, classes: {
                    paper: classes.paper,
                }, open: true, anchorEl: rubberBandRef.current, anchorOrigin: {
                    vertical: 'top',
                    horizontal: 'left',
                }, transformOrigin: {
                    vertical: 'bottom',
                    horizontal: 'right',
                }, keepMounted: true, disableRestoreFocus: true },
                React.createElement(Typography, null, stringify(leftBpOffset))),
            React.createElement(Popover, { className: classes.popover, classes: {
                    paper: classes.paper,
                }, open: true, anchorEl: rubberBandRef.current, anchorOrigin: {
                    vertical: 'top',
                    horizontal: 'right',
                }, transformOrigin: {
                    vertical: 'bottom',
                    horizontal: 'left',
                }, keepMounted: true, disableRestoreFocus: true },
                React.createElement(Typography, null, stringify(rightBpOffset))))) : null,
        React.createElement("div", { ref: rubberBandRef, className: classes.rubberBand, style: { left, width } },
            React.createElement(Typography, { variant: "h6", className: classes.rubberBandText },
                numOfBpSelected.toLocaleString('en-US'),
                " bp")),
        React.createElement("div", { "data-testid": "rubberBand_controls", className: classes.rubberBandControl, role: "presentation", ref: controlsRef, onMouseDown: mouseDown, onMouseOut: mouseOut, onMouseMove: mouseMove }, ControlComponent),
        anchorPosition ? (React.createElement(Menu, { anchorReference: "anchorPosition", anchorPosition: {
                left: anchorPosition.clientX,
                top: anchorPosition.clientY,
            }, onMenuItemClick: handleMenuItemClick, open: open, onClose: handleClose, menuItems: model.rubberBandMenuItems() })) : null));
}
export default observer(RubberBand);
//# sourceMappingURL=RubberBand.js.map
import React, { useState, useEffect, lazy } from 'react';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { getSession } from '@jbrowse/core/util';
import { Button, CircularProgress, FormControl, Container, Grid, } from '@mui/material';
import { ErrorMessage, AssemblySelector } from '@jbrowse/core/ui';
// icons
import CloseIcon from '@mui/icons-material/Close';
// locals
import RefNameAutocomplete from './RefNameAutocomplete';
import { fetchResults, splitLast } from './util';
const SearchResultsDialog = lazy(() => import('./SearchResultsDialog'));
const useStyles = makeStyles()(theme => ({
    importFormContainer: {
        padding: theme.spacing(2),
    },
    button: {
        margin: theme.spacing(2),
    },
    container: {
        padding: theme.spacing(4),
    },
}));
const ImportForm = observer(({ model }) => {
    var _a;
    const { classes } = useStyles();
    const session = getSession(model);
    const { assemblyNames, assemblyManager, textSearchManager } = session;
    const { rankSearchResults, isSearchDialogDisplayed, error } = model;
    const [selectedAsm, setSelectedAsm] = useState(assemblyNames[0]);
    const [option, setOption] = useState();
    const searchScope = model.searchScope(selectedAsm);
    const assembly = assemblyManager.get(selectedAsm);
    const assemblyError = assemblyNames.length
        ? assembly === null || assembly === void 0 ? void 0 : assembly.error
        : 'No configured assemblies';
    const regions = (assembly === null || assembly === void 0 ? void 0 : assembly.regions) || [];
    const displayError = assemblyError || error;
    const [value, setValue] = useState('');
    const r0 = (_a = regions[0]) === null || _a === void 0 ? void 0 : _a.refName;
    // useEffect resets to an "initial state" of displaying first region from assembly
    // after assembly change. needs to react to selectedAsm as well as r0 because changing
    // assembly will run setValue('') and then r0 may not change if assembly names are the
    // same across assemblies, but it still needs to be reset
    useEffect(() => {
        setValue(r0);
    }, [r0, selectedAsm]);
    function navToOption(option) {
        const location = option.getLocation();
        const trackId = option.getTrackId();
        if (location) {
            model.navToLocString(location, selectedAsm);
            if (trackId) {
                model.showTrack(trackId);
            }
        }
    }
    // gets a string as input, or use stored option results from previous query,
    // then re-query and
    // 1) if it has multiple results: pop a dialog
    // 2) if it's a single result navigate to it
    // 3) else assume it's a locstring and navigate to it
    async function handleSelectedRegion(input) {
        try {
            if ((option === null || option === void 0 ? void 0 : option.getDisplayString()) === input && option.hasLocation()) {
                navToOption(option);
            }
            else {
                const [ref, rest] = splitLast(input, ':');
                const allRefs = (assembly === null || assembly === void 0 ? void 0 : assembly.allRefNamesWithLowerCase) || [];
                if (allRefs.includes(input) ||
                    (allRefs.includes(ref) && !Number.isNaN(parseInt(rest, 10)))) {
                    model.navToLocString(input, selectedAsm);
                }
                else {
                    const results = await fetchResults({
                        queryString: input,
                        searchType: 'exact',
                        searchScope,
                        rankSearchResults,
                        textSearchManager,
                        assembly,
                    });
                    if (results.length > 1) {
                        model.setSearchResults(results, input.toLowerCase());
                    }
                    else if (results.length === 1) {
                        navToOption(results[0]);
                    }
                    else {
                        model.navToLocString(input, selectedAsm);
                    }
                }
            }
        }
        catch (e) {
            console.error(e);
            session.notify(`${e}`, 'warning');
        }
    }
    // implementation notes:
    // having this wrapped in a form allows intuitive use of enter key to submit
    return (React.createElement("div", { className: classes.container },
        displayError ? React.createElement(ErrorMessage, { error: displayError }) : null,
        React.createElement(Container, { className: classes.importFormContainer },
            React.createElement("form", { onSubmit: event => {
                    event.preventDefault();
                    model.setError(undefined);
                    if (value) {
                        handleSelectedRegion(value);
                    }
                } },
                React.createElement(Grid, { container: true, spacing: 1, justifyContent: "center", alignItems: "center" },
                    React.createElement(Grid, { item: true },
                        React.createElement(FormControl, null,
                            React.createElement(AssemblySelector, { onChange: val => {
                                    setSelectedAsm(val);
                                    setValue('');
                                }, session: session, selected: selectedAsm }))),
                    React.createElement(Grid, { item: true }, selectedAsm ? (assemblyError ? (React.createElement(CloseIcon, { style: { color: 'red' } })) : value ? (React.createElement(FormControl, null,
                        React.createElement(RefNameAutocomplete, { fetchResults: queryString => fetchResults({
                                queryString,
                                assembly,
                                textSearchManager,
                                rankSearchResults,
                                searchScope,
                            }), model: model, assemblyName: assemblyError ? undefined : selectedAsm, value: value, 
                            // note: minWidth 270 accomodates full width of helperText
                            minWidth: 270, onChange: str => setValue(str), onSelect: val => setOption(val), TextFieldProps: {
                                variant: 'outlined',
                                helperText: 'Enter sequence name, feature name, or location',
                                style: { minWidth: '175px' },
                            } }))) : (React.createElement(CircularProgress, { role: "progressbar", size: 20, disableShrink: true }))) : null),
                    React.createElement(Grid, { item: true },
                        React.createElement(FormControl, null,
                            React.createElement(Button, { type: "submit", disabled: !value, className: classes.button, variant: "contained", color: "primary" }, "Open")),
                        React.createElement(FormControl, null,
                            React.createElement(Button, { disabled: !value, className: classes.button, onClick: () => {
                                    model.setError(undefined);
                                    model.showAllRegionsInAssembly(selectedAsm);
                                }, variant: "contained", color: "secondary" }, "Show all regions in assembly")))))),
        isSearchDialogDisplayed ? (React.createElement(SearchResultsDialog, { model: model, optAssemblyName: selectedAsm, handleClose: () => model.setSearchResults(undefined, undefined) })) : null));
});
export default ImportForm;
//# sourceMappingURL=ImportForm.js.map
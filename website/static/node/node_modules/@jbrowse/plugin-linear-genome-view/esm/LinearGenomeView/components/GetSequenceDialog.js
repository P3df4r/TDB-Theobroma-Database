import React, { useEffect, useMemo, useState } from 'react';
import { makeStyles } from 'tss-react/mui';
import { Button, CircularProgress, Container, Dialog, DialogActions, DialogContent, DialogTitle, Divider, IconButton, TextField, Typography, } from '@mui/material';
import { observer } from 'mobx-react';
import { saveAs } from 'file-saver';
import { getConf } from '@jbrowse/core/configuration';
import copy from 'copy-to-clipboard';
import { getSession } from '@jbrowse/core/util';
import { formatSeqFasta } from '@jbrowse/core/util/formatFastaStrings';
// icons
import { ContentCopy as ContentCopyIcon } from '@jbrowse/core/ui/Icons';
import CloseIcon from '@mui/icons-material/Close';
import GetAppIcon from '@mui/icons-material/GetApp';
const useStyles = makeStyles()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    dialogContent: {
        width: '80em',
    },
    textAreaFont: {
        fontFamily: 'Courier New',
    },
}));
/**
 * Fetches and returns a list features for a given list of regions
 */
async function fetchSequence(model, regions, signal) {
    const session = getSession(model);
    const { leftOffset, rightOffset } = model;
    if (!leftOffset || !rightOffset) {
        throw new Error('no offsets on model to use for range');
    }
    if (leftOffset.assemblyName !== rightOffset.assemblyName) {
        throw new Error('not able to fetch sequences from multiple assemblies');
    }
    const { rpcManager, assemblyManager } = session;
    const assemblyName = leftOffset.assemblyName || rightOffset.assemblyName || '';
    const assembly = assemblyManager.get(assemblyName);
    if (!assembly) {
        throw new Error(`assembly ${assemblyName} not found`);
    }
    const adapterConfig = getConf(assembly, ['sequence', 'adapter']);
    const sessionId = 'getSequence';
    return rpcManager.call(sessionId, 'CoreGetFeatures', {
        adapterConfig,
        regions,
        sessionId,
        signal,
    });
}
function SequenceDialog({ model, handleClose, }) {
    const { classes } = useStyles();
    const session = getSession(model);
    const [error, setError] = useState();
    const [sequence, setSequence] = useState();
    const loading = Boolean(sequence === undefined);
    const { leftOffset, rightOffset } = model;
    // avoid infinite looping of useEffect
    // random note: the current selected region can't be a computed because it
    // uses action on base1dview even though it's on the ephemeral base1dview
    const regionsSelected = useMemo(() => model.getSelectedRegions(leftOffset, rightOffset), [model, leftOffset, rightOffset]);
    useEffect(() => {
        let active = true;
        const controller = new AbortController();
        (async () => {
            try {
                if (regionsSelected.length > 0) {
                    const chunks = await fetchSequence(model, regionsSelected, controller.signal);
                    if (active) {
                        setSequence(formatSeqFasta(chunks
                            .filter(f => !!f)
                            .map(chunk => {
                            const chunkSeq = chunk.get('seq');
                            const chunkRefName = chunk.get('refName');
                            const chunkStart = chunk.get('start') + 1;
                            const chunkEnd = chunk.get('end');
                            const chunkLocstring = `${chunkRefName}:${chunkStart}-${chunkEnd}`;
                            if ((chunkSeq === null || chunkSeq === void 0 ? void 0 : chunkSeq.length) !== chunkEnd - chunkStart + 1) {
                                throw new Error(`${chunkLocstring} returned ${chunkSeq.length.toLocaleString()} bases, but should have returned ${(chunkEnd - chunkStart).toLocaleString()}`);
                            }
                            return { header: chunkLocstring, seq: chunkSeq };
                        })));
                    }
                }
                else {
                    throw new Error('Selected region is out of bounds');
                }
            }
            catch (e) {
                console.error(e);
                if (active) {
                    setError(e);
                }
            }
        })();
        return () => {
            controller.abort();
            active = false;
        };
    }, [model, session, regionsSelected, setSequence]);
    const sequenceTooLarge = sequence ? sequence.length > 1000000 : false;
    return (React.createElement(Dialog, { maxWidth: "xl", open: true, onClose: handleClose },
        React.createElement(DialogTitle, null,
            "Reference sequence",
            handleClose ? (React.createElement(IconButton, { className: classes.closeButton, onClick: () => {
                    handleClose();
                    model.setOffsets(undefined, undefined);
                }, size: "large" },
                React.createElement(CloseIcon, null))) : null),
        React.createElement(Divider, null),
        React.createElement(DialogContent, null,
            error ? React.createElement(Typography, { color: "error" }, `${error}`) : null,
            loading && !error ? (React.createElement(Container, null,
                "Retrieving reference sequence...",
                React.createElement(CircularProgress, { style: {
                        marginLeft: 10,
                    }, size: 20, disableShrink: true }))) : null,
            React.createElement(TextField, { "data-testid": "rubberband-sequence", variant: "outlined", multiline: true, minRows: 5, disabled: sequenceTooLarge, className: classes.dialogContent, fullWidth: true, value: sequenceTooLarge
                    ? 'Reference sequence too large to display, use the download FASTA button'
                    : sequence, InputProps: {
                    readOnly: true,
                    classes: {
                        input: classes.textAreaFont,
                    },
                } })),
        React.createElement(DialogActions, null,
            React.createElement(Button, { onClick: () => {
                    copy(sequence || '');
                    session.notify('Copied to clipboard', 'success');
                }, disabled: loading || !!error || sequenceTooLarge, color: "primary", startIcon: React.createElement(ContentCopyIcon, null) }, "Copy to clipboard"),
            React.createElement(Button, { onClick: () => {
                    const seqFastaFile = new Blob([sequence || ''], {
                        type: 'text/x-fasta;charset=utf-8',
                    });
                    saveAs(seqFastaFile, 'jbrowse_ref_seq.fa');
                }, disabled: loading || !!error, color: "primary", startIcon: React.createElement(GetAppIcon, null) }, "Download FASTA"),
            React.createElement(Button, { onClick: handleClose, variant: "contained" }, "Close"))));
}
export default observer(SequenceDialog);
//# sourceMappingURL=GetSequenceDialog.js.map
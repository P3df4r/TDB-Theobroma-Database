import React, { useRef, useEffect, useState } from 'react';
import { Popover, Tooltip, Typography, alpha } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { getSession, stringify } from '@jbrowse/core/util';
import { observer } from 'mobx-react';
import { HEADER_OVERVIEW_HEIGHT } from '..';
const useStyles = makeStyles()(theme => {
    const { tertiary, primary } = theme.palette;
    const background = tertiary
        ? alpha(tertiary.main, 0.7)
        : alpha(primary.main, 0.7);
    return {
        rubberBand: {
            height: '100%',
            background,
            position: 'absolute',
            zIndex: 10,
            textAlign: 'center',
            overflow: 'hidden',
        },
        rubberBandControl: {
            cursor: 'crosshair',
            width: '100%',
            minHeight: 8,
        },
        rubberBandText: {
            color: tertiary ? tertiary.contrastText : primary.contrastText,
        },
        popover: {
            mouseEvents: 'none',
            cursor: 'crosshair',
        },
        paper: {
            paddingLeft: theme.spacing(1),
            paddingRight: theme.spacing(1),
        },
        guide: {
            pointerEvents: 'none',
            height: '100%',
            width: 1,
            position: 'absolute',
            zIndex: 10,
        },
    };
});
const HoverTooltip = observer(({ model, open, guideX, overview, }) => {
    var _a;
    const { classes } = useStyles();
    const { cytobandOffset } = model;
    const { assemblyManager } = getSession(model);
    const px = overview.pxToBp(guideX - cytobandOffset);
    const assembly = assemblyManager.get(px.assemblyName);
    const cytoband = (_a = assembly === null || assembly === void 0 ? void 0 : assembly.cytobands) === null || _a === void 0 ? void 0 : _a.find(f => px.coord > f.get('start') &&
        px.coord < f.get('end') &&
        px.refName === assembly.getCanonicalRefName(f.get('refName')));
    return (React.createElement(Tooltip, { open: open, placement: "top", title: [stringify(px), cytoband === null || cytoband === void 0 ? void 0 : cytoband.get('name')].join(' '), arrow: true },
        React.createElement("div", { className: classes.guide, style: {
                left: guideX,
            } })));
});
function OverviewRubberBand({ model, overview, ControlComponent = React.createElement("div", null), }) {
    const { cytobandOffset } = model;
    const [startX, setStartX] = useState();
    const [currentX, setCurrentX] = useState();
    const [guideX, setGuideX] = useState();
    const controlsRef = useRef(null);
    const rubberBandRef = useRef(null);
    const { classes } = useStyles();
    const mouseDragging = startX !== undefined;
    useEffect(() => {
        function globalMouseMove(event) {
            const ref = controlsRef.current;
            if (ref && mouseDragging) {
                const relativeX = event.clientX - ref.getBoundingClientRect().left;
                setCurrentX(relativeX);
            }
        }
        function globalMouseUp() {
            // click and drag
            if (startX !== undefined && currentX !== undefined) {
                if (Math.abs(currentX - startX) > 3) {
                    const left = Math.min(startX, currentX);
                    const right = Math.max(startX, currentX);
                    model.moveTo(overview.pxToBp(left - cytobandOffset), overview.pxToBp(right - cytobandOffset));
                }
            }
            // just a click
            if (startX !== undefined && currentX === undefined) {
                const click = overview.pxToBp(startX - cytobandOffset);
                if (!click.refName) {
                    getSession(model).notify('unknown position clicked');
                    console.error('unknown position clicked', click);
                }
                else {
                    model.centerAt(Math.round(click.coord), click.refName, click.index);
                }
            }
            setStartX(undefined);
            setCurrentX(undefined);
            if (startX !== undefined) {
                setGuideX(undefined);
            }
        }
        function globalKeyDown(event) {
            if (event.key === 'Escape') {
                setStartX(undefined);
                setCurrentX(undefined);
            }
        }
        if (mouseDragging) {
            window.addEventListener('mousemove', globalMouseMove, true);
            window.addEventListener('mouseup', globalMouseUp, true);
            window.addEventListener('keydown', globalKeyDown, true);
            return () => {
                window.removeEventListener('mousemove', globalMouseMove, true);
                window.removeEventListener('mouseup', globalMouseUp, true);
                window.removeEventListener('keydown', globalKeyDown, true);
            };
        }
        return () => { };
    }, [mouseDragging, currentX, startX, model, overview, cytobandOffset]);
    function mouseDown(event) {
        event.preventDefault();
        event.stopPropagation();
        if (controlsRef.current) {
            setStartX(event.clientX - controlsRef.current.getBoundingClientRect().left);
        }
    }
    function mouseMove(event) {
        if (controlsRef.current) {
            setGuideX(event.clientX - controlsRef.current.getBoundingClientRect().left);
        }
    }
    function mouseOut() {
        setGuideX(undefined);
    }
    if (startX === undefined) {
        return (React.createElement("div", { style: { position: 'relative' } },
            guideX !== undefined ? (React.createElement(HoverTooltip, { model: model, open: !mouseDragging, overview: overview, guideX: guideX })) : null,
            React.createElement("div", { className: classes.rubberBandControl, role: "presentation", ref: controlsRef, onMouseDown: mouseDown, onMouseOut: mouseOut, onMouseMove: mouseMove }, ControlComponent)));
    }
    let left = startX || 0;
    let width = 0;
    if (startX !== undefined && currentX !== undefined) {
        left = currentX < startX ? currentX : startX;
        width = currentX - startX;
    }
    // calculate the start and end bp of drag
    let leftBpOffset;
    let rightBpOffset;
    if (startX) {
        leftBpOffset = overview.pxToBp(startX - cytobandOffset);
        rightBpOffset = overview.pxToBp(startX + width - cytobandOffset);
        if (currentX && currentX < startX) {
            ;
            [leftBpOffset, rightBpOffset] = [rightBpOffset, leftBpOffset];
        }
    }
    return (React.createElement("div", { style: { position: 'relative' } },
        rubberBandRef.current ? (React.createElement(React.Fragment, null,
            React.createElement(Popover, { className: classes.popover, classes: {
                    paper: classes.paper,
                }, open: true, anchorEl: rubberBandRef.current, anchorOrigin: {
                    vertical: 'top',
                    horizontal: 'left',
                }, transformOrigin: {
                    vertical: 'bottom',
                    horizontal: 'right',
                }, keepMounted: true, disableRestoreFocus: true },
                React.createElement(Typography, null, leftBpOffset ? stringify(leftBpOffset) : '')),
            React.createElement(Popover, { className: classes.popover, classes: {
                    paper: classes.paper,
                }, open: true, anchorEl: rubberBandRef.current, anchorOrigin: {
                    vertical: 'top',
                    horizontal: 'right',
                }, transformOrigin: {
                    vertical: 'bottom',
                    horizontal: 'left',
                }, keepMounted: true, disableRestoreFocus: true },
                React.createElement(Typography, null, rightBpOffset ? stringify(rightBpOffset) : '')))) : null,
        React.createElement("div", { ref: rubberBandRef, className: classes.rubberBand, style: {
                left,
                width: Math.abs(width),
                height: HEADER_OVERVIEW_HEIGHT,
            } }),
        React.createElement("div", { "data-testid": "rubberBand_controls", className: classes.rubberBandControl, role: "presentation", ref: controlsRef, onMouseDown: mouseDown, onMouseOut: mouseOut, onMouseMove: mouseMove }, ControlComponent)));
}
export default observer(OverviewRubberBand);
//# sourceMappingURL=OverviewRubberBand.js.map
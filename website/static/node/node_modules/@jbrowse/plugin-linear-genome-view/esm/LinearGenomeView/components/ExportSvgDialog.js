import React, { useState } from 'react';
import { makeStyles } from 'tss-react/mui';
import { Button, Checkbox, CircularProgress, Dialog, DialogActions, DialogContent, DialogTitle, FormControlLabel, IconButton, TextField, Typography, } from '@mui/material';
import { ErrorMessage } from '@jbrowse/core/ui';
import CloseIcon from '@mui/icons-material/Close';
const useStyles = makeStyles()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
}));
function LoadingMessage() {
    return (React.createElement("div", null,
        React.createElement(CircularProgress, { size: 20, style: { marginRight: 20 } }),
        React.createElement(Typography, { display: "inline" }, "Creating SVG")));
}
export default function ExportSvgDlg({ model, handleClose, }) {
    // @ts-ignore
    const offscreenCanvas = typeof OffscreenCanvas !== 'undefined';
    const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas);
    const [loading, setLoading] = useState(false);
    const [filename, setFilename] = useState('jbrowse.svg');
    const [error, setError] = useState();
    const { classes } = useStyles();
    return (React.createElement(Dialog, { open: true, onClose: handleClose },
        React.createElement(DialogTitle, null,
            "Export SVG",
            React.createElement(IconButton, { className: classes.closeButton, onClick: handleClose },
                React.createElement(CloseIcon, null))),
        React.createElement(DialogContent, null,
            error ? (React.createElement(ErrorMessage, { error: error })) : loading ? (React.createElement(LoadingMessage, null)) : null,
            React.createElement(TextField, { helperText: "filename", value: filename, onChange: event => setFilename(event.target.value) }),
            offscreenCanvas ? (React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: rasterizeLayers, onChange: () => setRasterizeLayers(val => !val) }), label: "Rasterize canvas based tracks? File may be much larger if this is turned off" })) : (React.createElement(Typography, null, "Note: rasterizing layers not yet supported in this browser, so SVG size may be large"))),
        React.createElement(DialogActions, null,
            React.createElement(Button, { variant: "contained", color: "secondary", onClick: () => handleClose() }, "Cancel"),
            React.createElement(Button, { variant: "contained", color: "primary", type: "submit", onClick: async () => {
                    setLoading(true);
                    setError(undefined);
                    try {
                        await model.exportSvg({ rasterizeLayers, filename });
                        handleClose();
                    }
                    catch (e) {
                        console.error(e);
                        setError(e);
                        setLoading(false);
                    }
                } }, "Submit"))));
}
//# sourceMappingURL=ExportSvgDialog.js.map
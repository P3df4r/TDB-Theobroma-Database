import React from 'react';
import { Button, Paper, Typography } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { TrackSelector as TrackSelectorIcon } from '@jbrowse/core/ui/Icons';
import { LoadingEllipses } from '@jbrowse/core/ui';
import { observer } from 'mobx-react';
import TrackContainer from './TrackContainer';
import TracksContainer from './TracksContainer';
import ImportForm from './ImportForm';
import GetSequenceDialog from './GetSequenceDialog';
import SearchResultsDialog from './SearchResultsDialog';
const useStyles = makeStyles()(theme => ({
    note: {
        textAlign: 'center',
        paddingTop: theme.spacing(1),
        paddingBottom: theme.spacing(1),
    },
}));
const LinearGenomeView = observer(({ model }) => {
    const { tracks, error, initialized, hasDisplayedRegions } = model;
    const { classes } = useStyles();
    if (!initialized && !error) {
        return React.createElement(LoadingEllipses, { variant: "h5" });
    }
    if (!hasDisplayedRegions || error) {
        return React.createElement(ImportForm, { model: model });
    }
    const MiniControlsComponent = model.MiniControlsComponent();
    const HeaderComponent = model.HeaderComponent();
    return (React.createElement("div", { style: { position: 'relative' } },
        model.seqDialogDisplayed ? (React.createElement(GetSequenceDialog, { model: model, handleClose: () => model.setGetSequenceDialogOpen(false) })) : null,
        model.isSearchDialogDisplayed ? (React.createElement(SearchResultsDialog, { model: model, handleClose: () => model.setSearchResults(undefined, undefined) })) : null,
        React.createElement(HeaderComponent, { model: model }),
        React.createElement(MiniControlsComponent, { model: model }),
        React.createElement(TracksContainer, { model: model }, !tracks.length ? (React.createElement(Paper, { variant: "outlined", className: classes.note }, !model.hideNoTracksActive ? (React.createElement(React.Fragment, null,
            React.createElement(Typography, null, "No tracks active."),
            React.createElement(Button, { variant: "contained", color: "primary", onClick: model.activateTrackSelector, style: { zIndex: 1000 }, startIcon: React.createElement(TrackSelectorIcon, null) }, "Open track selector"))) : (React.createElement("div", { style: { height: '48px' } })))) : (tracks.map(track => (React.createElement(TrackContainer, { key: track.id, model: model, track: track })))))));
});
export default LinearGenomeView;
//# sourceMappingURL=LinearGenomeView.js.map
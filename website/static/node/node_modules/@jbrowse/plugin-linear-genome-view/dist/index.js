"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchBox = exports.RefNameAutocomplete = exports.BaseLinearDisplay = exports.BaseLinearDisplayComponent = exports.renderToSvg = exports.linearBasicDisplayModelFactory = exports.linearBasicDisplayConfigSchemaFactory = exports.linearBareDisplayConfigSchemaFactory = exports.baseLinearDisplayConfigSchema = void 0;
const react_1 = require("react");
const mobx_1 = require("mobx");
const DisplayType_1 = __importDefault(require("@jbrowse/core/pluggableElementTypes/DisplayType"));
const ViewType_1 = __importDefault(require("@jbrowse/core/pluggableElementTypes/ViewType"));
const Plugin_1 = __importDefault(require("@jbrowse/core/Plugin"));
const util_1 = require("@jbrowse/core/util");
const LineStyle_1 = __importDefault(require("@mui/icons-material/LineStyle"));
const BaseLinearDisplay_1 = require("./BaseLinearDisplay");
Object.defineProperty(exports, "BaseLinearDisplay", { enumerable: true, get: function () { return BaseLinearDisplay_1.BaseLinearDisplay; } });
Object.defineProperty(exports, "BaseLinearDisplayComponent", { enumerable: true, get: function () { return BaseLinearDisplay_1.BaseLinearDisplayComponent; } });
Object.defineProperty(exports, "baseLinearDisplayConfigSchema", { enumerable: true, get: function () { return BaseLinearDisplay_1.baseLinearDisplayConfigSchema; } });
const LinearBareDisplay_1 = require("./LinearBareDisplay");
Object.defineProperty(exports, "linearBareDisplayConfigSchemaFactory", { enumerable: true, get: function () { return LinearBareDisplay_1.configSchemaFactory; } });
const LinearGenomeView_1 = require("./LinearGenomeView");
Object.defineProperty(exports, "renderToSvg", { enumerable: true, get: function () { return LinearGenomeView_1.renderToSvg; } });
Object.defineProperty(exports, "RefNameAutocomplete", { enumerable: true, get: function () { return LinearGenomeView_1.RefNameAutocomplete; } });
Object.defineProperty(exports, "SearchBox", { enumerable: true, get: function () { return LinearGenomeView_1.SearchBox; } });
const LinearBasicDisplay_1 = require("./LinearBasicDisplay");
Object.defineProperty(exports, "linearBasicDisplayConfigSchemaFactory", { enumerable: true, get: function () { return LinearBasicDisplay_1.configSchema; } });
Object.defineProperty(exports, "linearBasicDisplayModelFactory", { enumerable: true, get: function () { return LinearBasicDisplay_1.modelFactory; } });
const FeatureTrack_1 = __importDefault(require("./FeatureTrack"));
const BasicTrack_1 = __importDefault(require("./BasicTrack"));
class LinearGenomeViewPlugin extends Plugin_1.default {
    constructor() {
        super(...arguments);
        this.name = 'LinearGenomeViewPlugin';
        this.exports = {
            BaseLinearDisplayComponent: BaseLinearDisplay_1.BaseLinearDisplayComponent,
            BaseLinearDisplay: BaseLinearDisplay_1.BaseLinearDisplay,
            baseLinearDisplayConfigSchema: BaseLinearDisplay_1.baseLinearDisplayConfigSchema,
            SearchBox: LinearGenomeView_1.SearchBox,
            ZoomControls: LinearGenomeView_1.ZoomControls,
            LinearGenomeView: LinearGenomeView_1.LinearGenomeView,
        };
    }
    install(pluginManager) {
        (0, FeatureTrack_1.default)(pluginManager);
        (0, BasicTrack_1.default)(pluginManager);
        pluginManager.addDisplayType(() => {
            const configSchema = (0, LinearBareDisplay_1.configSchemaFactory)(pluginManager);
            return new DisplayType_1.default({
                name: 'LinearBareDisplay',
                configSchema,
                stateModel: (0, LinearBareDisplay_1.stateModelFactory)(configSchema),
                trackType: 'BasicTrack',
                viewType: 'LinearGenomeView',
                ReactComponent: BaseLinearDisplay_1.BaseLinearDisplayComponent,
            });
        });
        pluginManager.addDisplayType(() => {
            const configSchema = (0, LinearBasicDisplay_1.configSchema)(pluginManager);
            return new DisplayType_1.default({
                name: 'LinearBasicDisplay',
                configSchema,
                stateModel: (0, LinearBasicDisplay_1.modelFactory)(configSchema),
                trackType: 'FeatureTrack',
                viewType: 'LinearGenomeView',
                ReactComponent: BaseLinearDisplay_1.BaseLinearDisplayComponent,
            });
        });
        pluginManager.addViewType(() => new ViewType_1.default({
            name: 'LinearGenomeView',
            stateModel: (0, LinearGenomeView_1.stateModelFactory)(pluginManager),
            ReactComponent: (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./LinearGenomeView/components/LinearGenomeView')))),
        }));
        pluginManager.addToExtensionPoint('LaunchView-LinearGenomeView', 
        // @ts-ignore
        async ({ session, assembly, loc, tracks = [], }) => {
            try {
                const { assemblyManager } = session;
                const view = session.addView('LinearGenomeView', {});
                await (0, mobx_1.when)(() => !!view.volatileWidth);
                if (!assembly) {
                    throw new Error('No assembly provided when launching linear genome view');
                }
                const asm = await assemblyManager.waitForAssembly(assembly);
                if (!asm) {
                    throw new Error(`Assembly "${assembly}" not found when launching linear genome view`);
                }
                view.navToLocString(loc, assembly);
                const idsNotFound = [];
                tracks.forEach(track => {
                    try {
                        view.showTrack(track);
                    }
                    catch (e) {
                        if (`${e}`.match('Could not resolve identifier')) {
                            idsNotFound.push(track);
                        }
                        else {
                            throw e;
                        }
                    }
                });
                if (idsNotFound.length) {
                    throw new Error(`Could not resolve identifiers: ${idsNotFound.join(',')}`);
                }
            }
            catch (e) {
                session.notify(`${e}`, 'error');
                throw e;
            }
        });
    }
    configure(pluginManager) {
        if ((0, util_1.isAbstractMenuManager)(pluginManager.rootModel)) {
            pluginManager.rootModel.appendToSubMenu(['Add'], {
                label: 'Linear genome view',
                icon: LineStyle_1.default,
                onClick: (session) => {
                    session.addView('LinearGenomeView', {});
                },
            });
        }
    }
}
exports.default = LinearGenomeViewPlugin;
//# sourceMappingURL=index.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const configuration_1 = require("@jbrowse/core/configuration");
const CascadingMenu_1 = __importDefault(require("@jbrowse/core/ui/CascadingMenu"));
const util_1 = require("@jbrowse/core/util");
const tracks_1 = require("@jbrowse/core/util/tracks");
const hooks_1 = require("material-ui-popup-state/hooks");
// icons
const MoreVert_1 = __importDefault(require("@mui/icons-material/MoreVert"));
const DragIndicator_1 = __importDefault(require("@mui/icons-material/DragIndicator"));
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const Minimize_1 = __importDefault(require("@mui/icons-material/Minimize"));
const Add_1 = __importDefault(require("@mui/icons-material/Add"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    root: {
        background: (0, material_1.alpha)(theme.palette.background.paper, 0.8),
        '&:hover': {
            background: theme.palette.background.paper,
        },
        transition: theme.transitions.create(['background'], {
            duration: theme.transitions.duration.shortest,
        }),
    },
    trackName: {
        margin: '0 auto',
        width: '90%',
        fontSize: '0.8rem',
        pointerEvents: 'none',
    },
    dragHandle: {
        cursor: 'grab',
        color: '#135560',
    },
    dragHandleIcon: {
        display: 'inline-block',
        verticalAlign: 'middle',
        pointerEvents: 'none',
    },
    iconButton: {
        padding: theme.spacing(1),
    },
}));
const TrackLabel = react_1.default.forwardRef(({ track, className }, ref) => {
    var _a;
    const { classes, cx } = useStyles();
    const view = (0, util_1.getContainingView)(track);
    const session = (0, util_1.getSession)(track);
    const trackConf = track.configuration;
    const minimized = track.minimized;
    const trackId = (0, configuration_1.getConf)(track, 'trackId');
    const trackName = (0, tracks_1.getTrackName)(trackConf, session);
    const popupState = (0, hooks_1.usePopupState)({
        popupId: 'trackLabelMenu',
        variant: 'popover',
    });
    const items = [
        {
            label: minimized ? 'Restore track' : 'Minimize track',
            icon: minimized ? Add_1.default : Minimize_1.default,
            onClick: () => track.setMinimized(!minimized),
        },
        ...(((_a = session.getTrackActionMenuItems) === null || _a === void 0 ? void 0 : _a.call(session, trackConf)) || []),
        ...track.trackMenuItems(),
    ].sort((a, b) => (b.priority || 0) - (a.priority || 0));
    return (react_1.default.createElement(material_1.Paper, { ref: ref, className: cx(className, classes.root) },
        react_1.default.createElement("span", { draggable: true, className: classes.dragHandle, onDragStart: event => {
                const target = event.currentTarget;
                if (target.parentNode) {
                    const parent = target.parentNode;
                    event.dataTransfer.setDragImage(parent, 20, 20);
                    view.setDraggingTrackId(track.id);
                }
            }, onDragEnd: () => view.setDraggingTrackId(undefined), "data-testid": `dragHandle-${view.id}-${trackId}` },
            react_1.default.createElement(DragIndicator_1.default, { className: classes.dragHandleIcon, fontSize: "small" })),
        react_1.default.createElement(material_1.IconButton, { onClick: () => view.hideTrack(trackId), className: classes.iconButton, title: "close this track", color: "secondary" },
            react_1.default.createElement(Close_1.default, { fontSize: "small" })),
        react_1.default.createElement(material_1.Typography, { variant: "body1", component: "span", className: classes.trackName }, trackName + (minimized ? ' (minimized)' : '')),
        react_1.default.createElement(material_1.IconButton, { ...(0, hooks_1.bindTrigger)(popupState), className: classes.iconButton, color: "secondary", "data-testid": "track_menu_icon", disabled: !items.length },
            react_1.default.createElement(MoreVert_1.default, { fontSize: "small" })),
        react_1.default.createElement(CascadingMenu_1.default, { ...(0, hooks_1.bindPopover)(popupState), onMenuItemClick: (_, callback) => callback(), menuItems: items, popupState: popupState })));
});
exports.default = (0, mobx_react_1.observer)(TrackLabel);
//# sourceMappingURL=TrackLabel.js.map
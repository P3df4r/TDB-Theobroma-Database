"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitLast = exports.fetchResults = exports.dedupe = void 0;
const BaseResults_1 = __importDefault(require("@jbrowse/core/TextSearch/BaseResults"));
function dedupe(results = [], cb) {
    return results.filter((elt, idx, self) => idx === self.findIndex(t => cb(t) === cb(elt)));
}
exports.dedupe = dedupe;
async function fetchResults({ queryString, searchType, searchScope, rankSearchResults, textSearchManager, assembly, }) {
    var _a;
    if (!textSearchManager) {
        console.warn('No text search manager');
    }
    const textSearchResults = await (textSearchManager === null || textSearchManager === void 0 ? void 0 : textSearchManager.search({
        queryString,
        searchType,
    }, searchScope, rankSearchResults));
    const refNameResults = (_a = assembly === null || assembly === void 0 ? void 0 : assembly.allRefNames) === null || _a === void 0 ? void 0 : _a.filter(ref => ref.toLowerCase().startsWith(queryString.toLowerCase())).slice(0, 10).map(r => new BaseResults_1.default({ label: r }));
    return dedupe([...(refNameResults || []), ...(textSearchResults || [])], elt => elt.getId());
}
exports.fetchResults = fetchResults;
// splits on the last instance of a character
function splitLast(str, split) {
    const lastIndex = str.lastIndexOf(split);
    if (lastIndex === -1) {
        return [str, ''];
    }
    else {
        const before = str.slice(0, lastIndex);
        const after = str.slice(lastIndex + 1);
        return [before, after];
    }
}
exports.splitLast = splitLast;
//# sourceMappingURL=util.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Polygon = exports.Cytobands = void 0;
const react_1 = __importDefault(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const Base1DViewModel_1 = __importDefault(require("@jbrowse/core/util/Base1DViewModel"));
const util_1 = require("@jbrowse/core/util");
const blockTypes_1 = require("@jbrowse/core/util/blockTypes");
// locals
const __1 = require("..");
const util_2 = require("../util");
const OverviewRubberBand_1 = __importDefault(require("./OverviewRubberBand"));
const wholeSeqSpacer = 2;
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    scaleBar: {
        height: __1.HEADER_OVERVIEW_HEIGHT,
    },
    scaleBarBorder: {
        border: '1px solid',
    },
    scaleBarContig: {
        backgroundColor: theme.palette.background.default,
        position: 'absolute',
        top: 0,
        height: __1.HEADER_OVERVIEW_HEIGHT,
    },
    scaleBarContigForward: {
        backgroundImage: `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 15 9'%3E%3Cpath d='M-.1 0L6 4.5L-.1 9' fill='none' stroke='%23ddd'/%3E%3C/svg%3E")`,
        backgroundRepeat: 'repeat',
    },
    scaleBarContigReverse: {
        backgroundImage: `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 15 9'%3E%3Cpath d='M6 0L0 4.5L6 9' fill='none' stroke='%23ddd'/%3E%3C/svg%3E")`,
        backgroundRepeat: 'repeat',
    },
    scaleBarRefName: {
        position: 'absolute',
        fontWeight: 'bold',
        pointerEvents: 'none',
        zIndex: 100,
    },
    scaleBarLabel: {
        height: __1.HEADER_OVERVIEW_HEIGHT,
        position: 'absolute',
        display: 'flex',
        justifyContent: 'center',
        pointerEvents: 'none',
    },
    scaleBarVisibleRegion: {
        position: 'absolute',
        height: __1.HEADER_OVERVIEW_HEIGHT,
        pointerEvents: 'none',
        zIndex: 100,
        border: '1px solid',
    },
    overview: {
        height: __1.HEADER_BAR_HEIGHT,
        position: 'relative',
    },
    overviewSvg: {
        width: '100%',
        position: 'absolute',
    },
}));
const Polygon = (0, mobx_react_1.observer)(({ model, overview, useOffset = true, }) => {
    const theme = (0, material_1.useTheme)();
    const multiplier = Number(useOffset);
    const { interRegionPaddingWidth, offsetPx, dynamicBlocks, cytobandOffset } = model;
    const { contentBlocks, totalWidthPxWithoutBorders } = dynamicBlocks;
    const { tertiary, primary } = theme.palette;
    const polygonColor = tertiary ? tertiary.light : primary.light;
    if (!contentBlocks.length) {
        return null;
    }
    const first = contentBlocks[0];
    const last = contentBlocks[contentBlocks.length - 1];
    const topLeft = (overview.bpToPx({
        ...first,
        coord: first.reversed ? first.end : first.start,
    }) || 0) +
        cytobandOffset * multiplier;
    const topRight = (overview.bpToPx({
        ...last,
        coord: last.reversed ? last.start : last.end,
    }) || 0) +
        cytobandOffset * multiplier;
    const startPx = Math.max(0, -offsetPx);
    const endPx = startPx +
        totalWidthPxWithoutBorders +
        (contentBlocks.length * interRegionPaddingWidth) / 2;
    const points = [
        [startPx, __1.HEADER_BAR_HEIGHT],
        [endPx, __1.HEADER_BAR_HEIGHT],
        [topRight, 0],
        [topLeft, 0],
    ];
    return (react_1.default.createElement("polygon", { points: points.toString(), fill: (0, material_1.alpha)(polygonColor, 0.3), stroke: (0, material_1.alpha)(polygonColor, 0.8) }));
});
exports.Polygon = Polygon;
// rounded rect from https://stackoverflow.com/a/45889603/2129219
// prettier-ignore
function rightRoundedRect(x, y, width, height, radius) {
    return "M" + x + "," + y
        + "h" + (width - radius)
        + "a" + radius + "," + radius + " 0 0 1 " + radius + "," + radius
        + "v" + (height - 2 * radius)
        + "a" + radius + "," + radius + " 0 0 1 " + -radius + "," + radius
        + "h" + (radius - width)
        + "z";
}
// prettier-ignore
function leftRoundedRect(x, y, width, height, radius) {
    return "M" + (x + radius) + "," + y
        + "h" + (width - radius)
        + "v" + height
        + "h" + (radius - width)
        + "a" + radius + "," + radius + " 0 0 1 " + (-radius) + "," + (-radius)
        + "v" + (2 * radius - height)
        + "a" + radius + "," + radius + " 0 0 1 " + radius + "," + (-radius)
        + "z";
}
const colorMap = {
    gneg: 'rgb(227,227,227)',
    gpos25: 'rgb(142,142,142)',
    gpos50: 'rgb(85,85,85)',
    gpos100: 'rgb(0,0,0)',
    gpos75: 'rgb(57,57,57)',
    gvar: 'rgb(0,0,0)',
    stalk: 'rgb(127,127,127)',
    acen: '#800',
};
function getCytobands(assembly, refName) {
    var _a;
    return (((_a = assembly === null || assembly === void 0 ? void 0 : assembly.cytobands) === null || _a === void 0 ? void 0 : _a.map(f => ({
        refName: assembly.getCanonicalRefName(f.get('refName')),
        start: f.get('start'),
        end: f.get('end'),
        type: f.get('type'),
    })).filter(f => f.refName === refName)) || []);
}
const Cytobands = (0, mobx_react_1.observer)(({ overview, block, assembly, }) => {
    const { offsetPx, reversed } = block;
    const cytobands = getCytobands(assembly, block.refName);
    const coords = cytobands.map(f => {
        const { refName, start, end, type } = f;
        return [
            overview.bpToPx({
                refName,
                coord: start,
            }),
            overview.bpToPx({
                refName,
                coord: end,
            }),
            type,
        ];
    });
    const arr = cytobands || [];
    const lcap = reversed ? arr.length - 1 : 0;
    const rcap = reversed ? 0 : arr.length - 1;
    let firstCent = true;
    return (react_1.default.createElement("g", { transform: `translate(-${offsetPx})` }, coords.map(([start, end, type], index) => {
        const key = `${start}-${end}-${type}`;
        if (type === 'acen' && firstCent) {
            firstCent = false;
            return (react_1.default.createElement("polygon", { key: key, points: [
                    [start, 0],
                    [end, __1.HEADER_OVERVIEW_HEIGHT / 2],
                    [start, __1.HEADER_OVERVIEW_HEIGHT],
                ].toString(), fill: colorMap[type] }));
        }
        if (type === 'acen' && !firstCent) {
            return (react_1.default.createElement("polygon", { key: key, points: [
                    [start, __1.HEADER_OVERVIEW_HEIGHT / 2],
                    [end, 0],
                    [end, __1.HEADER_OVERVIEW_HEIGHT],
                ].toString(), fill: colorMap[type] }));
        }
        if (lcap === index) {
            return (react_1.default.createElement("path", { key: key, d: leftRoundedRect(Math.min(start, end), 0, Math.abs(end - start), __1.HEADER_OVERVIEW_HEIGHT, 8), fill: colorMap[type] }));
        }
        else if (rcap === index) {
            return (react_1.default.createElement("path", { key: key, d: rightRoundedRect(Math.min(start, end), 0, Math.abs(end - start) - 2, __1.HEADER_OVERVIEW_HEIGHT, 8), fill: colorMap[type] }));
        }
        else {
            return (react_1.default.createElement("rect", { key: key, x: Math.min(start, end), y: 0, width: Math.abs(end - start), height: __1.HEADER_OVERVIEW_HEIGHT, fill: colorMap[type] }));
        }
    })));
});
exports.Cytobands = Cytobands;
const OverviewBox = (0, mobx_react_1.observer)(({ scale, model, block, overview, }) => {
    const { classes, cx } = useStyles();
    const { cytobandOffset, showCytobands } = model;
    const { start, end, reversed, refName, assemblyName } = block;
    const { majorPitch } = (0, util_2.chooseGridPitch)(scale, 120, 15);
    const { assemblyManager } = (0, util_1.getSession)(model);
    const assembly = assemblyManager.get(assemblyName);
    const refNameColor = assembly === null || assembly === void 0 ? void 0 : assembly.getRefNameColor(refName);
    const tickLabels = [];
    for (let i = 0; i < Math.floor((end - start) / majorPitch); i++) {
        const offsetLabel = (i + 1) * majorPitch;
        tickLabels.push(reversed ? end - offsetLabel : start + offsetLabel);
    }
    const canDisplayCytobands = showCytobands && getCytobands(assembly, block.refName).length;
    return (react_1.default.createElement("div", null,
        react_1.default.createElement(material_1.Typography, { style: {
                left: block.offsetPx + 3,
                color: canDisplayCytobands ? 'black' : refNameColor,
            }, className: classes.scaleBarRefName }, refName),
        react_1.default.createElement("div", { className: cx(classes.scaleBarContig, canDisplayCytobands
                ? undefined
                : reversed
                    ? classes.scaleBarContigReverse
                    : classes.scaleBarContigForward, !canDisplayCytobands ? classes.scaleBarBorder : undefined), style: {
                left: block.offsetPx + cytobandOffset,
                width: block.widthPx,
                borderColor: refNameColor,
            } },
            !canDisplayCytobands
                ? tickLabels.map((tickLabel, labelIdx) => (react_1.default.createElement(material_1.Typography, { key: `${JSON.stringify(block)}-${tickLabel}-${labelIdx}`, className: classes.scaleBarLabel, variant: "body2", style: {
                        left: ((labelIdx + 1) * majorPitch) / scale,
                        pointerEvents: 'none',
                        color: refNameColor,
                    } }, (0, util_1.getTickDisplayStr)(tickLabel, overview.bpPerPx))))
                : null,
            canDisplayCytobands ? (react_1.default.createElement("svg", { style: { width: '100%' } },
                react_1.default.createElement(Cytobands, { overview: overview, assembly: assembly, block: block }))) : null)));
});
const ScaleBar = (0, mobx_react_1.observer)(({ model, scale, overview, }) => {
    const { classes } = useStyles();
    const theme = (0, material_1.useTheme)();
    const { dynamicBlocks, showCytobands, cytobandOffset } = model;
    const visibleRegions = dynamicBlocks.contentBlocks;
    const overviewVisibleRegions = overview.dynamicBlocks;
    const { tertiary, primary } = theme.palette;
    const scaleBarColor = tertiary ? tertiary.light : primary.light;
    if (!visibleRegions.length) {
        return null;
    }
    const first = visibleRegions[0];
    const firstOverviewPx = overview.bpToPx({
        ...first,
        coord: first.reversed ? first.end : first.start,
    }) || 0;
    const last = visibleRegions[visibleRegions.length - 1];
    const lastOverviewPx = overview.bpToPx({
        ...last,
        coord: last.reversed ? last.start : last.end,
    }) || 0;
    const color = showCytobands ? '#f00' : scaleBarColor;
    const transparency = showCytobands ? 0.1 : 0.3;
    return (react_1.default.createElement("div", { className: classes.scaleBar },
        react_1.default.createElement("div", { className: classes.scaleBarVisibleRegion, style: {
                width: lastOverviewPx - firstOverviewPx,
                left: firstOverviewPx + cytobandOffset,
                background: (0, material_1.alpha)(color, transparency),
                borderColor: color,
            } }),
        overviewVisibleRegions.map((block, idx) => {
            return !(block instanceof blockTypes_1.ContentBlock) ? (react_1.default.createElement("div", { key: `${JSON.stringify(block)}-${idx}`, className: classes.scaleBarContig, style: {
                    width: block.widthPx,
                    left: block.offsetPx,
                    backgroundColor: '#999',
                    backgroundImage: 'repeating-linear-gradient(90deg, transparent, transparent 1px, rgba(255,255,255,.5) 1px, rgba(255,255,255,.5) 3px)',
                } })) : (react_1.default.createElement(OverviewBox, { scale: scale, block: block, model: model, overview: overview, key: `${JSON.stringify(block)}-${idx}` }));
        })));
});
function OverviewScaleBar({ model, children, }) {
    const { classes } = useStyles();
    const { totalBp, width, cytobandOffset, displayedRegions } = model;
    const overview = Base1DViewModel_1.default.create({
        displayedRegions: JSON.parse(JSON.stringify(displayedRegions)),
        interRegionPaddingWidth: 0,
        minimumBlockWidth: model.minimumBlockWidth,
    });
    const modWidth = width - cytobandOffset;
    overview.setVolatileWidth(modWidth);
    overview.showAllRegions();
    const scale = totalBp / (modWidth - (displayedRegions.length - 1) * wholeSeqSpacer);
    return (react_1.default.createElement("div", null,
        react_1.default.createElement(OverviewRubberBand_1.default, { model: model, overview: overview, ControlComponent: react_1.default.createElement(ScaleBar, { model: model, overview: overview, scale: scale }) }),
        react_1.default.createElement("div", { className: classes.overview },
            react_1.default.createElement("svg", { height: __1.HEADER_BAR_HEIGHT, className: classes.overviewSvg },
                react_1.default.createElement(Polygon, { model: model, overview: overview })),
            children)));
}
exports.default = (0, mobx_react_1.observer)(OverviewScaleBar);
//# sourceMappingURL=OverviewScaleBar.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const mobx_state_tree_1 = require("mobx-state-tree");
const configuration_1 = require("@jbrowse/core/configuration");
const ui_1 = require("@jbrowse/core/ui");
const react_error_boundary_1 = require("react-error-boundary");
const util_1 = require("@jbrowse/core/util");
const TrackLabel_1 = __importDefault(require("./TrackLabel"));
const useStyles = (0, mui_1.makeStyles)()({
    root: {
        marginTop: 2,
    },
    resizeHandle: {
        height: 3,
        boxSizing: 'border-box',
        position: 'relative',
        zIndex: 2,
    },
    overlay: {
        pointerEvents: 'none',
        position: 'absolute',
        top: 0,
        left: 0,
        width: '100%',
        zIndex: 3,
    },
    trackLabel: {
        zIndex: 3,
    },
    // aligns with block bounderies. check for example the breakpoint split view
    // demo to see if features align if wanting to change things
    renderingComponentContainer: {
        position: 'absolute',
        // -1 offset because of the 1px border of the Paper
        left: -1,
        height: '100%',
        width: '100%',
    },
    trackLabelOffset: {
        position: 'relative',
        display: 'inline-block',
    },
    trackLabelOverlap: {
        position: 'absolute',
    },
    trackRenderingContainer: {
        overflowY: 'auto',
        overflowX: 'hidden',
        whiteSpace: 'nowrap',
        position: 'relative',
        background: 'none',
        zIndex: 2,
    },
});
const TrackContainerLabel = (0, mobx_react_1.observer)(({ model, view }) => {
    const { classes, cx } = useStyles();
    const display = model.displays[0];
    const { trackLabel, trackLabelOverlap, trackLabelOffset } = classes;
    const labelStyle = view.trackLabels !== 'overlapping' || display.prefersOffset
        ? trackLabelOffset
        : trackLabelOverlap;
    return view.trackLabels !== 'hidden' ? (react_1.default.createElement(TrackLabel_1.default, { track: model, className: cx(trackLabel, labelStyle) })) : null;
});
function TrackContainer({ model, track, }) {
    const { classes } = useStyles();
    const display = track.displays[0];
    const { horizontalScroll, draggingTrackId, moveTrack } = model;
    const { height, RenderingComponent, DisplayBlurb } = display;
    const trackId = (0, configuration_1.getConf)(track, 'trackId');
    const ref = (0, react_1.useRef)(null);
    const dimmed = draggingTrackId !== undefined && draggingTrackId !== display.id;
    const minimized = track.minimized;
    const debouncedOnDragEnter = (0, util_1.useDebouncedCallback)(() => {
        if ((0, mobx_state_tree_1.isAlive)(display) && dimmed) {
            moveTrack(draggingTrackId, track.id);
        }
    }, 100);
    (0, react_1.useEffect)(() => {
        if (ref.current) {
            model.trackRefs[trackId] = ref.current;
        }
        return () => {
            delete model.trackRefs[trackId];
        };
    }, [model.trackRefs, trackId]);
    return (react_1.default.createElement(material_1.Paper, { className: classes.root, variant: "outlined" },
        react_1.default.createElement(TrackContainerLabel, { model: track, view: model }),
        react_1.default.createElement(react_error_boundary_1.ErrorBoundary, { key: track.id, FallbackComponent: ({ error }) => react_1.default.createElement(ui_1.ErrorMessage, { error: error }) },
            react_1.default.createElement("div", { className: classes.trackRenderingContainer, style: { height: minimized ? 20 : height }, onScroll: evt => display.setScrollTop(evt.currentTarget.scrollTop), onDragEnter: debouncedOnDragEnter, "data-testid": `trackRenderingContainer-${model.id}-${trackId}` }, !minimized ? (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("div", { ref: ref, className: classes.renderingComponentContainer, style: { transform: `scaleX(${model.scaleFactor})` } },
                    react_1.default.createElement(RenderingComponent, { model: display, onHorizontalScroll: horizontalScroll })),
                DisplayBlurb ? (react_1.default.createElement("div", { style: {
                        position: 'absolute',
                        left: 0,
                        top: display.height - 20,
                    } },
                    react_1.default.createElement(DisplayBlurb, { model: display }))) : null)) : null)),
        react_1.default.createElement("div", { className: classes.overlay, style: {
                height: display.height,
                background: dimmed ? 'rgba(0, 0, 0, 0.4)' : undefined,
            }, onDragEnter: debouncedOnDragEnter }),
        react_1.default.createElement(ui_1.ResizeHandle, { onDrag: display.resizeHeight, className: classes.resizeHandle })));
}
exports.default = (0, mobx_react_1.observer)(TrackContainer);
//# sourceMappingURL=TrackContainer.js.map
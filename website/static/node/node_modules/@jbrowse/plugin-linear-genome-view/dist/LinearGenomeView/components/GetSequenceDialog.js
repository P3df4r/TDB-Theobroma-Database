"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mui_1 = require("tss-react/mui");
const material_1 = require("@mui/material");
const mobx_react_1 = require("mobx-react");
const file_saver_1 = require("file-saver");
const configuration_1 = require("@jbrowse/core/configuration");
const copy_to_clipboard_1 = __importDefault(require("copy-to-clipboard"));
const util_1 = require("@jbrowse/core/util");
const formatFastaStrings_1 = require("@jbrowse/core/util/formatFastaStrings");
// icons
const Icons_1 = require("@jbrowse/core/ui/Icons");
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const GetApp_1 = __importDefault(require("@mui/icons-material/GetApp"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    dialogContent: {
        width: '80em',
    },
    textAreaFont: {
        fontFamily: 'Courier New',
    },
}));
/**
 * Fetches and returns a list features for a given list of regions
 */
async function fetchSequence(model, regions, signal) {
    const session = (0, util_1.getSession)(model);
    const { leftOffset, rightOffset } = model;
    if (!leftOffset || !rightOffset) {
        throw new Error('no offsets on model to use for range');
    }
    if (leftOffset.assemblyName !== rightOffset.assemblyName) {
        throw new Error('not able to fetch sequences from multiple assemblies');
    }
    const { rpcManager, assemblyManager } = session;
    const assemblyName = leftOffset.assemblyName || rightOffset.assemblyName || '';
    const assembly = assemblyManager.get(assemblyName);
    if (!assembly) {
        throw new Error(`assembly ${assemblyName} not found`);
    }
    const adapterConfig = (0, configuration_1.getConf)(assembly, ['sequence', 'adapter']);
    const sessionId = 'getSequence';
    return rpcManager.call(sessionId, 'CoreGetFeatures', {
        adapterConfig,
        regions,
        sessionId,
        signal,
    });
}
function SequenceDialog({ model, handleClose, }) {
    const { classes } = useStyles();
    const session = (0, util_1.getSession)(model);
    const [error, setError] = (0, react_1.useState)();
    const [sequence, setSequence] = (0, react_1.useState)();
    const loading = Boolean(sequence === undefined);
    const { leftOffset, rightOffset } = model;
    // avoid infinite looping of useEffect
    // random note: the current selected region can't be a computed because it
    // uses action on base1dview even though it's on the ephemeral base1dview
    const regionsSelected = (0, react_1.useMemo)(() => model.getSelectedRegions(leftOffset, rightOffset), [model, leftOffset, rightOffset]);
    (0, react_1.useEffect)(() => {
        let active = true;
        const controller = new AbortController();
        (async () => {
            try {
                if (regionsSelected.length > 0) {
                    const chunks = await fetchSequence(model, regionsSelected, controller.signal);
                    if (active) {
                        setSequence((0, formatFastaStrings_1.formatSeqFasta)(chunks
                            .filter(f => !!f)
                            .map(chunk => {
                            const chunkSeq = chunk.get('seq');
                            const chunkRefName = chunk.get('refName');
                            const chunkStart = chunk.get('start') + 1;
                            const chunkEnd = chunk.get('end');
                            const chunkLocstring = `${chunkRefName}:${chunkStart}-${chunkEnd}`;
                            if ((chunkSeq === null || chunkSeq === void 0 ? void 0 : chunkSeq.length) !== chunkEnd - chunkStart + 1) {
                                throw new Error(`${chunkLocstring} returned ${chunkSeq.length.toLocaleString()} bases, but should have returned ${(chunkEnd - chunkStart).toLocaleString()}`);
                            }
                            return { header: chunkLocstring, seq: chunkSeq };
                        })));
                    }
                }
                else {
                    throw new Error('Selected region is out of bounds');
                }
            }
            catch (e) {
                console.error(e);
                if (active) {
                    setError(e);
                }
            }
        })();
        return () => {
            controller.abort();
            active = false;
        };
    }, [model, session, regionsSelected, setSequence]);
    const sequenceTooLarge = sequence ? sequence.length > 1000000 : false;
    return (react_1.default.createElement(material_1.Dialog, { maxWidth: "xl", open: true, onClose: handleClose },
        react_1.default.createElement(material_1.DialogTitle, null,
            "Reference sequence",
            handleClose ? (react_1.default.createElement(material_1.IconButton, { className: classes.closeButton, onClick: () => {
                    handleClose();
                    model.setOffsets(undefined, undefined);
                }, size: "large" },
                react_1.default.createElement(Close_1.default, null))) : null),
        react_1.default.createElement(material_1.Divider, null),
        react_1.default.createElement(material_1.DialogContent, null,
            error ? react_1.default.createElement(material_1.Typography, { color: "error" }, `${error}`) : null,
            loading && !error ? (react_1.default.createElement(material_1.Container, null,
                "Retrieving reference sequence...",
                react_1.default.createElement(material_1.CircularProgress, { style: {
                        marginLeft: 10,
                    }, size: 20, disableShrink: true }))) : null,
            react_1.default.createElement(material_1.TextField, { "data-testid": "rubberband-sequence", variant: "outlined", multiline: true, minRows: 5, disabled: sequenceTooLarge, className: classes.dialogContent, fullWidth: true, value: sequenceTooLarge
                    ? 'Reference sequence too large to display, use the download FASTA button'
                    : sequence, InputProps: {
                    readOnly: true,
                    classes: {
                        input: classes.textAreaFont,
                    },
                } })),
        react_1.default.createElement(material_1.DialogActions, null,
            react_1.default.createElement(material_1.Button, { onClick: () => {
                    (0, copy_to_clipboard_1.default)(sequence || '');
                    session.notify('Copied to clipboard', 'success');
                }, disabled: loading || !!error || sequenceTooLarge, color: "primary", startIcon: react_1.default.createElement(Icons_1.ContentCopy, null) }, "Copy to clipboard"),
            react_1.default.createElement(material_1.Button, { onClick: () => {
                    const seqFastaFile = new Blob([sequence || ''], {
                        type: 'text/x-fasta;charset=utf-8',
                    });
                    (0, file_saver_1.saveAs)(seqFastaFile, 'jbrowse_ref_seq.fa');
                }, disabled: loading || !!error, color: "primary", startIcon: react_1.default.createElement(GetApp_1.default, null) }, "Download FASTA"),
            react_1.default.createElement(material_1.Button, { onClick: handleClose, variant: "contained" }, "Close"))));
}
exports.default = (0, mobx_react_1.observer)(SequenceDialog);
//# sourceMappingURL=GetSequenceDialog.js.map
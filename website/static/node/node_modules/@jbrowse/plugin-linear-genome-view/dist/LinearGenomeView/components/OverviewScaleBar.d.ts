import React from 'react';
import { Base1DViewModel } from '@jbrowse/core/util/Base1DViewModel';
import { ContentBlock } from '@jbrowse/core/util/blockTypes';
import { Assembly } from '@jbrowse/core/assemblyManager/assembly';
import { LinearGenomeViewModel } from '..';
declare const Polygon: ({ model, overview, useOffset, }: {
    model: LGV;
    overview: Base1DViewModel;
    useOffset?: boolean | undefined;
}) => JSX.Element | null;
type LGV = LinearGenomeViewModel;
declare const Cytobands: ({ overview, block, assembly, }: {
    overview: Base1DViewModel;
    assembly?: ({
        configuration: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        error: unknown;
        loaded: boolean;
        loadingP: Promise<void> | undefined;
        volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
        refNameAliases: {
            [x: string]: string;
        } | undefined;
        lowerCaseRefNameAliases: {
            [x: string]: string;
        } | undefined;
        cytobands: import("@jbrowse/core/util").Feature[] | undefined;
    } & {
        readonly initialized: boolean;
        readonly name: string;
        readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
        readonly aliases: string[];
        readonly displayName: string | undefined;
        hasName(name: string): boolean;
        readonly allAliases: string[];
        readonly allRefNames: string[] | undefined;
        readonly lowerCaseRefNames: string[] | undefined;
        readonly allRefNamesWithLowerCase: string[] | undefined;
        readonly rpcManager: any;
        readonly refNameColors: string[];
    } & {
        readonly refNames: string[] | undefined;
    } & {
        getCanonicalRefName(refName: string): string;
        getRefNameColor(refName: string): string | undefined;
        isValidRefName(refName: string): boolean;
    } & {
        setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
        setError(e: unknown): void;
        setRegions(regions: import("@jbrowse/core/util").Region[]): void;
        setRefNameAliases(aliases: {
            [x: string]: string;
        }, lcAliases: {
            [x: string]: string;
        }): void;
        setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
        setLoadingP(p?: Promise<void> | undefined): void;
        load(): Promise<void>;
        loadPre(): Promise<void>;
    } & {
        getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
        getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
            [x: string]: string;
        }>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
            [x: string]: string;
        }>;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
    }, {
        error: unknown;
        loaded: boolean;
        loadingP: Promise<void> | undefined;
        volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
        refNameAliases: {
            [x: string]: string;
        } | undefined;
        lowerCaseRefNameAliases: {
            [x: string]: string;
        } | undefined;
        cytobands: import("@jbrowse/core/util").Feature[] | undefined;
    } & {
        readonly initialized: boolean;
        readonly name: string;
        readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
        readonly aliases: string[];
        readonly displayName: string | undefined;
        hasName(name: string): boolean;
        readonly allAliases: string[];
        readonly allRefNames: string[] | undefined;
        readonly lowerCaseRefNames: string[] | undefined;
        readonly allRefNamesWithLowerCase: string[] | undefined;
        readonly rpcManager: any;
        readonly refNameColors: string[];
    } & {
        readonly refNames: string[] | undefined;
    } & {
        getCanonicalRefName(refName: string): string;
        getRefNameColor(refName: string): string | undefined;
        isValidRefName(refName: string): boolean;
    } & {
        setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
        setError(e: unknown): void;
        setRegions(regions: import("@jbrowse/core/util").Region[]): void;
        setRefNameAliases(aliases: {
            [x: string]: string;
        }, lcAliases: {
            [x: string]: string;
        }): void;
        setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
        setLoadingP(p?: Promise<void> | undefined): void;
        load(): Promise<void>;
        loadPre(): Promise<void>;
    } & {
        getAdapterMapEntry(adapterConf: unknown, options: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
        getRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
            [x: string]: string;
        }>;
        getReverseRefNameMapForAdapter(adapterConf: unknown, opts: import("@jbrowse/core/assemblyManager/assembly").BaseOptions): Promise<{
            [x: string]: string;
        }>;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
    block: ContentBlock;
}) => JSX.Element;
declare function OverviewScaleBar({ model, children, }: {
    model: LGV;
    children: React.ReactNode;
}): JSX.Element;
declare const _default: typeof OverviewScaleBar;
export default _default;
export { Cytobands, Polygon };

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const prop_types_1 = __importDefault(require("prop-types"));
const react_1 = __importDefault(require("react"));
const util_1 = require("../util");
const util_2 = require("@jbrowse/core/util");
const useStyles = (0, mui_1.makeStyles)()(( /* theme */) => ({
    majorTickLabel: {
        fontSize: '11px',
        // fill: theme.palette.text.primary,
    },
    majorTick: {
        stroke: '#555',
        // stroke: theme.palette.text.secondary,
    },
    minorTick: {
        stroke: '#999',
        // stroke: theme.palette.text.hint,
    },
}));
function Ruler({ start, end, bpPerPx, reversed, major, minor, }) {
    const { classes } = useStyles();
    const ticks = (0, util_1.makeTicks)(start, end, bpPerPx, major, minor);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        ticks.map(tick => {
            const x = (reversed ? end - tick.base : tick.base - start) / bpPerPx;
            return (react_1.default.createElement("line", { key: tick.base, x1: x, x2: x, y1: 0, y2: tick.type === 'major' ? 6 : 4, strokeWidth: 1, stroke: tick.type === 'major' ? '#555' : '#999', className: tick.type === 'major' ? classes.majorTick : classes.minorTick, "data-bp": tick.base }));
        }),
        ticks
            .filter(tick => tick.type === 'major')
            .map(tick => {
            const x = (reversed ? end - tick.base : tick.base - start) / bpPerPx;
            return (react_1.default.createElement("text", { x: x - 3, y: 7 + 11, key: `label-${tick.base}`, style: { fontSize: '11px' }, className: classes.majorTickLabel }, (0, util_2.getTickDisplayStr)(tick.base + 1, bpPerPx)));
        })));
}
Ruler.propTypes = {
    start: prop_types_1.default.number.isRequired,
    end: prop_types_1.default.number.isRequired,
    bpPerPx: prop_types_1.default.number.isRequired,
    reversed: prop_types_1.default.bool,
    major: prop_types_1.default.bool,
    minor: prop_types_1.default.bool,
};
Ruler.defaultProps = {
    reversed: false,
    major: true,
    minor: true,
};
exports.default = (0, mobx_react_1.observer)(Ruler);
//# sourceMappingURL=Ruler.js.map
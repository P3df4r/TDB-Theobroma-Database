"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const util_1 = require("@jbrowse/core/util");
const ui_1 = require("@jbrowse/core/ui");
const useStyles = (0, mui_1.makeStyles)()(theme => {
    const { primary, tertiary } = theme.palette;
    const background = tertiary
        ? (0, material_1.alpha)(tertiary.main, 0.7)
        : (0, material_1.alpha)(primary.main, 0.7);
    return {
        rubberBand: {
            height: '100%',
            background,
            position: 'absolute',
            zIndex: 10,
            textAlign: 'center',
            overflow: 'hidden',
        },
        rubberBandControl: {
            cursor: 'crosshair',
            width: '100%',
            minHeight: 8,
        },
        rubberBandText: {
            color: tertiary ? tertiary.contrastText : primary.contrastText,
        },
        popover: {
            mouseEvents: 'none',
            cursor: 'crosshair',
        },
        paper: {
            paddingLeft: theme.spacing(1),
            paddingRight: theme.spacing(1),
        },
        guide: {
            pointerEvents: 'none',
            height: '100%',
            width: 1,
            position: 'absolute',
            zIndex: 10,
        },
    };
});
const VerticalGuide = (0, mobx_react_1.observer)(({ model, coordX }) => {
    const { classes } = useStyles();
    return (react_1.default.createElement(material_1.Tooltip, { open: true, placement: "top", title: (0, util_1.stringify)(model.pxToBp(coordX)), arrow: true },
        react_1.default.createElement("div", { className: classes.guide, style: {
                left: coordX,
                background: 'red',
            } })));
});
function RubberBand({ model, ControlComponent = react_1.default.createElement("div", null), }) {
    const [startX, setStartX] = (0, react_1.useState)();
    const [currentX, setCurrentX] = (0, react_1.useState)();
    // clientX and clientY used for anchorPosition for menu
    // offsetX used for calculations about width of selection
    const [anchorPosition, setAnchorPosition] = (0, react_1.useState)();
    const [guideX, setGuideX] = (0, react_1.useState)();
    const controlsRef = (0, react_1.useRef)(null);
    const rubberBandRef = (0, react_1.useRef)(null);
    const { classes } = useStyles();
    const mouseDragging = startX !== undefined && anchorPosition === undefined;
    const { setOffsets, pxToBp } = model;
    (0, react_1.useEffect)(() => {
        function computeOffsets(offsetX) {
            if (startX === undefined) {
                return;
            }
            let leftPx = startX;
            let rightPx = offsetX;
            if (rightPx < leftPx) {
                ;
                [leftPx, rightPx] = [rightPx, leftPx];
            }
            const leftOffset = pxToBp(leftPx);
            const rightOffset = pxToBp(rightPx);
            return { leftOffset, rightOffset };
        }
        function globalMouseMove(event) {
            if (controlsRef.current && mouseDragging) {
                const relativeX = event.clientX - controlsRef.current.getBoundingClientRect().left;
                setCurrentX(relativeX);
            }
        }
        function globalMouseUp(event) {
            if (startX !== undefined && controlsRef.current) {
                const { clientX, clientY } = event;
                const ref = controlsRef.current;
                const offsetX = clientX - ref.getBoundingClientRect().left;
                // as stated above, store both clientX/Y and offsetX for different
                // purposes
                setAnchorPosition({
                    offsetX,
                    clientX,
                    clientY,
                });
                const args = computeOffsets(offsetX);
                if (args) {
                    const { leftOffset, rightOffset } = args;
                    setOffsets(leftOffset, rightOffset);
                }
                setGuideX(undefined);
            }
        }
        if (mouseDragging) {
            window.addEventListener('mousemove', globalMouseMove);
            window.addEventListener('mouseup', globalMouseUp);
            return () => {
                window.removeEventListener('mousemove', globalMouseMove);
                window.removeEventListener('mouseup', globalMouseUp);
            };
        }
        return () => { };
    }, [startX, mouseDragging, anchorPosition, setOffsets, pxToBp]);
    (0, react_1.useEffect)(() => {
        if (!mouseDragging &&
            currentX !== undefined &&
            startX !== undefined &&
            Math.abs(currentX - startX) <= 3) {
            handleClose();
        }
    }, [mouseDragging, currentX, startX, model.bpPerPx]);
    function mouseDown(event) {
        event.preventDefault();
        event.stopPropagation();
        const relativeX = event.clientX -
            event.target.getBoundingClientRect().left;
        setStartX(relativeX);
        setCurrentX(relativeX);
    }
    function mouseMove(event) {
        const target = event.target;
        setGuideX(event.clientX - target.getBoundingClientRect().left);
    }
    function mouseOut() {
        setGuideX(undefined);
        model.setOffsets(undefined, undefined);
    }
    function handleClose() {
        setAnchorPosition(undefined);
        setStartX(undefined);
        setCurrentX(undefined);
    }
    const open = Boolean(anchorPosition);
    function handleMenuItemClick(_, callback) {
        callback();
        handleClose();
    }
    if (startX === undefined) {
        return (react_1.default.createElement(react_1.default.Fragment, null,
            guideX !== undefined ? (react_1.default.createElement(VerticalGuide, { model: model, coordX: guideX })) : null,
            react_1.default.createElement("div", { "data-testid": "rubberBand_controls", className: classes.rubberBandControl, role: "presentation", ref: controlsRef, onMouseDown: mouseDown, onMouseOut: mouseOut, onMouseMove: mouseMove }, ControlComponent)));
    }
    /* Calculating Pixels for Mouse Dragging */
    const right = anchorPosition ? anchorPosition.offsetX : currentX || 0;
    const left = right < startX ? right : startX;
    const width = Math.abs(right - startX);
    const leftBpOffset = model.pxToBp(left);
    const rightBpOffset = model.pxToBp(left + width);
    const numOfBpSelected = Math.ceil(width * model.bpPerPx);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        rubberBandRef.current ? (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(material_1.Popover, { className: classes.popover, classes: {
                    paper: classes.paper,
                }, open: true, anchorEl: rubberBandRef.current, anchorOrigin: {
                    vertical: 'top',
                    horizontal: 'left',
                }, transformOrigin: {
                    vertical: 'bottom',
                    horizontal: 'right',
                }, keepMounted: true, disableRestoreFocus: true },
                react_1.default.createElement(material_1.Typography, null, (0, util_1.stringify)(leftBpOffset))),
            react_1.default.createElement(material_1.Popover, { className: classes.popover, classes: {
                    paper: classes.paper,
                }, open: true, anchorEl: rubberBandRef.current, anchorOrigin: {
                    vertical: 'top',
                    horizontal: 'right',
                }, transformOrigin: {
                    vertical: 'bottom',
                    horizontal: 'left',
                }, keepMounted: true, disableRestoreFocus: true },
                react_1.default.createElement(material_1.Typography, null, (0, util_1.stringify)(rightBpOffset))))) : null,
        react_1.default.createElement("div", { ref: rubberBandRef, className: classes.rubberBand, style: { left, width } },
            react_1.default.createElement(material_1.Typography, { variant: "h6", className: classes.rubberBandText },
                numOfBpSelected.toLocaleString('en-US'),
                " bp")),
        react_1.default.createElement("div", { "data-testid": "rubberBand_controls", className: classes.rubberBandControl, role: "presentation", ref: controlsRef, onMouseDown: mouseDown, onMouseOut: mouseOut, onMouseMove: mouseMove }, ControlComponent),
        anchorPosition ? (react_1.default.createElement(ui_1.Menu, { anchorReference: "anchorPosition", anchorPosition: {
                left: anchorPosition.clientX,
                top: anchorPosition.clientY,
            }, onMenuItemClick: handleMenuItemClick, open: open, onClose: handleClose, menuItems: model.rubberBandMenuItems() })) : null));
}
exports.default = (0, mobx_react_1.observer)(RubberBand);
//# sourceMappingURL=RubberBand.js.map
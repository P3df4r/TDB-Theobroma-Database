"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const mui_1 = require("tss-react/mui");
const mobx_state_tree_1 = require("mobx-state-tree");
const util_1 = require("@jbrowse/core/util");
const material_1 = require("@mui/material");
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    dialogContent: {
        width: '80em',
    },
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
}));
function SearchResultsDialog({ model, optAssemblyName, handleClose, }) {
    var _a, _b;
    const { classes } = useStyles();
    const session = (0, util_1.getSession)(model);
    const { pluginManager } = (0, util_1.getEnv)(session);
    const { assemblyManager } = session;
    let assemblyName = optAssemblyName;
    if (model.displayedRegions.length > 0) {
        assemblyName = (_a = model.displayedRegions[0]) === null || _a === void 0 ? void 0 : _a.assemblyName;
    }
    if (!assemblyName) {
        throw new Error(`Assembly name not found`);
    }
    const assembly = assemblyManager.get(assemblyName);
    if (!assembly) {
        throw new Error(`assembly ${assemblyName} not found`);
    }
    if (!assembly.regions) {
        throw new Error(`assembly ${assemblyName} regions not loaded`);
    }
    const assemblyRegions = assembly.regions;
    function handleClick(location) {
        try {
            const newRegion = assemblyRegions.find(region => location === region.refName);
            if (newRegion) {
                model.setDisplayedRegions([newRegion]);
                // we use showAllRegions after setDisplayedRegions to make the entire
                // region visible, xref #1703
                model.showAllRegions();
            }
            else {
                model.navToLocString(location, assemblyName);
            }
        }
        catch (e) {
            console.warn(e);
            session.notify(`${e}`, 'warning');
        }
    }
    function getTrackName(trackId) {
        var _a;
        if (trackId) {
            const schema = pluginManager.pluggableConfigSchemaType('track');
            const configuration = (0, mobx_state_tree_1.resolveIdentifier)(schema, (0, mobx_state_tree_1.getRoot)(model), trackId);
            return ((_a = configuration === null || configuration === void 0 ? void 0 : configuration.name) === null || _a === void 0 ? void 0 : _a.value) || '';
        }
        return '';
    }
    return (react_1.default.createElement(material_1.Dialog, { open: true, maxWidth: "xl", onClose: handleClose },
        react_1.default.createElement(material_1.DialogTitle, null,
            "Search results",
            handleClose ? (react_1.default.createElement(material_1.IconButton, { "data-testid": "close-resultsDialog", className: classes.closeButton, onClick: () => {
                    handleClose();
                }, size: "large" },
                react_1.default.createElement(Close_1.default, null))) : null),
        react_1.default.createElement(material_1.Divider, null),
        react_1.default.createElement(material_1.DialogContent, null, !((_b = model.searchResults) === null || _b === void 0 ? void 0 : _b.length) ? (react_1.default.createElement(material_1.Typography, null,
            "No results found for ",
            react_1.default.createElement("b", null, model.searchQuery))) : (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(material_1.Typography, null,
                "Showing results for ",
                react_1.default.createElement("b", null, model.searchQuery)),
            react_1.default.createElement(material_1.TableContainer, { component: material_1.Paper },
                react_1.default.createElement(material_1.Table, null,
                    react_1.default.createElement(material_1.TableHead, null,
                        react_1.default.createElement(material_1.TableRow, null,
                            react_1.default.createElement(material_1.TableCell, null, "Name"),
                            react_1.default.createElement(material_1.TableCell, { align: "right" }, "Location"),
                            react_1.default.createElement(material_1.TableCell, { align: "right" }, "Track"),
                            react_1.default.createElement(material_1.TableCell, { align: "right" }))),
                    react_1.default.createElement(material_1.TableBody, null, model.searchResults.map(result => (react_1.default.createElement(material_1.TableRow, { key: `${result.getId()}` },
                        react_1.default.createElement(material_1.TableCell, { component: "th", scope: "row" }, result.getLabel()),
                        react_1.default.createElement(material_1.TableCell, { align: "right" }, result.getLocation()),
                        react_1.default.createElement(material_1.TableCell, { align: "right" }, getTrackName(result.getTrackId()) || 'N/A'),
                        react_1.default.createElement(material_1.TableCell, { align: "right" },
                            react_1.default.createElement(material_1.Button, { onClick: () => {
                                    const location = result.getLocation();
                                    if (location) {
                                        handleClick(location);
                                        const resultTrackId = result.getTrackId();
                                        if (resultTrackId) {
                                            model.showTrack(resultTrackId);
                                        }
                                    }
                                    handleClose();
                                }, color: "primary", variant: "contained" }, "Go"))))))))))),
        react_1.default.createElement(material_1.Divider, null),
        react_1.default.createElement(material_1.DialogActions, null,
            react_1.default.createElement(material_1.Button, { onClick: () => handleClose(), color: "primary" }, "Cancel"))));
}
exports.default = SearchResultsDialog;
//# sourceMappingURL=SearchResultsDialog.js.map
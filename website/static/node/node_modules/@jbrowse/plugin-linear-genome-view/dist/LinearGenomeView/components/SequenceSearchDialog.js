"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mobx_state_tree_1 = require("mobx-state-tree");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const util_1 = require("@jbrowse/core/util");
// icons
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    dialogContent: {
        width: '40em',
    },
}));
function SequenceDialog({ model, handleClose, }) {
    const { classes } = useStyles();
    const [value, setValue] = (0, react_1.useState)('');
    const [searchForward, setSearchForward] = (0, react_1.useState)(true);
    const [searchReverse, setSearchReverse] = (0, react_1.useState)(true);
    const [caseInsensitive, setCaseInsensitive] = (0, react_1.useState)(true);
    let error;
    try {
        new RegExp(value);
    }
    catch (e) {
        error = e;
    }
    return (react_1.default.createElement(material_1.Dialog, { maxWidth: "xl", open: true, onClose: handleClose },
        react_1.default.createElement(material_1.DialogTitle, null,
            "Sequence search",
            handleClose ? (react_1.default.createElement(material_1.IconButton, { className: classes.closeButton, onClick: () => handleClose(), size: "large" },
                react_1.default.createElement(Close_1.default, null))) : null),
        react_1.default.createElement(material_1.Divider, null),
        react_1.default.createElement(material_1.DialogContent, { className: classes.dialogContent },
            react_1.default.createElement(material_1.Typography, null, "Supply a sequence to search for. A track will be created with the resulting matches once submitted. You can also supply regex style expressions e.g. AACT(C|T)."),
            react_1.default.createElement(material_1.TextField, { value: value, onChange: e => setValue(e.target.value), helperText: "Sequence search pattern" }),
            react_1.default.createElement(material_1.FormGroup, null,
                react_1.default.createElement(material_1.FormControlLabel, { control: react_1.default.createElement(material_1.Checkbox, { checked: searchForward, onChange: event => setSearchForward(event.target.checked) }), label: "Search forward strand" }),
                react_1.default.createElement(material_1.FormControlLabel, { control: react_1.default.createElement(material_1.Checkbox, { checked: searchReverse, onChange: event => setSearchReverse(event.target.checked) }), label: "Search reverse strand" }),
                react_1.default.createElement(material_1.FormControlLabel, { control: react_1.default.createElement(material_1.Checkbox, { checked: caseInsensitive, onChange: event => setCaseInsensitive(event.target.checked) }), label: "Case insensitive" })),
            error ? react_1.default.createElement(material_1.Typography, { color: "error" }, `${error}`) : null),
        react_1.default.createElement(material_1.DialogActions, null,
            react_1.default.createElement(material_1.Button, { onClick: () => {
                    var _a;
                    if (value) {
                        const trackId = `sequence_search_${+Date.now()}`;
                        const session = (0, util_1.getSession)(model);
                        const { assemblyManager } = session;
                        const assemblyName = model.assemblyNames[0];
                        session.addTrackConf({
                            trackId,
                            name: `Sequence search ${value}`,
                            assemblyNames: [assemblyName],
                            type: 'FeatureTrack',
                            adapter: {
                                type: 'SequenceSearchAdapter',
                                search: value,
                                searchForward,
                                searchReverse,
                                caseInsensitive,
                                sequenceAdapter: (0, mobx_state_tree_1.getSnapshot)((_a = assemblyManager.get(assemblyName)) === null || _a === void 0 ? void 0 : _a.configuration.sequence.adapter),
                            },
                        });
                        model.toggleTrack(trackId);
                    }
                    handleClose();
                }, variant: "contained", color: "primary" }, "Submit"),
            react_1.default.createElement(material_1.Button, { onClick: () => handleClose(), variant: "contained", color: "secondary" }, "Close"))));
}
exports.default = (0, mobx_react_1.observer)(SequenceDialog);
//# sourceMappingURL=SequenceSearchDialog.js.map
/// <reference types="react" />
import Plugin from '@jbrowse/core/Plugin';
import PluginManager from '@jbrowse/core/PluginManager';
import { BaseLinearDisplay, BaseLinearDisplayComponent, baseLinearDisplayConfigSchema, BlockModel } from './BaseLinearDisplay';
import { configSchemaFactory as linearBareDisplayConfigSchemaFactory } from './LinearBareDisplay';
import { LinearGenomeViewModel, LinearGenomeViewStateModel, renderToSvg, RefNameAutocomplete, SearchBox } from './LinearGenomeView';
import { configSchema as linearBasicDisplayConfigSchemaFactory, modelFactory as linearBasicDisplayModelFactory } from './LinearBasicDisplay';
export default class LinearGenomeViewPlugin extends Plugin {
    name: string;
    exports: {
        BaseLinearDisplayComponent: (props: {
            model: {
                id: string;
                type: string;
                rpcDriverName: string | undefined;
                height: number;
                blockState: import("mobx-state-tree").IMSTMap<import("mobx-state-tree").IModelType<{
                    key: import("mobx-state-tree").ISimpleType<string>;
                    region: import("mobx-state-tree").IModelType<{
                        refName: import("mobx-state-tree").ISimpleType<string>;
                        start: import("mobx-state-tree").ISimpleType<number>;
                        end: import("mobx-state-tree").ISimpleType<number>;
                        reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    } & {
                        assemblyName: import("mobx-state-tree").ISimpleType<string>;
                    }, {
                        setRefName(newRefName: string): void;
                    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
                    reloadFlag: import("mobx-state-tree").IType<number | undefined, number, number>;
                    isLeftEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    isRightEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    renderInProgress: AbortController | undefined;
                    filled: boolean;
                    reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
                    features: Map<string, import("@jbrowse/core/util").Feature> | undefined;
                    layout: any;
                    status: string;
                    error: unknown;
                    message: string | undefined;
                    maxHeightReached: boolean;
                    ReactComponent: ({ model, }: {
                        model: any;
                    }) => any;
                    renderProps: any;
                } & {
                    doReload(): void;
                    afterAttach(): void;
                    setStatus(message: string): void;
                    setLoading(abortController: AbortController): void;
                    setMessage(messageText: string): void;
                    setRendered(props: {
                        reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
                        features: Map<string, import("@jbrowse/core/util").Feature>;
                        layout: any;
                        maxHeightReached: boolean;
                        renderProps: any;
                    } | undefined): void;
                    setError(error: unknown): void;
                    reload(): void;
                    beforeDestroy(): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
                    key: import("mobx-state-tree").ISimpleType<string>;
                    region: import("mobx-state-tree").IModelType<{
                        refName: import("mobx-state-tree").ISimpleType<string>;
                        start: import("mobx-state-tree").ISimpleType<number>;
                        end: import("mobx-state-tree").ISimpleType<number>;
                        reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    } & {
                        assemblyName: import("mobx-state-tree").ISimpleType<string>;
                    }, {
                        setRefName(newRefName: string): void;
                    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
                    reloadFlag: import("mobx-state-tree").IType<number | undefined, number, number>;
                    isLeftEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    isRightEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    renderInProgress: AbortController | undefined;
                    filled: boolean;
                    reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
                    features: Map<string, import("@jbrowse/core/util").Feature> | undefined;
                    layout: any;
                    status: string;
                    error: unknown;
                    message: string | undefined;
                    maxHeightReached: boolean;
                    ReactComponent: ({ model, }: {
                        model: any;
                    }) => any;
                    renderProps: any;
                } & {
                    doReload(): void;
                    afterAttach(): void;
                    setStatus(message: string): void;
                    setLoading(abortController: AbortController): void;
                    setMessage(messageText: string): void;
                    setRendered(props: {
                        reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
                        features: Map<string, import("@jbrowse/core/util").Feature>;
                        layout: any;
                        maxHeightReached: boolean;
                        renderProps: any;
                    } | undefined): void;
                    setError(error: unknown): void;
                    reload(): void;
                    beforeDestroy(): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
                userBpPerPxLimit: number | undefined;
                userByteSizeLimit: number | undefined;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                rendererTypeName: string;
                error: unknown;
            } & {
                readonly RenderingComponent: import("react").FC<{
                    model: {
                        id: string;
                        type: string;
                        rpcDriverName: string | undefined;
                    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                        rendererTypeName: string;
                        error: unknown;
                    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                        type: import("mobx-state-tree").ISimpleType<string>;
                        rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
                    }, {
                        rendererTypeName: string;
                        error: unknown;
                    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
                    onHorizontalScroll?: Function | undefined;
                    blockState?: Record<string, any> | undefined;
                }>;
                readonly DisplayBlurb: import("react").FC<{
                    model: {
                        id: string;
                        type: string;
                        rpcDriverName: string | undefined;
                    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                        rendererTypeName: string;
                        error: unknown;
                    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                        type: import("mobx-state-tree").ISimpleType<string>;
                        rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
                    }, {
                        rendererTypeName: string;
                        error: unknown;
                    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
                }> | null;
                readonly adapterConfig: any;
                readonly parentTrack: any;
                renderProps(): any;
                readonly rendererType: import("@jbrowse/core/pluggableElementTypes").RendererType;
                readonly DisplayMessageComponent: import("react").FC<any> | undefined;
                trackMenuItems(): import("@jbrowse/core/ui").MenuItem[];
                readonly viewMenuActions: import("@jbrowse/core/ui").MenuItem[];
                regionCannotBeRendered(): undefined;
            } & {
                setError(error?: unknown): void;
                setRpcDriverName(rpcDriverName: string): void;
                reload(): void;
            } & {
                currBpPerPx: number;
                message: string;
                featureIdUnderMouse: string | undefined;
                contextMenuFeature: import("@jbrowse/core/util").Feature | undefined;
                scrollTop: number;
                estimatedRegionStatsP: Promise<import("@jbrowse/core/data_adapters/BaseAdapter").Stats> | undefined;
                estimatedRegionStats: import("@jbrowse/core/data_adapters/BaseAdapter").Stats | undefined;
            } & {
                readonly blockType: "dynamicBlocks" | "staticBlocks";
                readonly blockDefinitions: import("@jbrowse/core/util/blockTypes").BlockSet;
            } & {
                readonly renderDelay: number;
                readonly TooltipComponent: import("react").FC<any>;
                readonly selectedFeatureId: string | undefined;
                readonly DisplayMessageComponent: import("react").FC<any> | undefined;
            } & {
                readonly features: import("@jbrowse/core/util/compositeMap").default<string, import("@jbrowse/core/util").Feature>;
                readonly featureUnderMouse: import("@jbrowse/core/util").Feature | undefined;
                getFeatureOverlapping(blockKey: string, x: number, y: number): any;
                getFeatureByID(blockKey: string, id: string): [number, number, number, number] | undefined;
                searchFeatureByID(id: string): [number, number, number, number] | undefined;
                readonly currentBytesRequested: number;
                readonly currentFeatureScreenDensity: number;
                readonly maxFeatureScreenDensity: any;
                readonly estimatedStatsReady: boolean;
                readonly maxAllowableBytes: number;
            } & {
                setMessage(message: string): void;
                afterAttach(): void;
                estimateRegionsStats(regions: import("@jbrowse/core/util").Region[], opts: {
                    headers?: Record<string, string> | undefined;
                    signal?: AbortSignal | undefined;
                    filters?: string[] | undefined;
                }): Promise<{}>;
                setRegionStatsP(p?: Promise<import("@jbrowse/core/data_adapters/BaseAdapter").Stats> | undefined): void;
                setRegionStats(estimatedRegionStats?: import("@jbrowse/core/data_adapters/BaseAdapter").Stats | undefined): void;
                clearRegionStats(): void;
                setHeight(displayHeight: number): number;
                resizeHeight(distance: number): number;
                setScrollTop(scrollTop: number): void;
                updateStatsLimit(stats: import("@jbrowse/core/data_adapters/BaseAdapter").Stats): void;
                addBlock(key: string, block: import("@jbrowse/core/util/blockTypes").BaseBlock): void;
                setCurrBpPerPx(n: number): void;
                deleteBlock(key: string): void;
                selectFeature(feature: import("@jbrowse/core/util").Feature): void;
                clearFeatureSelection(): void;
                setFeatureIdUnderMouse(feature: string | undefined): void;
                reload(): void;
                setContextMenuFeature(feature?: import("@jbrowse/core/util").Feature | undefined): void;
            } & {
                readonly regionTooLarge: boolean;
                readonly regionTooLargeReason: string;
            } & {
                reload(): Promise<void>;
                afterAttach(): void;
            } & {
                regionCannotBeRenderedText(_region: import("@jbrowse/core/util").Region): "" | "Force load to see features";
                regionCannotBeRendered(_region: import("@jbrowse/core/util").Region): JSX.Element | null;
                trackMenuItems(): import("@jbrowse/core/ui").MenuItem[];
                contextMenuItems(): {
                    label: string;
                    icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
                        muiName: string;
                    };
                    onClick: () => void;
                }[];
                renderProps(): any;
            } & {
                renderSvg(opts: import("./LinearGenomeView").ExportSvgOptions & {
                    overrideHeight: number;
                }): Promise<JSX.Element>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").ISimpleType<string>;
                rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            } & {
                height: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
                blockState: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
                    key: import("mobx-state-tree").ISimpleType<string>;
                    region: import("mobx-state-tree").IModelType<{
                        refName: import("mobx-state-tree").ISimpleType<string>;
                        start: import("mobx-state-tree").ISimpleType<number>;
                        end: import("mobx-state-tree").ISimpleType<number>;
                        reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                    } & {
                        assemblyName: import("mobx-state-tree").ISimpleType<string>;
                    }, {
                        setRefName(newRefName: string): void;
                    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
                    reloadFlag: import("mobx-state-tree").IType<number | undefined, number, number>;
                    isLeftEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    isRightEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    renderInProgress: AbortController | undefined;
                    filled: boolean;
                    reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
                    features: Map<string, import("@jbrowse/core/util").Feature> | undefined;
                    layout: any;
                    status: string;
                    error: unknown;
                    message: string | undefined;
                    maxHeightReached: boolean;
                    ReactComponent: ({ model, }: {
                        model: any;
                    }) => any;
                    renderProps: any;
                } & {
                    doReload(): void;
                    afterAttach(): void;
                    setStatus(message: string): void;
                    setLoading(abortController: AbortController): void;
                    setMessage(messageText: string): void;
                    setRendered(props: {
                        reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
                        features: Map<string, import("@jbrowse/core/util").Feature>;
                        layout: any;
                        maxHeightReached: boolean;
                        renderProps: any;
                    } | undefined): void;
                    setError(error: unknown): void;
                    reload(): void;
                    beforeDestroy(): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
                userBpPerPxLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
                userByteSizeLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
            }, {
                rendererTypeName: string;
                error: unknown;
            } & {
                readonly RenderingComponent: import("react").FC<{
                    model: {
                        id: string;
                        type: string;
                        rpcDriverName: string | undefined;
                    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                        rendererTypeName: string;
                        error: unknown;
                    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                        type: import("mobx-state-tree").ISimpleType<string>;
                        rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
                    }, {
                        rendererTypeName: string;
                        error: unknown;
                    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
                    onHorizontalScroll?: Function | undefined;
                    blockState?: Record<string, any> | undefined;
                }>;
                readonly DisplayBlurb: import("react").FC<{
                    model: {
                        id: string;
                        type: string;
                        rpcDriverName: string | undefined;
                    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                        rendererTypeName: string;
                        error: unknown;
                    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                        type: import("mobx-state-tree").ISimpleType<string>;
                        rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
                    }, {
                        rendererTypeName: string;
                        error: unknown;
                    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
                }> | null;
                readonly adapterConfig: any;
                readonly parentTrack: any;
                renderProps(): any;
                readonly rendererType: import("@jbrowse/core/pluggableElementTypes").RendererType;
                readonly DisplayMessageComponent: import("react").FC<any> | undefined;
                trackMenuItems(): import("@jbrowse/core/ui").MenuItem[];
                readonly viewMenuActions: import("@jbrowse/core/ui").MenuItem[];
                regionCannotBeRendered(): undefined;
            } & {
                setError(error?: unknown): void;
                setRpcDriverName(rpcDriverName: string): void;
                reload(): void;
            } & {
                currBpPerPx: number;
                message: string;
                featureIdUnderMouse: string | undefined;
                contextMenuFeature: import("@jbrowse/core/util").Feature | undefined;
                scrollTop: number;
                estimatedRegionStatsP: Promise<import("@jbrowse/core/data_adapters/BaseAdapter").Stats> | undefined;
                estimatedRegionStats: import("@jbrowse/core/data_adapters/BaseAdapter").Stats | undefined;
            } & {
                readonly blockType: "dynamicBlocks" | "staticBlocks";
                readonly blockDefinitions: import("@jbrowse/core/util/blockTypes").BlockSet;
            } & {
                readonly renderDelay: number;
                readonly TooltipComponent: import("react").FC<any>;
                readonly selectedFeatureId: string | undefined;
                readonly DisplayMessageComponent: import("react").FC<any> | undefined;
            } & {
                readonly features: import("@jbrowse/core/util/compositeMap").default<string, import("@jbrowse/core/util").Feature>;
                readonly featureUnderMouse: import("@jbrowse/core/util").Feature | undefined;
                getFeatureOverlapping(blockKey: string, x: number, y: number): any;
                getFeatureByID(blockKey: string, id: string): [number, number, number, number] | undefined;
                searchFeatureByID(id: string): [number, number, number, number] | undefined;
                readonly currentBytesRequested: number;
                readonly currentFeatureScreenDensity: number;
                readonly maxFeatureScreenDensity: any;
                readonly estimatedStatsReady: boolean;
                readonly maxAllowableBytes: number;
            } & {
                setMessage(message: string): void;
                afterAttach(): void;
                estimateRegionsStats(regions: import("@jbrowse/core/util").Region[], opts: {
                    headers?: Record<string, string> | undefined;
                    signal?: AbortSignal | undefined;
                    filters?: string[] | undefined;
                }): Promise<{}>;
                setRegionStatsP(p?: Promise<import("@jbrowse/core/data_adapters/BaseAdapter").Stats> | undefined): void;
                setRegionStats(estimatedRegionStats?: import("@jbrowse/core/data_adapters/BaseAdapter").Stats | undefined): void;
                clearRegionStats(): void;
                setHeight(displayHeight: number): number;
                resizeHeight(distance: number): number;
                setScrollTop(scrollTop: number): void;
                updateStatsLimit(stats: import("@jbrowse/core/data_adapters/BaseAdapter").Stats): void;
                addBlock(key: string, block: import("@jbrowse/core/util/blockTypes").BaseBlock): void;
                setCurrBpPerPx(n: number): void;
                deleteBlock(key: string): void;
                selectFeature(feature: import("@jbrowse/core/util").Feature): void;
                clearFeatureSelection(): void;
                setFeatureIdUnderMouse(feature: string | undefined): void;
                reload(): void;
                setContextMenuFeature(feature?: import("@jbrowse/core/util").Feature | undefined): void;
            } & {
                readonly regionTooLarge: boolean;
                readonly regionTooLargeReason: string;
            } & {
                reload(): Promise<void>;
                afterAttach(): void;
            } & {
                regionCannotBeRenderedText(_region: import("@jbrowse/core/util").Region): "" | "Force load to see features";
                regionCannotBeRendered(_region: import("@jbrowse/core/util").Region): JSX.Element | null;
                trackMenuItems(): import("@jbrowse/core/ui").MenuItem[];
                contextMenuItems(): {
                    label: string;
                    icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
                        muiName: string;
                    };
                    onClick: () => void;
                }[];
                renderProps(): any;
            } & {
                renderSvg(opts: import("./LinearGenomeView").ExportSvgOptions & {
                    overrideHeight: number;
                }): Promise<JSX.Element>;
            }, import("mobx-state-tree")._NotCustomized, {
                type: string;
                height: number;
                id: string;
                rpcDriverName: string | undefined;
                userBpPerPxLimit: number | undefined;
                userByteSizeLimit: number | undefined;
            }>>;
            children?: import("react").ReactNode;
        }) => JSX.Element;
        BaseLinearDisplay: import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        } & {
            height: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
            blockState: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
                key: import("mobx-state-tree").ISimpleType<string>;
                region: import("mobx-state-tree").IModelType<{
                    refName: import("mobx-state-tree").ISimpleType<string>;
                    start: import("mobx-state-tree").ISimpleType<number>;
                    end: import("mobx-state-tree").ISimpleType<number>;
                    reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                } & {
                    assemblyName: import("mobx-state-tree").ISimpleType<string>;
                }, {
                    setRefName(newRefName: string): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
                reloadFlag: import("mobx-state-tree").IType<number | undefined, number, number>;
                isLeftEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                isRightEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                renderInProgress: AbortController | undefined;
                filled: boolean;
                reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
                features: Map<string, import("@jbrowse/core/util").Feature> | undefined;
                layout: any;
                status: string;
                error: unknown;
                message: string | undefined;
                maxHeightReached: boolean;
                ReactComponent: ({ model, }: {
                    model: any;
                }) => any;
                renderProps: any;
            } & {
                doReload(): void;
                afterAttach(): void;
                setStatus(message: string): void;
                setLoading(abortController: AbortController): void;
                setMessage(messageText: string): void;
                setRendered(props: {
                    reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
                    features: Map<string, import("@jbrowse/core/util").Feature>;
                    layout: any;
                    maxHeightReached: boolean;
                    renderProps: any;
                } | undefined): void;
                setError(error: unknown): void;
                reload(): void;
                beforeDestroy(): void;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            userBpPerPxLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
            userByteSizeLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
        }, {
            rendererTypeName: string;
            error: unknown;
        } & {
            readonly RenderingComponent: import("react").FC<{
                model: {
                    id: string;
                    type: string;
                    rpcDriverName: string | undefined;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    rendererTypeName: string;
                    error: unknown;
                } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").ISimpleType<string>;
                    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
                }, {
                    rendererTypeName: string;
                    error: unknown;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
                onHorizontalScroll?: Function | undefined;
                blockState?: Record<string, any> | undefined;
            }>;
            readonly DisplayBlurb: import("react").FC<{
                model: {
                    id: string;
                    type: string;
                    rpcDriverName: string | undefined;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    rendererTypeName: string;
                    error: unknown;
                } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                    type: import("mobx-state-tree").ISimpleType<string>;
                    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
                }, {
                    rendererTypeName: string;
                    error: unknown;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            }> | null;
            readonly adapterConfig: any;
            readonly parentTrack: any;
            renderProps(): any;
            readonly rendererType: import("@jbrowse/core/pluggableElementTypes").RendererType;
            readonly DisplayMessageComponent: import("react").FC<any> | undefined;
            trackMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            readonly viewMenuActions: import("@jbrowse/core/ui").MenuItem[];
            regionCannotBeRendered(): undefined;
        } & {
            setError(error?: unknown): void;
            setRpcDriverName(rpcDriverName: string): void;
            reload(): void;
        } & {
            currBpPerPx: number;
            message: string;
            featureIdUnderMouse: string | undefined;
            contextMenuFeature: import("@jbrowse/core/util").Feature | undefined;
            scrollTop: number;
            estimatedRegionStatsP: Promise<import("@jbrowse/core/data_adapters/BaseAdapter").Stats> | undefined;
            estimatedRegionStats: import("@jbrowse/core/data_adapters/BaseAdapter").Stats | undefined;
        } & {
            readonly blockType: "dynamicBlocks" | "staticBlocks";
            readonly blockDefinitions: import("@jbrowse/core/util/blockTypes").BlockSet;
        } & {
            readonly renderDelay: number;
            readonly TooltipComponent: import("react").FC<any>;
            readonly selectedFeatureId: string | undefined;
            readonly DisplayMessageComponent: import("react").FC<any> | undefined;
        } & {
            readonly features: import("@jbrowse/core/util/compositeMap").default<string, import("@jbrowse/core/util").Feature>;
            readonly featureUnderMouse: import("@jbrowse/core/util").Feature | undefined;
            getFeatureOverlapping(blockKey: string, x: number, y: number): any;
            getFeatureByID(blockKey: string, id: string): [number, number, number, number] | undefined;
            searchFeatureByID(id: string): [number, number, number, number] | undefined;
            readonly currentBytesRequested: number;
            readonly currentFeatureScreenDensity: number;
            readonly maxFeatureScreenDensity: any;
            readonly estimatedStatsReady: boolean;
            readonly maxAllowableBytes: number;
        } & {
            setMessage(message: string): void;
            afterAttach(): void;
            estimateRegionsStats(regions: import("@jbrowse/core/util").Region[], opts: {
                headers?: Record<string, string> | undefined;
                signal?: AbortSignal | undefined;
                filters?: string[] | undefined;
            }): Promise<{}>;
            setRegionStatsP(p?: Promise<import("@jbrowse/core/data_adapters/BaseAdapter").Stats> | undefined): void;
            setRegionStats(estimatedRegionStats?: import("@jbrowse/core/data_adapters/BaseAdapter").Stats | undefined): void;
            clearRegionStats(): void;
            setHeight(displayHeight: number): number;
            resizeHeight(distance: number): number;
            setScrollTop(scrollTop: number): void;
            updateStatsLimit(stats: import("@jbrowse/core/data_adapters/BaseAdapter").Stats): void;
            addBlock(key: string, block: import("@jbrowse/core/util/blockTypes").BaseBlock): void;
            setCurrBpPerPx(n: number): void;
            deleteBlock(key: string): void;
            selectFeature(feature: import("@jbrowse/core/util").Feature): void;
            clearFeatureSelection(): void;
            setFeatureIdUnderMouse(feature: string | undefined): void;
            reload(): void;
            setContextMenuFeature(feature?: import("@jbrowse/core/util").Feature | undefined): void;
        } & {
            readonly regionTooLarge: boolean;
            readonly regionTooLargeReason: string;
        } & {
            reload(): Promise<void>;
            afterAttach(): void;
        } & {
            regionCannotBeRenderedText(_region: import("@jbrowse/core/util").Region): "" | "Force load to see features";
            regionCannotBeRendered(_region: import("@jbrowse/core/util").Region): JSX.Element | null;
            trackMenuItems(): import("@jbrowse/core/ui").MenuItem[];
            contextMenuItems(): {
                label: string;
                icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
                    muiName: string;
                };
                onClick: () => void;
            }[];
            renderProps(): any;
        } & {
            renderSvg(opts: import("./LinearGenomeView").ExportSvgOptions & {
                overrideHeight: number;
            }): Promise<JSX.Element>;
        }, import("mobx-state-tree")._NotCustomized, {
            type: string;
            height: number;
            id: string;
            rpcDriverName: string | undefined;
            userBpPerPxLimit: number | undefined;
            userByteSizeLimit: number | undefined;
        }>;
        baseLinearDisplayConfigSchema: import("@jbrowse/core/configuration").AnyConfigurationSchemaType;
        SearchBox: ({ model, showHelp, }: {
            showHelp?: boolean | undefined;
            model: {
                id: string;
                displayName: string | undefined;
                minimized: boolean;
                type: string;
                offsetPx: number;
                bpPerPx: number;
                displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    refName: import("mobx-state-tree").ISimpleType<string>;
                    start: import("mobx-state-tree").ISimpleType<number>;
                    end: import("mobx-state-tree").ISimpleType<number>;
                    reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                } & {
                    assemblyName: import("mobx-state-tree").ISimpleType<string>;
                }, {
                    setRefName(newRefName: string): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    refName: import("mobx-state-tree").ISimpleType<string>;
                    start: import("mobx-state-tree").ISimpleType<number>;
                    end: import("mobx-state-tree").ISimpleType<number>;
                    reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                } & {
                    assemblyName: import("mobx-state-tree").ISimpleType<string>;
                }, {
                    setRefName(newRefName: string): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
                hideHeader: boolean;
                hideHeaderOverview: boolean;
                hideNoTracksActive: boolean;
                trackSelectorType: string;
                trackLabels: string;
                showCenterLine: boolean;
                showCytobandsSetting: boolean;
                showGridlines: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                width: number;
            } & {
                menuItems(): import("@jbrowse/core/ui").MenuItem[];
            } & {
                setDisplayName(name: string): void;
                setWidth(newWidth: number): void;
                setMinimized(flag: boolean): void;
            } & {
                volatileWidth: number | undefined;
                minimumBlockWidth: number;
                draggingTrackId: string | undefined;
                volatileError: Error | undefined;
                afterDisplayedRegionsSetCallbacks: Function[];
                scaleFactor: number;
                trackRefs: {
                    [key: string]: any;
                };
                coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
                coarseTotalBp: number;
                leftOffset: import("./LinearGenomeView").BpOffset | undefined;
                rightOffset: import("./LinearGenomeView").BpOffset | undefined;
                searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
                searchQuery: string | undefined;
                seqDialogDisplayed: boolean;
            } & {
                readonly width: number;
                readonly interRegionPaddingWidth: number;
                readonly assemblyNames: string[];
            } & {
                MiniControlsComponent(): import("react").FC<any>;
                HeaderComponent(): import("react").FC<any>;
                readonly assemblyErrors: string;
                readonly assembliesInitialized: boolean;
                readonly initialized: boolean;
                readonly hasDisplayedRegions: boolean;
                readonly isSearchDialogDisplayed: boolean;
                readonly scaleBarHeight: number;
                readonly headerHeight: number;
                readonly trackHeights: any;
                readonly trackHeightsWithResizeHandles: any;
                readonly height: any;
                readonly totalBp: number;
                readonly maxBpPerPx: number;
                readonly minBpPerPx: number;
                readonly error: string | Error;
                readonly maxOffset: number;
                readonly minOffset: number;
                readonly displayedRegionsTotalPx: number;
                renderProps(): any;
                searchScope(assemblyName: string): {
                    assemblyName: string;
                    includeAggregateIndexes: boolean;
                    tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
                };
                getTrack(id: string): any;
                rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
                rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
                readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
            } & {
                setShowCytobands(flag: boolean): void;
                setWidth(newWidth: number): void;
                setError(error: Error | undefined): void;
                toggleHeader(): void;
                toggleHeaderOverview(): void;
                toggleNoTracksActive(): void;
                toggleShowGridlines(): void;
                scrollTo(offsetPx: number): number;
                zoomTo(bpPerPx: number): number;
                setOffsets(left?: import("./LinearGenomeView").BpOffset | undefined, right?: import("./LinearGenomeView").BpOffset | undefined): void;
                setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
                setGetSequenceDialogOpen(open: boolean): void;
                setNewView(bpPerPx: number, offsetPx: number): void;
                horizontallyFlip(): void;
                showTrack(trackId: string, initialSnapshot?: {}, displayInitialSnapshot?: {}): any;
                hideTrack(trackId: string): number;
            } & {
                moveTrack(movingId: string, targetId: string): void;
                closeView(): void;
                toggleTrack(trackId: string): void;
                setTrackLabels(setting: "offset" | "hidden" | "overlapping"): void;
                toggleCenterLine(): void;
                setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
                activateTrackSelector(): import("@jbrowse/core/util").Widget;
                getSelectedRegions(leftOffset?: import("./LinearGenomeView").BpOffset | undefined, rightOffset?: import("./LinearGenomeView").BpOffset | undefined): {
                    start: number;
                    end: number;
                    regionNumber?: number | undefined;
                    reversed?: boolean | undefined;
                    refName: string;
                    assemblyName: string;
                    key: string;
                    offsetPx: number;
                    widthPx: number;
                    variant?: string | undefined;
                    isLeftEndOfDisplayedRegion?: boolean | undefined;
                }[];
                afterDisplayedRegionsSet(cb: Function): void;
                horizontalScroll(distance: number): number;
                center(): void;
                showAllRegions(): void;
                showAllRegionsInAssembly(assemblyName?: string | undefined): void;
                setDraggingTrackId(idx?: string | undefined): void;
                setScaleFactor(factor: number): void;
                clearView(): void;
                exportSvg(opts?: import("./LinearGenomeView").ExportSvgOptions): Promise<void>;
            } & {
                slide: (viewWidths: number) => void;
            } & {
                zoom: (targetBpPerPx: number) => void;
            } & {
                readonly canShowCytobands: boolean;
                readonly showCytobands: boolean;
                readonly anyCytobandsExist: boolean;
                readonly cytobandOffset: number;
            } & {
                menuItems(): import("@jbrowse/core/ui").MenuItem[];
            } & {
                readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
                readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
                readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
                readonly visibleLocStrings: string;
                readonly coarseVisibleLocStrings: string;
            } & {
                setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
                afterAttach(): void;
            } & {
                moveTo(start?: import("./LinearGenomeView").BpOffset | undefined, end?: import("./LinearGenomeView").BpOffset | undefined): void;
                navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
                navTo(query: import("./LinearGenomeView").NavLocation): void;
                navToMultiple(locations: import("./LinearGenomeView").NavLocation[]): void;
            } & {
                rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
                bpToPx({ refName, coord, regionNumber, }: {
                    refName: string;
                    coord: number;
                    regionNumber?: number | undefined;
                }): {
                    index: number;
                    offsetPx: number;
                } | undefined;
                centerAt(coord: number, refName: string, regionNumber: number): void;
                pxToBp(px: number): {
                    coord: number;
                    index: number;
                    refName: string;
                    oob: boolean;
                    assemblyName: string;
                    offset: number;
                    start: number;
                    end: number;
                    reversed: boolean;
                };
                readonly centerLineInfo: {
                    coord: number;
                    index: number;
                    refName: string;
                    oob: boolean;
                    assemblyName: string;
                    offset: number;
                    start: number;
                    end: number;
                    reversed: boolean;
                } | undefined;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
                minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            } & {
                id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
                bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
                displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    refName: import("mobx-state-tree").ISimpleType<string>;
                    start: import("mobx-state-tree").ISimpleType<number>;
                    end: import("mobx-state-tree").ISimpleType<number>;
                    reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                } & {
                    assemblyName: import("mobx-state-tree").ISimpleType<string>;
                }, {
                    setRefName(newRefName: string): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
                tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
                hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                width: number;
            } & {
                menuItems(): import("@jbrowse/core/ui").MenuItem[];
            } & {
                setDisplayName(name: string): void;
                setWidth(newWidth: number): void;
                setMinimized(flag: boolean): void;
            } & {
                volatileWidth: number | undefined;
                minimumBlockWidth: number;
                draggingTrackId: string | undefined;
                volatileError: Error | undefined;
                afterDisplayedRegionsSetCallbacks: Function[];
                scaleFactor: number;
                trackRefs: {
                    [key: string]: any;
                };
                coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
                coarseTotalBp: number;
                leftOffset: import("./LinearGenomeView").BpOffset | undefined;
                rightOffset: import("./LinearGenomeView").BpOffset | undefined;
                searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
                searchQuery: string | undefined;
                seqDialogDisplayed: boolean;
            } & {
                readonly width: number;
                readonly interRegionPaddingWidth: number;
                readonly assemblyNames: string[];
            } & {
                MiniControlsComponent(): import("react").FC<any>;
                HeaderComponent(): import("react").FC<any>;
                readonly assemblyErrors: string;
                readonly assembliesInitialized: boolean;
                readonly initialized: boolean;
                readonly hasDisplayedRegions: boolean;
                readonly isSearchDialogDisplayed: boolean;
                readonly scaleBarHeight: number;
                readonly headerHeight: number;
                readonly trackHeights: any;
                readonly trackHeightsWithResizeHandles: any;
                readonly height: any;
                readonly totalBp: number;
                readonly maxBpPerPx: number;
                readonly minBpPerPx: number;
                readonly error: string | Error;
                readonly maxOffset: number;
                readonly minOffset: number;
                readonly displayedRegionsTotalPx: number;
                renderProps(): any;
                searchScope(assemblyName: string): {
                    assemblyName: string;
                    includeAggregateIndexes: boolean;
                    tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
                };
                getTrack(id: string): any;
                rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
                rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
                readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
            } & {
                setShowCytobands(flag: boolean): void;
                setWidth(newWidth: number): void;
                setError(error: Error | undefined): void;
                toggleHeader(): void;
                toggleHeaderOverview(): void;
                toggleNoTracksActive(): void;
                toggleShowGridlines(): void;
                scrollTo(offsetPx: number): number;
                zoomTo(bpPerPx: number): number;
                setOffsets(left?: import("./LinearGenomeView").BpOffset | undefined, right?: import("./LinearGenomeView").BpOffset | undefined): void;
                setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
                setGetSequenceDialogOpen(open: boolean): void;
                setNewView(bpPerPx: number, offsetPx: number): void;
                horizontallyFlip(): void;
                showTrack(trackId: string, initialSnapshot?: {}, displayInitialSnapshot?: {}): any;
                hideTrack(trackId: string): number;
            } & {
                moveTrack(movingId: string, targetId: string): void;
                closeView(): void;
                toggleTrack(trackId: string): void;
                setTrackLabels(setting: "offset" | "hidden" | "overlapping"): void;
                toggleCenterLine(): void;
                setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
                activateTrackSelector(): import("@jbrowse/core/util").Widget;
                getSelectedRegions(leftOffset?: import("./LinearGenomeView").BpOffset | undefined, rightOffset?: import("./LinearGenomeView").BpOffset | undefined): {
                    start: number;
                    end: number;
                    regionNumber?: number | undefined;
                    reversed?: boolean | undefined;
                    refName: string;
                    assemblyName: string;
                    key: string;
                    offsetPx: number;
                    widthPx: number;
                    variant?: string | undefined;
                    isLeftEndOfDisplayedRegion?: boolean | undefined;
                }[];
                afterDisplayedRegionsSet(cb: Function): void;
                horizontalScroll(distance: number): number;
                center(): void;
                showAllRegions(): void;
                showAllRegionsInAssembly(assemblyName?: string | undefined): void;
                setDraggingTrackId(idx?: string | undefined): void;
                setScaleFactor(factor: number): void;
                clearView(): void;
                exportSvg(opts?: import("./LinearGenomeView").ExportSvgOptions): Promise<void>;
            } & {
                slide: (viewWidths: number) => void;
            } & {
                zoom: (targetBpPerPx: number) => void;
            } & {
                readonly canShowCytobands: boolean;
                readonly showCytobands: boolean;
                readonly anyCytobandsExist: boolean;
                readonly cytobandOffset: number;
            } & {
                menuItems(): import("@jbrowse/core/ui").MenuItem[];
            } & {
                readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
                readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
                readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
                readonly visibleLocStrings: string;
                readonly coarseVisibleLocStrings: string;
            } & {
                setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
                afterAttach(): void;
            } & {
                moveTo(start?: import("./LinearGenomeView").BpOffset | undefined, end?: import("./LinearGenomeView").BpOffset | undefined): void;
                navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
                navTo(query: import("./LinearGenomeView").NavLocation): void;
                navToMultiple(locations: import("./LinearGenomeView").NavLocation[]): void;
            } & {
                rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
                bpToPx({ refName, coord, regionNumber, }: {
                    refName: string;
                    coord: number;
                    regionNumber?: number | undefined;
                }): {
                    index: number;
                    offsetPx: number;
                } | undefined;
                centerAt(coord: number, refName: string, regionNumber: number): void;
                pxToBp(px: number): {
                    coord: number;
                    index: number;
                    refName: string;
                    oob: boolean;
                    assemblyName: string;
                    offset: number;
                    start: number;
                    end: number;
                    reversed: boolean;
                };
                readonly centerLineInfo: {
                    coord: number;
                    index: number;
                    refName: string;
                    oob: boolean;
                    assemblyName: string;
                    offset: number;
                    start: number;
                    end: number;
                    reversed: boolean;
                } | undefined;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }) => JSX.Element;
        ZoomControls: ({ model }: {
            model: {
                id: string;
                displayName: string | undefined;
                minimized: boolean;
                type: string;
                offsetPx: number;
                bpPerPx: number;
                displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    refName: import("mobx-state-tree").ISimpleType<string>;
                    start: import("mobx-state-tree").ISimpleType<number>;
                    end: import("mobx-state-tree").ISimpleType<number>;
                    reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                } & {
                    assemblyName: import("mobx-state-tree").ISimpleType<string>;
                }, {
                    setRefName(newRefName: string): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    refName: import("mobx-state-tree").ISimpleType<string>;
                    start: import("mobx-state-tree").ISimpleType<number>;
                    end: import("mobx-state-tree").ISimpleType<number>;
                    reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                } & {
                    assemblyName: import("mobx-state-tree").ISimpleType<string>;
                }, {
                    setRefName(newRefName: string): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
                hideHeader: boolean;
                hideHeaderOverview: boolean;
                hideNoTracksActive: boolean;
                trackSelectorType: string;
                trackLabels: string;
                showCenterLine: boolean;
                showCytobandsSetting: boolean;
                showGridlines: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                width: number;
            } & {
                menuItems(): import("@jbrowse/core/ui").MenuItem[];
            } & {
                setDisplayName(name: string): void;
                setWidth(newWidth: number): void;
                setMinimized(flag: boolean): void;
            } & {
                volatileWidth: number | undefined;
                minimumBlockWidth: number;
                draggingTrackId: string | undefined;
                volatileError: Error | undefined;
                afterDisplayedRegionsSetCallbacks: Function[];
                scaleFactor: number;
                trackRefs: {
                    [key: string]: any;
                };
                coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
                coarseTotalBp: number;
                leftOffset: import("./LinearGenomeView").BpOffset | undefined;
                rightOffset: import("./LinearGenomeView").BpOffset | undefined;
                searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
                searchQuery: string | undefined;
                seqDialogDisplayed: boolean;
            } & {
                readonly width: number;
                readonly interRegionPaddingWidth: number;
                readonly assemblyNames: string[];
            } & {
                MiniControlsComponent(): import("react").FC<any>;
                HeaderComponent(): import("react").FC<any>;
                readonly assemblyErrors: string;
                readonly assembliesInitialized: boolean;
                readonly initialized: boolean;
                readonly hasDisplayedRegions: boolean;
                readonly isSearchDialogDisplayed: boolean;
                readonly scaleBarHeight: number;
                readonly headerHeight: number;
                readonly trackHeights: any;
                readonly trackHeightsWithResizeHandles: any;
                readonly height: any;
                readonly totalBp: number;
                readonly maxBpPerPx: number;
                readonly minBpPerPx: number;
                readonly error: string | Error;
                readonly maxOffset: number;
                readonly minOffset: number;
                readonly displayedRegionsTotalPx: number;
                renderProps(): any;
                searchScope(assemblyName: string): {
                    assemblyName: string;
                    includeAggregateIndexes: boolean;
                    tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
                };
                getTrack(id: string): any;
                rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
                rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
                readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
            } & {
                setShowCytobands(flag: boolean): void;
                setWidth(newWidth: number): void;
                setError(error: Error | undefined): void;
                toggleHeader(): void;
                toggleHeaderOverview(): void;
                toggleNoTracksActive(): void;
                toggleShowGridlines(): void;
                scrollTo(offsetPx: number): number;
                zoomTo(bpPerPx: number): number;
                setOffsets(left?: import("./LinearGenomeView").BpOffset | undefined, right?: import("./LinearGenomeView").BpOffset | undefined): void;
                setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
                setGetSequenceDialogOpen(open: boolean): void;
                setNewView(bpPerPx: number, offsetPx: number): void;
                horizontallyFlip(): void;
                showTrack(trackId: string, initialSnapshot?: {}, displayInitialSnapshot?: {}): any;
                hideTrack(trackId: string): number;
            } & {
                moveTrack(movingId: string, targetId: string): void;
                closeView(): void;
                toggleTrack(trackId: string): void;
                setTrackLabels(setting: "offset" | "hidden" | "overlapping"): void;
                toggleCenterLine(): void;
                setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
                activateTrackSelector(): import("@jbrowse/core/util").Widget;
                getSelectedRegions(leftOffset?: import("./LinearGenomeView").BpOffset | undefined, rightOffset?: import("./LinearGenomeView").BpOffset | undefined): {
                    start: number;
                    end: number;
                    regionNumber?: number | undefined;
                    reversed?: boolean | undefined;
                    refName: string;
                    assemblyName: string;
                    key: string;
                    offsetPx: number;
                    widthPx: number;
                    variant?: string | undefined;
                    isLeftEndOfDisplayedRegion?: boolean | undefined;
                }[];
                afterDisplayedRegionsSet(cb: Function): void;
                horizontalScroll(distance: number): number;
                center(): void;
                showAllRegions(): void;
                showAllRegionsInAssembly(assemblyName?: string | undefined): void;
                setDraggingTrackId(idx?: string | undefined): void;
                setScaleFactor(factor: number): void;
                clearView(): void;
                exportSvg(opts?: import("./LinearGenomeView").ExportSvgOptions): Promise<void>;
            } & {
                slide: (viewWidths: number) => void;
            } & {
                zoom: (targetBpPerPx: number) => void;
            } & {
                readonly canShowCytobands: boolean;
                readonly showCytobands: boolean;
                readonly anyCytobandsExist: boolean;
                readonly cytobandOffset: number;
            } & {
                menuItems(): import("@jbrowse/core/ui").MenuItem[];
            } & {
                readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
                readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
                readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
                readonly visibleLocStrings: string;
                readonly coarseVisibleLocStrings: string;
            } & {
                setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
                afterAttach(): void;
            } & {
                moveTo(start?: import("./LinearGenomeView").BpOffset | undefined, end?: import("./LinearGenomeView").BpOffset | undefined): void;
                navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
                navTo(query: import("./LinearGenomeView").NavLocation): void;
                navToMultiple(locations: import("./LinearGenomeView").NavLocation[]): void;
            } & {
                rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
                bpToPx({ refName, coord, regionNumber, }: {
                    refName: string;
                    coord: number;
                    regionNumber?: number | undefined;
                }): {
                    index: number;
                    offsetPx: number;
                } | undefined;
                centerAt(coord: number, refName: string, regionNumber: number): void;
                pxToBp(px: number): {
                    coord: number;
                    index: number;
                    refName: string;
                    oob: boolean;
                    assemblyName: string;
                    offset: number;
                    start: number;
                    end: number;
                    reversed: boolean;
                };
                readonly centerLineInfo: {
                    coord: number;
                    index: number;
                    refName: string;
                    oob: boolean;
                    assemblyName: string;
                    offset: number;
                    start: number;
                    end: number;
                    reversed: boolean;
                } | undefined;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
                minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            } & {
                id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
                bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
                displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    refName: import("mobx-state-tree").ISimpleType<string>;
                    start: import("mobx-state-tree").ISimpleType<number>;
                    end: import("mobx-state-tree").ISimpleType<number>;
                    reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                } & {
                    assemblyName: import("mobx-state-tree").ISimpleType<string>;
                }, {
                    setRefName(newRefName: string): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
                tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
                hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                width: number;
            } & {
                menuItems(): import("@jbrowse/core/ui").MenuItem[];
            } & {
                setDisplayName(name: string): void;
                setWidth(newWidth: number): void;
                setMinimized(flag: boolean): void;
            } & {
                volatileWidth: number | undefined;
                minimumBlockWidth: number;
                draggingTrackId: string | undefined;
                volatileError: Error | undefined;
                afterDisplayedRegionsSetCallbacks: Function[];
                scaleFactor: number;
                trackRefs: {
                    [key: string]: any;
                };
                coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
                coarseTotalBp: number;
                leftOffset: import("./LinearGenomeView").BpOffset | undefined;
                rightOffset: import("./LinearGenomeView").BpOffset | undefined;
                searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
                searchQuery: string | undefined;
                seqDialogDisplayed: boolean;
            } & {
                readonly width: number;
                readonly interRegionPaddingWidth: number;
                readonly assemblyNames: string[];
            } & {
                MiniControlsComponent(): import("react").FC<any>;
                HeaderComponent(): import("react").FC<any>;
                readonly assemblyErrors: string;
                readonly assembliesInitialized: boolean;
                readonly initialized: boolean;
                readonly hasDisplayedRegions: boolean;
                readonly isSearchDialogDisplayed: boolean;
                readonly scaleBarHeight: number;
                readonly headerHeight: number;
                readonly trackHeights: any;
                readonly trackHeightsWithResizeHandles: any;
                readonly height: any;
                readonly totalBp: number;
                readonly maxBpPerPx: number;
                readonly minBpPerPx: number;
                readonly error: string | Error;
                readonly maxOffset: number;
                readonly minOffset: number;
                readonly displayedRegionsTotalPx: number;
                renderProps(): any;
                searchScope(assemblyName: string): {
                    assemblyName: string;
                    includeAggregateIndexes: boolean;
                    tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
                };
                getTrack(id: string): any;
                rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
                rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
                readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
            } & {
                setShowCytobands(flag: boolean): void;
                setWidth(newWidth: number): void;
                setError(error: Error | undefined): void;
                toggleHeader(): void;
                toggleHeaderOverview(): void;
                toggleNoTracksActive(): void;
                toggleShowGridlines(): void;
                scrollTo(offsetPx: number): number;
                zoomTo(bpPerPx: number): number;
                setOffsets(left?: import("./LinearGenomeView").BpOffset | undefined, right?: import("./LinearGenomeView").BpOffset | undefined): void;
                setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
                setGetSequenceDialogOpen(open: boolean): void;
                setNewView(bpPerPx: number, offsetPx: number): void;
                horizontallyFlip(): void;
                showTrack(trackId: string, initialSnapshot?: {}, displayInitialSnapshot?: {}): any;
                hideTrack(trackId: string): number;
            } & {
                moveTrack(movingId: string, targetId: string): void;
                closeView(): void;
                toggleTrack(trackId: string): void;
                setTrackLabels(setting: "offset" | "hidden" | "overlapping"): void;
                toggleCenterLine(): void;
                setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
                activateTrackSelector(): import("@jbrowse/core/util").Widget;
                getSelectedRegions(leftOffset?: import("./LinearGenomeView").BpOffset | undefined, rightOffset?: import("./LinearGenomeView").BpOffset | undefined): {
                    start: number;
                    end: number;
                    regionNumber?: number | undefined;
                    reversed?: boolean | undefined;
                    refName: string;
                    assemblyName: string;
                    key: string;
                    offsetPx: number;
                    widthPx: number;
                    variant?: string | undefined;
                    isLeftEndOfDisplayedRegion?: boolean | undefined;
                }[];
                afterDisplayedRegionsSet(cb: Function): void;
                horizontalScroll(distance: number): number;
                center(): void;
                showAllRegions(): void;
                showAllRegionsInAssembly(assemblyName?: string | undefined): void;
                setDraggingTrackId(idx?: string | undefined): void;
                setScaleFactor(factor: number): void;
                clearView(): void;
                exportSvg(opts?: import("./LinearGenomeView").ExportSvgOptions): Promise<void>;
            } & {
                slide: (viewWidths: number) => void;
            } & {
                zoom: (targetBpPerPx: number) => void;
            } & {
                readonly canShowCytobands: boolean;
                readonly showCytobands: boolean;
                readonly anyCytobandsExist: boolean;
                readonly cytobandOffset: number;
            } & {
                menuItems(): import("@jbrowse/core/ui").MenuItem[];
            } & {
                readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
                readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
                readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
                readonly visibleLocStrings: string;
                readonly coarseVisibleLocStrings: string;
            } & {
                setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
                afterAttach(): void;
            } & {
                moveTo(start?: import("./LinearGenomeView").BpOffset | undefined, end?: import("./LinearGenomeView").BpOffset | undefined): void;
                navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
                navTo(query: import("./LinearGenomeView").NavLocation): void;
                navToMultiple(locations: import("./LinearGenomeView").NavLocation[]): void;
            } & {
                rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
                bpToPx({ refName, coord, regionNumber, }: {
                    refName: string;
                    coord: number;
                    regionNumber?: number | undefined;
                }): {
                    index: number;
                    offsetPx: number;
                } | undefined;
                centerAt(coord: number, refName: string, regionNumber: number): void;
                pxToBp(px: number): {
                    coord: number;
                    index: number;
                    refName: string;
                    oob: boolean;
                    assemblyName: string;
                    offset: number;
                    start: number;
                    end: number;
                    reversed: boolean;
                };
                readonly centerLineInfo: {
                    coord: number;
                    index: number;
                    refName: string;
                    oob: boolean;
                    assemblyName: string;
                    offset: number;
                    start: number;
                    end: number;
                    reversed: boolean;
                } | undefined;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }) => JSX.Element;
        LinearGenomeView: ({ model }: {
            model: {
                id: string;
                displayName: string | undefined;
                minimized: boolean;
                type: string;
                offsetPx: number;
                bpPerPx: number;
                displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    refName: import("mobx-state-tree").ISimpleType<string>;
                    start: import("mobx-state-tree").ISimpleType<number>;
                    end: import("mobx-state-tree").ISimpleType<number>;
                    reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                } & {
                    assemblyName: import("mobx-state-tree").ISimpleType<string>;
                }, {
                    setRefName(newRefName: string): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    refName: import("mobx-state-tree").ISimpleType<string>;
                    start: import("mobx-state-tree").ISimpleType<number>;
                    end: import("mobx-state-tree").ISimpleType<number>;
                    reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                } & {
                    assemblyName: import("mobx-state-tree").ISimpleType<string>;
                }, {
                    setRefName(newRefName: string): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
                tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
                hideHeader: boolean;
                hideHeaderOverview: boolean;
                hideNoTracksActive: boolean;
                trackSelectorType: string;
                trackLabels: string;
                showCenterLine: boolean;
                showCytobandsSetting: boolean;
                showGridlines: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                width: number;
            } & {
                menuItems(): import("@jbrowse/core/ui").MenuItem[];
            } & {
                setDisplayName(name: string): void;
                setWidth(newWidth: number): void;
                setMinimized(flag: boolean): void;
            } & {
                volatileWidth: number | undefined;
                minimumBlockWidth: number;
                draggingTrackId: string | undefined;
                volatileError: Error | undefined;
                afterDisplayedRegionsSetCallbacks: Function[];
                scaleFactor: number;
                trackRefs: {
                    [key: string]: any;
                };
                coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
                coarseTotalBp: number;
                leftOffset: import("./LinearGenomeView").BpOffset | undefined;
                rightOffset: import("./LinearGenomeView").BpOffset | undefined;
                searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
                searchQuery: string | undefined;
                seqDialogDisplayed: boolean;
            } & {
                readonly width: number;
                readonly interRegionPaddingWidth: number;
                readonly assemblyNames: string[];
            } & {
                MiniControlsComponent(): import("react").FC<any>;
                HeaderComponent(): import("react").FC<any>;
                readonly assemblyErrors: string;
                readonly assembliesInitialized: boolean;
                readonly initialized: boolean;
                readonly hasDisplayedRegions: boolean;
                readonly isSearchDialogDisplayed: boolean;
                readonly scaleBarHeight: number;
                readonly headerHeight: number;
                readonly trackHeights: any;
                readonly trackHeightsWithResizeHandles: any;
                readonly height: any;
                readonly totalBp: number;
                readonly maxBpPerPx: number;
                readonly minBpPerPx: number;
                readonly error: string | Error;
                readonly maxOffset: number;
                readonly minOffset: number;
                readonly displayedRegionsTotalPx: number;
                renderProps(): any;
                searchScope(assemblyName: string): {
                    assemblyName: string;
                    includeAggregateIndexes: boolean;
                    tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
                };
                getTrack(id: string): any;
                rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
                rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
                readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
            } & {
                setShowCytobands(flag: boolean): void;
                setWidth(newWidth: number): void;
                setError(error: Error | undefined): void;
                toggleHeader(): void;
                toggleHeaderOverview(): void;
                toggleNoTracksActive(): void;
                toggleShowGridlines(): void;
                scrollTo(offsetPx: number): number;
                zoomTo(bpPerPx: number): number;
                setOffsets(left?: import("./LinearGenomeView").BpOffset | undefined, right?: import("./LinearGenomeView").BpOffset | undefined): void;
                setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
                setGetSequenceDialogOpen(open: boolean): void;
                setNewView(bpPerPx: number, offsetPx: number): void;
                horizontallyFlip(): void;
                showTrack(trackId: string, initialSnapshot?: {}, displayInitialSnapshot?: {}): any;
                hideTrack(trackId: string): number;
            } & {
                moveTrack(movingId: string, targetId: string): void;
                closeView(): void;
                toggleTrack(trackId: string): void;
                setTrackLabels(setting: "offset" | "hidden" | "overlapping"): void;
                toggleCenterLine(): void;
                setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
                activateTrackSelector(): import("@jbrowse/core/util").Widget;
                getSelectedRegions(leftOffset?: import("./LinearGenomeView").BpOffset | undefined, rightOffset?: import("./LinearGenomeView").BpOffset | undefined): {
                    start: number;
                    end: number;
                    regionNumber?: number | undefined;
                    reversed?: boolean | undefined;
                    refName: string;
                    assemblyName: string;
                    key: string;
                    offsetPx: number;
                    widthPx: number;
                    variant?: string | undefined;
                    isLeftEndOfDisplayedRegion?: boolean | undefined;
                }[];
                afterDisplayedRegionsSet(cb: Function): void;
                horizontalScroll(distance: number): number;
                center(): void;
                showAllRegions(): void;
                showAllRegionsInAssembly(assemblyName?: string | undefined): void;
                setDraggingTrackId(idx?: string | undefined): void;
                setScaleFactor(factor: number): void;
                clearView(): void;
                exportSvg(opts?: import("./LinearGenomeView").ExportSvgOptions): Promise<void>;
            } & {
                slide: (viewWidths: number) => void;
            } & {
                zoom: (targetBpPerPx: number) => void;
            } & {
                readonly canShowCytobands: boolean;
                readonly showCytobands: boolean;
                readonly anyCytobandsExist: boolean;
                readonly cytobandOffset: number;
            } & {
                menuItems(): import("@jbrowse/core/ui").MenuItem[];
            } & {
                readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
                readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
                readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
                readonly visibleLocStrings: string;
                readonly coarseVisibleLocStrings: string;
            } & {
                setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
                afterAttach(): void;
            } & {
                moveTo(start?: import("./LinearGenomeView").BpOffset | undefined, end?: import("./LinearGenomeView").BpOffset | undefined): void;
                navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
                navTo(query: import("./LinearGenomeView").NavLocation): void;
                navToMultiple(locations: import("./LinearGenomeView").NavLocation[]): void;
            } & {
                rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
                bpToPx({ refName, coord, regionNumber, }: {
                    refName: string;
                    coord: number;
                    regionNumber?: number | undefined;
                }): {
                    index: number;
                    offsetPx: number;
                } | undefined;
                centerAt(coord: number, refName: string, regionNumber: number): void;
                pxToBp(px: number): {
                    coord: number;
                    index: number;
                    refName: string;
                    oob: boolean;
                    assemblyName: string;
                    offset: number;
                    start: number;
                    end: number;
                    reversed: boolean;
                };
                readonly centerLineInfo: {
                    coord: number;
                    index: number;
                    refName: string;
                    oob: boolean;
                    assemblyName: string;
                    offset: number;
                    start: number;
                    end: number;
                    reversed: boolean;
                } | undefined;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
                minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            } & {
                id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
                bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
                displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    refName: import("mobx-state-tree").ISimpleType<string>;
                    start: import("mobx-state-tree").ISimpleType<number>;
                    end: import("mobx-state-tree").ISimpleType<number>;
                    reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                } & {
                    assemblyName: import("mobx-state-tree").ISimpleType<string>;
                }, {
                    setRefName(newRefName: string): void;
                }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
                tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
                hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
                showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                width: number;
            } & {
                menuItems(): import("@jbrowse/core/ui").MenuItem[];
            } & {
                setDisplayName(name: string): void;
                setWidth(newWidth: number): void;
                setMinimized(flag: boolean): void;
            } & {
                volatileWidth: number | undefined;
                minimumBlockWidth: number;
                draggingTrackId: string | undefined;
                volatileError: Error | undefined;
                afterDisplayedRegionsSetCallbacks: Function[];
                scaleFactor: number;
                trackRefs: {
                    [key: string]: any;
                };
                coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
                coarseTotalBp: number;
                leftOffset: import("./LinearGenomeView").BpOffset | undefined;
                rightOffset: import("./LinearGenomeView").BpOffset | undefined;
                searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined;
                searchQuery: string | undefined;
                seqDialogDisplayed: boolean;
            } & {
                readonly width: number;
                readonly interRegionPaddingWidth: number;
                readonly assemblyNames: string[];
            } & {
                MiniControlsComponent(): import("react").FC<any>;
                HeaderComponent(): import("react").FC<any>;
                readonly assemblyErrors: string;
                readonly assembliesInitialized: boolean;
                readonly initialized: boolean;
                readonly hasDisplayedRegions: boolean;
                readonly isSearchDialogDisplayed: boolean;
                readonly scaleBarHeight: number;
                readonly headerHeight: number;
                readonly trackHeights: any;
                readonly trackHeightsWithResizeHandles: any;
                readonly height: any;
                readonly totalBp: number;
                readonly maxBpPerPx: number;
                readonly minBpPerPx: number;
                readonly error: string | Error;
                readonly maxOffset: number;
                readonly minOffset: number;
                readonly displayedRegionsTotalPx: number;
                renderProps(): any;
                searchScope(assemblyName: string): {
                    assemblyName: string;
                    includeAggregateIndexes: boolean;
                    tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
                };
                getTrack(id: string): any;
                rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
                rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
                readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
            } & {
                setShowCytobands(flag: boolean): void;
                setWidth(newWidth: number): void;
                setError(error: Error | undefined): void;
                toggleHeader(): void;
                toggleHeaderOverview(): void;
                toggleNoTracksActive(): void;
                toggleShowGridlines(): void;
                scrollTo(offsetPx: number): number;
                zoomTo(bpPerPx: number): number;
                setOffsets(left?: import("./LinearGenomeView").BpOffset | undefined, right?: import("./LinearGenomeView").BpOffset | undefined): void;
                setSearchResults(results?: import("@jbrowse/core/TextSearch/BaseResults").default[] | undefined, query?: string | undefined): void;
                setGetSequenceDialogOpen(open: boolean): void;
                setNewView(bpPerPx: number, offsetPx: number): void;
                horizontallyFlip(): void;
                showTrack(trackId: string, initialSnapshot?: {}, displayInitialSnapshot?: {}): any;
                hideTrack(trackId: string): number;
            } & {
                moveTrack(movingId: string, targetId: string): void;
                closeView(): void;
                toggleTrack(trackId: string): void;
                setTrackLabels(setting: "offset" | "hidden" | "overlapping"): void;
                toggleCenterLine(): void;
                setDisplayedRegions(regions: import("@jbrowse/core/util").Region[]): void;
                activateTrackSelector(): import("@jbrowse/core/util").Widget;
                getSelectedRegions(leftOffset?: import("./LinearGenomeView").BpOffset | undefined, rightOffset?: import("./LinearGenomeView").BpOffset | undefined): {
                    start: number;
                    end: number;
                    regionNumber?: number | undefined;
                    reversed?: boolean | undefined;
                    refName: string;
                    assemblyName: string;
                    key: string;
                    offsetPx: number;
                    widthPx: number;
                    variant?: string | undefined;
                    isLeftEndOfDisplayedRegion?: boolean | undefined;
                }[];
                afterDisplayedRegionsSet(cb: Function): void;
                horizontalScroll(distance: number): number;
                center(): void;
                showAllRegions(): void;
                showAllRegionsInAssembly(assemblyName?: string | undefined): void;
                setDraggingTrackId(idx?: string | undefined): void;
                setScaleFactor(factor: number): void;
                clearView(): void;
                exportSvg(opts?: import("./LinearGenomeView").ExportSvgOptions): Promise<void>;
            } & {
                slide: (viewWidths: number) => void;
            } & {
                zoom: (targetBpPerPx: number) => void;
            } & {
                readonly canShowCytobands: boolean;
                readonly showCytobands: boolean;
                readonly anyCytobandsExist: boolean;
                readonly cytobandOffset: number;
            } & {
                menuItems(): import("@jbrowse/core/ui").MenuItem[];
            } & {
                readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
                readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
                readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
                readonly visibleLocStrings: string;
                readonly coarseVisibleLocStrings: string;
            } & {
                setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
                afterAttach(): void;
            } & {
                moveTo(start?: import("./LinearGenomeView").BpOffset | undefined, end?: import("./LinearGenomeView").BpOffset | undefined): void;
                navToLocString(locString: string, optAssemblyName?: string | undefined): Promise<void>;
                navTo(query: import("./LinearGenomeView").NavLocation): void;
                navToMultiple(locations: import("./LinearGenomeView").NavLocation[]): void;
            } & {
                rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
                bpToPx({ refName, coord, regionNumber, }: {
                    refName: string;
                    coord: number;
                    regionNumber?: number | undefined;
                }): {
                    index: number;
                    offsetPx: number;
                } | undefined;
                centerAt(coord: number, refName: string, regionNumber: number): void;
                pxToBp(px: number): {
                    coord: number;
                    index: number;
                    refName: string;
                    oob: boolean;
                    assemblyName: string;
                    offset: number;
                    start: number;
                    end: number;
                    reversed: boolean;
                };
                readonly centerLineInfo: {
                    coord: number;
                    index: number;
                    refName: string;
                    oob: boolean;
                    assemblyName: string;
                    offset: number;
                    start: number;
                    end: number;
                    reversed: boolean;
                } | undefined;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }) => JSX.Element;
    };
    install(pluginManager: PluginManager): void;
    configure(pluginManager: PluginManager): void;
}
export { baseLinearDisplayConfigSchema, linearBareDisplayConfigSchemaFactory, linearBasicDisplayConfigSchemaFactory, linearBasicDisplayModelFactory, renderToSvg, BaseLinearDisplayComponent, BaseLinearDisplay, RefNameAutocomplete, SearchBox, };
export type { LinearGenomeViewModel, LinearGenomeViewStateModel, BlockModel };
export type { BaseLinearDisplayModel } from './BaseLinearDisplay';

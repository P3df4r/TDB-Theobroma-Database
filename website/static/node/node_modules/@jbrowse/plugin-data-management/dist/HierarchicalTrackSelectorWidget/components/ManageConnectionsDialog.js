"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const mobx_react_1 = require("mobx-react");
const configuration_1 = require("@jbrowse/core/configuration");
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    connectionContainer: {
        margin: theme.spacing(4),
        width: 500,
    },
}));
function ManageConnectionsDlg({ session, handleClose, breakConnection, }) {
    const { classes } = useStyles();
    const { adminMode, connections, sessionConnections } = session;
    return (react_1.default.createElement(material_1.Dialog, { open: true, onClose: handleClose, maxWidth: "lg" },
        react_1.default.createElement(material_1.DialogTitle, null,
            "Delete connections",
            react_1.default.createElement(material_1.IconButton, { className: classes.closeButton, onClick: () => handleClose() },
                react_1.default.createElement(Close_1.default, null))),
        react_1.default.createElement(material_1.DialogContent, null,
            react_1.default.createElement(material_1.Typography, null, "Click the X icon to delete the connection from your config completely"),
            react_1.default.createElement("div", { className: classes.connectionContainer },
                connections.map(conf => {
                    const name = (0, configuration_1.readConfObject)(conf, 'name');
                    return (react_1.default.createElement(material_1.Typography, { key: `conn-${name}` },
                        adminMode || (sessionConnections === null || sessionConnections === void 0 ? void 0 : sessionConnections.includes(conf)) ? (react_1.default.createElement(material_1.IconButton, { onClick: () => breakConnection(conf, true) },
                            react_1.default.createElement(Close_1.default, { color: "error" }))) : (react_1.default.createElement(material_1.Tooltip, { title: "Unable to delete connection in config file as non-admin user" },
                            react_1.default.createElement(material_1.IconButton, null,
                                react_1.default.createElement(Close_1.default, { color: "disabled" })))),
                        name));
                }),
                !connections.length ? (react_1.default.createElement(material_1.Typography, null, "No connections found")) : null)),
        react_1.default.createElement(material_1.DialogActions, null,
            react_1.default.createElement(material_1.Button, { onClick: () => handleClose(), variant: "contained", color: "primary" }, "Close"))));
}
exports.default = (0, mobx_react_1.observer)(ManageConnectionsDlg);
//# sourceMappingURL=ManageConnectionsDialog.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
// icons
const Add_1 = __importDefault(require("@mui/icons-material/Add"));
// other
const react_virtualized_auto_sizer_1 = __importDefault(require("react-virtualized-auto-sizer"));
const util_1 = require("@jbrowse/core/util");
const mobx_react_1 = require("mobx-react");
const react_vtree_1 = require("react-vtree");
const Header_1 = __importDefault(require("./Header"));
const Node_1 = __importDefault(require("./Node"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    fab: {
        position: 'absolute',
        bottom: theme.spacing(6),
        right: theme.spacing(6),
    },
}));
function getNodeData(node, nestingLevel, extra, selection) {
    const isLeaf = !!node.conf;
    const selected = !!selection[node.id];
    return {
        data: {
            defaultHeight: isLeaf ? 22 : 40,
            isLeaf,
            isOpenByDefault: true,
            nestingLevel,
            selected,
            ...node,
            ...extra,
        },
        nestingLevel,
        node,
    };
}
// this is the main tree component for the hierarchical track selector in note:
// in jbrowse-web the toolbar is position="sticky" which means the autosizer
// includes the height of the toolbar, so we subtract the given offsets
const HierarchicalTree = (0, mobx_react_1.observer)(({ height, tree, model, }) => {
    const { filterText, selection, view } = model;
    const treeRef = (0, react_1.useRef)(null);
    const session = (0, util_1.getSession)(model);
    const { drawerPosition } = session;
    const obj = (0, react_1.useMemo)(() => Object.fromEntries(selection.map(s => [s.trackId, s])), [selection]);
    const extra = (0, react_1.useMemo)(() => ({
        onChange: (trackId) => view.toggleTrack(trackId),
        toggleCollapse: (pathName) => model.toggleCategory(pathName),
        tree,
        model,
        drawerPosition,
    }), [view, model, drawerPosition, tree]);
    const treeWalker = (0, react_1.useCallback)(function* treeWalker() {
        for (let i = 0; i < tree.children.length; i++) {
            const r = tree.children[i];
            yield getNodeData(r, 0, extra, obj);
        }
        while (true) {
            // @ts-ignore
            const parentMeta = yield;
            for (let i = 0; i < parentMeta.node.children.length; i++) {
                const curr = parentMeta.node.children[i];
                yield getNodeData(curr, parentMeta.nestingLevel + 1, extra, obj);
            }
        }
    }, [tree, extra, obj]);
    (0, react_1.useEffect)(() => {
        // @ts-ignore
        treeRef.current.recomputeTree({
            refreshNodes: true,
            useDefaultHeight: true,
        });
    }, [tree, filterText]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(react_vtree_1.VariableSizeTree, { ref: treeRef, treeWalker: treeWalker, height: height }, Node_1.default)));
});
// Don't use autosizer in jest and instead hardcode a height, otherwise fails
// jest tests
const AutoSizedHierarchicalTree = ({ tree, model, offset, }) => {
    return typeof jest === 'undefined' ? (react_1.default.createElement(react_virtualized_auto_sizer_1.default, { disableWidth: true }, ({ height }) => {
        return (react_1.default.createElement(HierarchicalTree, { height: height - offset, model: model, tree: tree }));
    })) : (react_1.default.createElement(HierarchicalTree, { height: 9000, model: model, tree: tree }));
};
const Wrapper = ({ overrideDimensions, children, }) => {
    return overrideDimensions ? (react_1.default.createElement("div", { style: { ...overrideDimensions } }, children)) : (react_1.default.createElement(react_1.default.Fragment, null, children));
};
const HierarchicalTrackSelectorContainer = (0, mobx_react_1.observer)(({ model, toolbarHeight, overrideDimensions, }) => {
    const { classes } = useStyles();
    const session = (0, util_1.getSession)(model);
    const [anchorEl, setAnchorEl] = (0, react_1.useState)(null);
    function handleFabClose() {
        setAnchorEl(null);
    }
    const hasConnections = (0, util_1.isSessionModelWithConnections)(session);
    const hasAddTrack = (0, util_1.isSessionWithAddTracks)(session);
    return (react_1.default.createElement(Wrapper, { overrideDimensions: overrideDimensions },
        react_1.default.createElement(HierarchicalTrackSelector, { model: model, toolbarHeight: toolbarHeight }),
        hasAddTrack || hasConnections ? (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(material_1.Fab, { color: "secondary", className: classes.fab, onClick: event => setAnchorEl(event.currentTarget) },
                react_1.default.createElement(Add_1.default, null)),
            react_1.default.createElement(material_1.Menu, { anchorEl: anchorEl, open: Boolean(anchorEl), onClose: () => setAnchorEl(null) },
                hasConnections ? (react_1.default.createElement(material_1.MenuItem, { onClick: () => {
                        handleFabClose();
                        if ((0, util_1.isSessionModelWithWidgets)(session)) {
                            session.showWidget(session.addWidget('AddConnectionWidget', 'addConnectionWidget'));
                        }
                    } }, "Add connection")) : null,
                hasAddTrack ? (react_1.default.createElement(material_1.MenuItem, { onClick: () => {
                        handleFabClose();
                        if ((0, util_1.isSessionModelWithWidgets)(session)) {
                            session.showWidget(session.addWidget('AddTrackWidget', 'addTrackWidget', {
                                view: model.view.id,
                            }));
                        }
                    } }, "Add track")) : null))) : null));
});
const HierarchicalTrackSelector = (0, mobx_react_1.observer)(({ model, toolbarHeight = 0, }) => {
    const [assemblyIdx, setAssemblyIdx] = (0, react_1.useState)(0);
    const [headerHeight, setHeaderHeight] = (0, react_1.useState)(0);
    const { assemblyNames } = model;
    const assemblyName = assemblyNames.length ? assemblyNames[assemblyIdx] : '';
    return assemblyName ? (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(Header_1.default, { model: model, setHeaderHeight: setHeaderHeight, setAssemblyIdx: setAssemblyIdx, assemblyIdx: assemblyIdx }),
        react_1.default.createElement(AutoSizedHierarchicalTree, { tree: model.hierarchy(assemblyName), model: model, offset: toolbarHeight + headerHeight }))) : null;
});
exports.default = HierarchicalTrackSelectorContainer;
//# sourceMappingURL=HierarchicalTrackSelector.js.map
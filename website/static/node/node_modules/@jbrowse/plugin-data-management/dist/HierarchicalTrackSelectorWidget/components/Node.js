"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
// icons
const ArrowDropDown_1 = __importDefault(require("@mui/icons-material/ArrowDropDown"));
const ArrowRight_1 = __importDefault(require("@mui/icons-material/ArrowRight"));
const MoreHoriz_1 = __importDefault(require("@mui/icons-material/MoreHoriz"));
const Menu_1 = __importDefault(require("@jbrowse/core/ui/Menu"));
const util_1 = require("@jbrowse/core/util");
const configuration_1 = require("@jbrowse/core/configuration");
const util_2 = require("./util");
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    compactCheckbox: {
        padding: 0,
    },
    checkboxLabel: {
        marginRight: 0,
        '&:hover': {
            backgroundColor: '#eee',
        },
    },
    contrastColor: {
        color: theme.palette.secondary.contrastText,
    },
    // this accordionBase element's small padding is used to give a margin to
    // accordionColor it a "margin" because the virtualized elements can't really
    // use margin in a conventional way (it doesn't affect layout)
    accordionBase: {
        display: 'flex',
    },
    accordionCard: {
        padding: 3,
        cursor: 'pointer',
        display: 'flex',
    },
    nestingLevelMarker: {
        position: 'absolute',
        borderLeft: '1.5px solid #555',
    },
    // accordionColor set's display:flex so that the child accordionText use
    // vertically centered text
    accordionColor: {
        background: theme.palette.tertiary.main,
        color: theme.palette.tertiary.contrastText,
        width: '100%',
        display: 'flex',
        paddingLeft: 5,
    },
    // margin:auto 0 to center text vertically
    accordionText: {
        margin: 'auto 0',
    },
}));
function treeToMap(tree, map = new Map()) {
    if (tree.id && tree.children.length) {
        map.set(tree.id, tree);
    }
    for (let i = 0; i < tree.children.length; i++) {
        const node = tree.children[i];
        treeToMap(node, map);
    }
    return map;
}
function isUnsupported(name = '') {
    return name.endsWith('(Unsupported)') || name.endsWith('(Unknown)');
}
// An individual node in the track selector. Note: manually sets cursor:
// pointer improves usability for what can be clicked
function Node(props) {
    var _a, _b;
    const { data, isOpen, style, setOpen } = props;
    const { checked, conf, drawerPosition, id, isLeaf, model, name, nestingLevel, onChange, selected, toggleCollapse, tree, } = data;
    const { classes } = useStyles();
    const width = 10;
    const [menuEl, setMenuEl] = (0, react_1.useState)(null);
    const [info, setInfo] = (0, react_1.useState)();
    const marginLeft = nestingLevel * width + (isLeaf ? width : 0);
    const description = (conf && (0, configuration_1.readConfObject)(conf, ['description'])) || '';
    return (react_1.default.createElement("div", { style: style, className: !isLeaf ? classes.accordionBase : undefined },
        new Array(nestingLevel).fill(0).map((_, idx) => (react_1.default.createElement("div", { key: `mark-${idx}`, style: { left: idx * width + 4, height: style === null || style === void 0 ? void 0 : style.height }, className: classes.nestingLevelMarker }))),
        react_1.default.createElement("div", { className: !isLeaf ? classes.accordionCard : undefined, onClick: () => {
                if (!menuEl) {
                    toggleCollapse(id);
                    setOpen(!isOpen);
                }
            }, style: {
                marginLeft,
                whiteSpace: 'nowrap',
                width: '100%',
            } },
            react_1.default.createElement("div", { className: !isLeaf ? classes.accordionColor : undefined },
                !isLeaf ? (react_1.default.createElement("div", { className: classes.accordionText },
                    react_1.default.createElement(material_1.Typography, null,
                        isOpen ? react_1.default.createElement(ArrowDropDown_1.default, null) : react_1.default.createElement(ArrowRight_1.default, null),
                        name,
                        react_1.default.createElement(material_1.IconButton, { onClick: event => {
                                setMenuEl(event.currentTarget);
                                event.stopPropagation();
                            }, className: classes.contrastColor },
                            react_1.default.createElement(MoreHoriz_1.default, null))))) : (react_1.default.createElement(react_1.default.Fragment, null,
                    react_1.default.createElement(material_1.Tooltip, { title: description + (selected ? ' (in selection)' : ''), placement: drawerPosition === 'left' ? 'right' : 'left' },
                        react_1.default.createElement(material_1.FormControlLabel, { className: classes.checkboxLabel, control: react_1.default.createElement(material_1.Checkbox, { className: classes.compactCheckbox, checked: checked, onChange: () => onChange(id), disabled: isUnsupported(name), inputProps: {
                                    // @ts-ignore
                                    'data-testid': `htsTrackEntry-${id}`,
                                } }), label: react_1.default.createElement("div", { style: {
                                    background: selected ? '#cccc' : undefined,
                                    padding: 1,
                                } }, name) })),
                    react_1.default.createElement(material_1.IconButton, { onClick: e => setInfo({ target: e.currentTarget, id, conf }), style: { padding: 0 }, color: "secondary", "data-testid": `htsTrackEntryMenu-${id}` },
                        react_1.default.createElement(MoreHoriz_1.default, null)))),
                menuEl ? (react_1.default.createElement(Menu_1.default, { anchorEl: menuEl, menuItems: [
                        {
                            label: 'Add to selection',
                            onClick: () => model.addToSelection((0, util_2.getAllChildren)(treeToMap(tree).get(id))),
                        },
                        {
                            label: 'Remove from selection',
                            onClick: () => model.removeFromSelection((0, util_2.getAllChildren)(treeToMap(tree).get(id))),
                        },
                    ], onMenuItemClick: (_event, callback) => {
                        callback();
                        setMenuEl(null);
                    }, open: Boolean(menuEl), onClose: () => setMenuEl(null) })) : null,
                info ? (react_1.default.createElement(Menu_1.default, { anchorEl: info === null || info === void 0 ? void 0 : info.target, menuItems: [
                        ...(((_b = (_a = (0, util_1.getSession)(model)).getTrackActionMenuItems) === null || _b === void 0 ? void 0 : _b.call(_a, info.conf)) ||
                            []),
                        {
                            label: 'Add to selection',
                            onClick: () => model.addToSelection([info.conf]),
                        },
                        ...(selected
                            ? [
                                {
                                    label: 'Remove from selection',
                                    onClick: () => model.removeFromSelection([info.conf]),
                                },
                            ]
                            : []),
                    ], onMenuItemClick: (_event, callback) => {
                        callback();
                        setInfo(undefined);
                    }, open: Boolean(info), onClose: () => setInfo(undefined) })) : null))));
}
exports.default = Node;
//# sourceMappingURL=Node.js.map
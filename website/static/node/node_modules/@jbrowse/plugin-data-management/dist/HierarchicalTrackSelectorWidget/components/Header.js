"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const Menu_1 = __importDefault(require("@jbrowse/core/ui/Menu"));
const util_1 = require("@jbrowse/core/util");
const configuration_1 = require("@jbrowse/core/configuration");
// icons
const Clear_1 = __importDefault(require("@mui/icons-material/Clear"));
const Menu_2 = __importDefault(require("@mui/icons-material/Menu"));
const ShoppingCart_1 = __importDefault(require("@mui/icons-material/ShoppingCart"));
const Icons_1 = require("@jbrowse/core/ui/Icons");
// lazy components
const CloseConnectionDialog = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./CloseConnectionDialog'))));
const DeleteConnectionDialog = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./DeleteConnectionDialog'))));
const ManageConnectionsDialog = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./ManageConnectionsDialog'))));
const ToggleConnectionsDialog = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./ToggleConnectionsDialog'))));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    searchBox: {
        margin: theme.spacing(2),
    },
    menuIcon: {
        marginRight: theme.spacing(1),
        marginBottom: 0,
    },
}));
function HierarchicalTrackSelectorHeader({ model, setHeaderHeight, setAssemblyIdx, assemblyIdx, }) {
    const { classes } = useStyles();
    const session = (0, util_1.getSession)(model);
    const [connectionEl, setConnectionEl] = (0, react_1.useState)();
    const [selectionEl, setSelectionEl] = (0, react_1.useState)();
    const [menuEl, setMenuEl] = (0, react_1.useState)();
    const [modalInfo, setModalInfo] = (0, react_1.useState)();
    const [deleteDlgDetails, setDeleteDlgDetails] = (0, react_1.useState)();
    const [connectionManagerOpen, setConnectionManagerOpen] = (0, react_1.useState)(false);
    const [connectionToggleOpen, setConnectionToggleOpen] = (0, react_1.useState)(false);
    const { assemblyNames } = model;
    function breakConnection(connectionConf, deletingConnection) {
        const name = (0, configuration_1.readConfObject)(connectionConf, 'name');
        // @ts-ignore
        const result = session.prepareToBreakConnection(connectionConf);
        if (result) {
            const [safelyBreakConnection, dereferenceTypeCount] = result;
            if (Object.keys(dereferenceTypeCount).length > 0) {
                setModalInfo({
                    connectionConf,
                    safelyBreakConnection,
                    dereferenceTypeCount,
                    name,
                });
            }
            else {
                safelyBreakConnection();
            }
        }
        if (deletingConnection) {
            setDeleteDlgDetails({ name, connectionConf });
        }
    }
    const connectionMenuItems = [
        {
            label: 'Turn on/off connections...',
            onClick: () => setConnectionToggleOpen(true),
        },
    ];
    if ((0, util_1.isSessionModelWithConnections)(session)) {
        connectionMenuItems.unshift({
            label: 'Add connection',
            onClick: () => {
                if ((0, util_1.isSessionModelWithWidgets)(session)) {
                    session.showWidget(session.addWidget('AddConnectionWidget', 'addConnectionWidget'));
                }
            },
        });
        connectionMenuItems.push({
            label: 'Delete connections...',
            onClick: () => setConnectionManagerOpen(true),
        });
    }
    const assemblyMenuItems = assemblyNames.length > 1
        ? [
            {
                label: 'Select assembly...',
                subMenu: assemblyNames.map((name, idx) => ({
                    label: name,
                    onClick: () => setAssemblyIdx(idx),
                })),
            },
        ]
        : [];
    const menuItems = [
        {
            label: 'Add track...',
            onClick: () => {
                if ((0, util_1.isSessionModelWithWidgets)(session)) {
                    session.showWidget(session.addWidget('AddTrackWidget', 'addTrackWidget', {
                        view: model.view.id,
                    }));
                }
            },
        },
        ...assemblyMenuItems,
    ];
    const items = (0, util_1.getEnv)(model).pluginManager.evaluateExtensionPoint('TrackSelector-multiTrackMenuItems', [], { session });
    return (react_1.default.createElement("div", { ref: ref => setHeaderHeight((ref === null || ref === void 0 ? void 0 : ref.getBoundingClientRect().height) || 0), "data-testid": "hierarchical_track_selector" },
        react_1.default.createElement("div", { style: { display: 'flex' } },
            (0, util_1.isSessionWithAddTracks)(session) && (react_1.default.createElement(material_1.IconButton, { className: classes.menuIcon, onClick: event => setMenuEl(event.currentTarget) },
                react_1.default.createElement(Menu_2.default, null))),
            session.makeConnection && (react_1.default.createElement(material_1.IconButton, { className: classes.menuIcon, onClick: event => setConnectionEl(event.currentTarget) },
                react_1.default.createElement(Icons_1.Cable, null))),
            model.selection.length ? (react_1.default.createElement(material_1.IconButton, { className: classes.menuIcon, onClick: event => setSelectionEl(event.currentTarget) },
                react_1.default.createElement(material_1.Badge, { badgeContent: model.selection.length, color: "primary" },
                    react_1.default.createElement(ShoppingCart_1.default, null)))) : null,
            react_1.default.createElement(material_1.TextField, { className: classes.searchBox, label: "Filter tracks", value: model.filterText, onChange: event => model.setFilterText(event.target.value), fullWidth: true, InputProps: {
                    endAdornment: (react_1.default.createElement(material_1.InputAdornment, { position: "end" },
                        react_1.default.createElement(material_1.IconButton, { color: "secondary", onClick: model.clearFilterText },
                            react_1.default.createElement(Clear_1.default, null)))),
                } })),
        react_1.default.createElement(Menu_1.default, { anchorEl: connectionEl, open: Boolean(connectionEl), onMenuItemClick: (_, callback) => {
                callback();
                setConnectionEl(undefined);
            }, onClose: () => setConnectionEl(undefined), menuItems: connectionMenuItems }),
        react_1.default.createElement(Menu_1.default, { anchorEl: menuEl, open: Boolean(menuEl), onMenuItemClick: (_, callback) => {
                callback();
                setMenuEl(undefined);
            }, onClose: () => setMenuEl(undefined), menuItems: menuItems }),
        react_1.default.createElement(Menu_1.default, { anchorEl: selectionEl, open: Boolean(selectionEl), onMenuItemClick: (_, callback) => {
                callback();
                setSelectionEl(undefined);
            }, onClose: () => setSelectionEl(undefined), menuItems: [
                { label: 'Clear', onClick: () => model.clearSelection() },
                ...items.map(item => ({
                    ...item,
                    ...('onClick' in item
                        ? { onClick: () => item.onClick(model) }
                        : {}),
                })),
            ] }),
        react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement("div", null) },
            modalInfo ? (react_1.default.createElement(CloseConnectionDialog, { modalInfo: modalInfo, setModalInfo: setModalInfo })) : null,
            deleteDlgDetails ? (react_1.default.createElement(DeleteConnectionDialog, { handleClose: () => setDeleteDlgDetails(undefined), deleteDialogDetails: deleteDlgDetails, session: session })) : null,
            connectionManagerOpen ? (react_1.default.createElement(ManageConnectionsDialog, { handleClose: () => setConnectionManagerOpen(false), breakConnection: breakConnection, session: session })) : null,
            connectionToggleOpen ? (react_1.default.createElement(ToggleConnectionsDialog, { handleClose: () => setConnectionToggleOpen(false), session: session, breakConnection: breakConnection })) : null)));
}
exports.default = (0, mobx_react_1.observer)(HierarchicalTrackSelectorHeader);
//# sourceMappingURL=Header.js.map
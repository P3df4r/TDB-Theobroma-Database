"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ellipses = void 0;
const react_1 = __importDefault(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const mobx_react_1 = require("mobx-react");
const configuration_1 = require("@jbrowse/core/configuration");
function ellipses(slug) {
    return slug.length > 20 ? `${slug.slice(0, 20)}...` : slug;
}
exports.ellipses = ellipses;
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    connectionContainer: {
        width: 500,
        margin: theme.spacing(4),
    },
}));
function ToggleConnectionDialog({ session, handleClose, breakConnection, }) {
    const { classes } = useStyles();
    const { connections, connectionInstances: instances = [] } = session;
    return (react_1.default.createElement(material_1.Dialog, { open: true, onClose: handleClose, maxWidth: "lg" },
        react_1.default.createElement(material_1.DialogTitle, null,
            "Turn on/off connections",
            react_1.default.createElement(material_1.IconButton, { className: classes.closeButton, onClick: () => handleClose() },
                react_1.default.createElement(Close_1.default, null))),
        react_1.default.createElement(material_1.DialogContent, null,
            react_1.default.createElement(material_1.Typography, null, "Use the checkbox to turn on/off connections"),
            react_1.default.createElement("div", { className: classes.connectionContainer },
                connections.map(conf => {
                    const name = (0, configuration_1.readConfObject)(conf, 'name');
                    const assemblyNames = (0, configuration_1.readConfObject)(conf, 'assemblyNames');
                    const found = instances.find(conn => name === conn.name);
                    return (react_1.default.createElement(material_1.FormControlLabel, { key: conf.connectionId, control: react_1.default.createElement(material_1.Checkbox, { checked: !!found, onChange: () => {
                                var _a;
                                if (found) {
                                    breakConnection(conf);
                                }
                                else {
                                    (_a = session.makeConnection) === null || _a === void 0 ? void 0 : _a.call(session, conf);
                                }
                            }, color: "primary" }), label: `${name} (${ellipses(assemblyNames.join(','))})` }));
                }),
                !connections.length ? (react_1.default.createElement(material_1.Typography, null, "No connections found")) : null)),
        react_1.default.createElement(material_1.DialogActions, null,
            react_1.default.createElement(material_1.Button, { onClick: () => handleClose(), variant: "contained", color: "primary" }, "Close"))));
}
exports.default = (0, mobx_react_1.observer)(ToggleConnectionDialog);
//# sourceMappingURL=ToggleConnectionsDialog.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const models_1 = require("@jbrowse/core/pluggableElementTypes/models");
const configuration_1 = require("@jbrowse/core/configuration");
const util_1 = require("@jbrowse/core/util");
const mobx_state_tree_1 = require("mobx-state-tree");
const configSchema_1 = __importDefault(require("./configSchema"));
const ucscTrackHub_1 = require("./ucscTrackHub");
function UCSCTrackHubConnection(pluginManager) {
    return mobx_state_tree_1.types.compose('UCSCTrackHubConnection', (0, models_1.BaseConnectionModelFactory)(pluginManager), mobx_state_tree_1.types
        .model({
        configuration: (0, configuration_1.ConfigurationReference)(configSchema_1.default),
        type: mobx_state_tree_1.types.literal('UCSCTrackHubConnection'),
    })
        .actions(self => ({
        connect() {
            const connectionName = (0, configuration_1.getConf)(self, 'name');
            const hubFileLocation = (0, configuration_1.getConf)(self, 'hubTxtLocation');
            const session = (0, util_1.getSession)(self);
            (0, ucscTrackHub_1.fetchHubFile)(hubFileLocation)
                .then(hubFile => {
                const genomesFileLocation = hubFileLocation.uri
                    ? {
                        uri: new URL(hubFile.get('genomesFile'), hubFileLocation.uri).href,
                        locationType: 'UriLocation',
                    }
                    : {
                        localPath: hubFile.get('genomesFile'),
                        locationType: 'LocalPathLocation',
                    };
                return Promise.all([
                    hubFile,
                    (0, ucscTrackHub_1.fetchGenomesFile)(genomesFileLocation),
                ]);
            })
                .then(([hubFile, genomesFile]) => {
                const trackDbData = [];
                for (const [genomeName, genome] of genomesFile) {
                    const assemblyNames = (0, configuration_1.getConf)(self, 'assemblyNames');
                    if (assemblyNames.length > 0 &&
                        !assemblyNames.includes(genomeName)) {
                        break;
                    }
                    const assemblyConf = session.assemblies.find(assembly => (0, configuration_1.readConfObject)(assembly, 'name') === genomeName);
                    if (!assemblyConf) {
                        throw new Error(`Cannot find assembly for "${genomeName}" from the genomes file for connection "${connectionName}"`);
                    }
                    const trackDbFileLocation = hubFileLocation.uri
                        ? {
                            uri: new URL(genome.get('trackDb'), new URL(hubFile.get('genomesFile'), hubFileLocation.uri)).href,
                            locationType: 'UriLocation',
                        }
                        : {
                            localPath: genome.get('trackDb'),
                            locationType: 'LocalPathLocation',
                        };
                    trackDbData.push(Promise.all([
                        trackDbFileLocation,
                        (0, ucscTrackHub_1.fetchTrackDbFile)(trackDbFileLocation),
                        genomeName,
                        assemblyConf,
                    ]));
                }
                return Promise.all([...trackDbData]);
            })
                .then(trackDbData => {
                for (const [trackDbFileLocation, trackDbFile, genomeName, assemblyConf,] of trackDbData) {
                    const sequenceAdapter = (0, configuration_1.readConfObject)(assemblyConf, [
                        'sequence',
                        'adapter',
                    ]);
                    const tracks = (0, ucscTrackHub_1.generateTracks)(trackDbFile, trackDbFileLocation, genomeName, sequenceAdapter);
                    self.addTrackConfs(tracks);
                }
            })
                .catch(error => {
                console.error(error);
                session.notify(`There was a problem connecting to the UCSC Track Hub "${self.name}". Please make sure you have entered a valid hub.txt file. The error that was thrown is: "${error}"`, 'error');
                session.breakConnection(self.configuration);
            });
        },
    })));
}
exports.default = UCSCTrackHubConnection;
//# sourceMappingURL=model.js.map
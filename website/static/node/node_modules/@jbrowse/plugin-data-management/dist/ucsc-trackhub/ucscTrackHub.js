"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTracks = exports.fetchTrackDbFile = exports.fetchGenomesFile = exports.fetchHubFile = exports.ucscAssemblies = void 0;
const util_1 = require("@jbrowse/core/util");
const io_1 = require("@jbrowse/core/util/io");
const tracks_1 = require("@jbrowse/core/util/tracks");
const ucscAssemblies_1 = __importDefault(require("./ucscAssemblies"));
exports.ucscAssemblies = ucscAssemblies_1.default;
async function fetchHubFile(hubFileLocation) {
    try {
        const hubFileText = await (0, io_1.openLocation)(hubFileLocation).readFile('utf8');
        const { HubFile } = await Promise.resolve().then(() => __importStar(require('@gmod/ucsc-hub')));
        return new HubFile(hubFileText);
    }
    catch (error) {
        throw new Error(`Not a valid hub.txt file, got error: '${error}'`);
    }
}
exports.fetchHubFile = fetchHubFile;
async function fetchGenomesFile(genomesFileLocation) {
    const genomesFileText = await (0, io_1.openLocation)(genomesFileLocation).readFile('utf8');
    const { GenomesFile } = await Promise.resolve().then(() => __importStar(require('@gmod/ucsc-hub')));
    return new GenomesFile(genomesFileText);
}
exports.fetchGenomesFile = fetchGenomesFile;
async function fetchTrackDbFile(trackDbFileLocation) {
    const text = await (0, io_1.openLocation)(trackDbFileLocation).readFile('utf8');
    const { TrackDbFile } = await Promise.resolve().then(() => __importStar(require('@gmod/ucsc-hub')));
    return new TrackDbFile(text);
}
exports.fetchTrackDbFile = fetchTrackDbFile;
function generateTracks(trackDb, trackDbFileLocation, assemblyName, sequenceAdapter) {
    const tracks = [];
    trackDb.forEach((track, trackName) => {
        const trackKeys = Array.from(track.keys());
        const parentTrackKeys = [
            'superTrack',
            'compositeTrack',
            'container',
            'view',
        ];
        if (trackKeys.some(key => parentTrackKeys.includes(key))) {
            return;
        }
        const parentTracks = [];
        let currentTrackName = trackName;
        do {
            currentTrackName = trackDb.get(currentTrackName).get('parent');
            if (currentTrackName) {
                ;
                [currentTrackName] = currentTrackName.split(' ');
                parentTracks.push(trackDb.get(currentTrackName));
            }
        } while (currentTrackName);
        parentTracks.reverse();
        const categories = parentTracks.map(parentTrack => parentTrack.get('shortLabel'));
        const res = makeTrackConfig(track, categories, trackDbFileLocation, trackDb, sequenceAdapter);
        res.trackId = `ucsc-trackhub-${(0, util_1.objectHash)(res)}`;
        res.assemblyNames = [assemblyName];
        tracks.push(res);
    });
    return tracks;
}
exports.generateTracks = generateTracks;
function makeTrackConfig(track, categories, trackDbFileLocation, trackDb, sequenceAdapter) {
    let trackType = track.get('type');
    if (!trackType) {
        trackType = trackDb.get(track.get('parent')).get('type');
    }
    let baseTrackType = trackType.split(' ')[0];
    if (baseTrackType === 'bam' &&
        track.get('bigDataUrl').toLowerCase().endsWith('cram')) {
        baseTrackType = 'cram';
    }
    let bigDataLocation;
    if (trackDbFileLocation.uri) {
        bigDataLocation = {
            uri: new URL(track.get('bigDataUrl'), trackDbFileLocation.uri).href,
            locationType: 'UriLocation',
        };
    }
    else {
        bigDataLocation = {
            localPath: track.get('bigDataUrl'),
            locationType: 'LocalPathLocation',
        };
    }
    let bigDataIndexLocation;
    switch (baseTrackType) {
        case 'bam':
            if (trackDbFileLocation.uri) {
                bigDataIndexLocation = track.get('bigDataIndex')
                    ? {
                        uri: new URL(track.get('bigDataIndex'), trackDbFileLocation.uri)
                            .href,
                        locationType: 'UriLocation',
                    }
                    : {
                        uri: new URL(`${track.get('bigDataUrl')}.bai`, trackDbFileLocation.uri).href,
                        locationType: 'UriLocation',
                    };
            }
            else {
                bigDataIndexLocation = track.get('bigDataIndex')
                    ? {
                        localPath: track.get('bigDataIndex'),
                        locationType: 'LocalPathLocation',
                    }
                    : {
                        localPath: `${track.get('bigDataUrl')}.bai`,
                        locationType: 'LocalPathLocation',
                    };
            }
            return {
                type: 'AlignmentsTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'BamAdapter',
                    bamLocation: bigDataLocation,
                    index: {
                        location: bigDataIndexLocation,
                    },
                },
            };
        case 'bed':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        case 'bed5FloatScore':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        case 'bedGraph':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        case 'bedRnaElements':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        case 'bigBarChart':
            return {
                type: 'FeatureTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'BigBedAdapter',
                    bigBedLocation: bigDataLocation,
                },
                renderer: {
                    type: 'SvgFeatureRenderer',
                },
            };
        case 'bigBed':
            return {
                type: 'FeatureTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'BigBedAdapter',
                    bigBedLocation: bigDataLocation,
                },
            };
        case 'bigGenePred':
            return {
                type: 'FeatureTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'BigBedAdapter',
                    bigBedLocation: bigDataLocation,
                },
            };
        case 'bigChain':
            return {
                type: 'FeatureTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'BigBedAdapter',
                    bigBedLocation: bigDataLocation,
                },
                renderer: {
                    type: 'SvgFeatureRenderer',
                },
            };
        case 'bigInteract':
            return {
                type: 'FeatureTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'BigBedAdapter',
                    bigBedLocation: bigDataLocation,
                },
                renderer: {
                    type: 'SvgFeatureRenderer',
                },
            };
        case 'bigMaf':
            return {
                type: 'FeatureTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'BigBedAdapter',
                    bigBedLocation: bigDataLocation,
                },
                renderer: {
                    type: 'SvgFeatureRenderer',
                },
            };
        case 'bigPsl':
            return {
                type: 'FeatureTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'BigBedAdapter',
                    bigBedLocation: bigDataLocation,
                },
                renderer: {
                    type: 'SvgFeatureRenderer',
                },
            };
        case 'bigWig':
            return {
                type: 'QuantitativeTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'BigWigAdapter',
                    bigWigLocation: bigDataLocation,
                },
            };
        case 'broadPeak':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        case 'coloredExon':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        case 'cram':
            if (trackDbFileLocation.uri) {
                bigDataIndexLocation = track.get('bigDataIndex')
                    ? {
                        uri: new URL(track.get('bigDataIndex'), trackDbFileLocation.uri)
                            .href,
                        locationType: 'UriLocation',
                    }
                    : {
                        uri: new URL(`${track.get('bigDataUrl')}.crai`, trackDbFileLocation.uri).href,
                        locationType: 'UriLocation',
                    };
            }
            else {
                bigDataIndexLocation = track.get('bigDataIndex')
                    ? {
                        localPath: track.get('bigDataIndex'),
                        locationType: 'LocalPathLocation',
                    }
                    : {
                        localPath: `${track.get('bigDataUrl')}.crai`,
                        locationType: 'LocalPathLocation',
                    };
            }
            return {
                type: 'AlignmentsTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'CramAdapter',
                    cramLocation: bigDataLocation,
                    craiLocation: bigDataIndexLocation,
                    sequenceAdapter,
                },
            };
        case 'gvf':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        case 'ld2':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        case 'narrowPeak':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        case 'bigNarrowPeak':
            return {
                type: 'FeatureTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'BigBedAdapter',
                    bigBedLocation: bigDataLocation,
                },
            };
        case 'peptideMapping':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        case 'vcfTabix':
            if (trackDbFileLocation.uri) {
                bigDataIndexLocation = track.get('bigDataIndex')
                    ? {
                        uri: new URL(track.get('bigDataIndex'), trackDbFileLocation.uri)
                            .href,
                        locationType: 'UriLocation',
                    }
                    : {
                        uri: new URL(`${track.get('bigDataUrl')}.tbi`, trackDbFileLocation.uri).href,
                        locationType: 'UriLocation',
                    };
            }
            else {
                bigDataIndexLocation = track.get('bigDataIndex')
                    ? {
                        localPath: track.get('bigDataIndex'),
                        locationType: 'LocalPathLocation',
                    }
                    : {
                        localPath: `${track.get('bigDataUrl')}.tbi`,
                        locationType: 'LocalPathLocation',
                    };
            }
            return {
                type: 'VariantTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'VcfTabixAdapter',
                    vcfGzLocation: bigDataLocation,
                    index: {
                        location: bigDataIndexLocation,
                    },
                },
            };
        case 'wig':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        case 'wigMaf':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        case 'hic':
            return {
                type: 'HicTrack',
                name: track.get('shortLabel'),
                description: track.get('longLabel'),
                category: categories,
                adapter: {
                    type: 'HicAdapter',
                    hicLocation: bigDataLocation,
                },
            };
        case 'halSnake':
            return (0, tracks_1.generateUnsupportedTrackConf)(track.get('shortLabel'), baseTrackType, categories);
        default:
            return (0, tracks_1.generateUnknownTrackConf)(track.get('shortLabel'), baseTrackType, categories);
    }
}
//# sourceMappingURL=ucscTrackHub.js.map
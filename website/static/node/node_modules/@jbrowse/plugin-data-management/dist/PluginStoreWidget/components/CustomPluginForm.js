"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const mobx_state_tree_1 = require("mobx-state-tree");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
// icons
const IconButton_1 = __importDefault(require("@mui/material/IconButton"));
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const ExpandMore_1 = __importDefault(require("@mui/icons-material/ExpandMore"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
    },
    dialogContent: {
        display: 'flex',
        flexDirection: 'column',
    },
    expand: {
        transform: 'rotate(0deg)',
        marginLeft: 'auto',
        transition: theme.transitions.create('transform', {
            duration: theme.transitions.duration.shortest,
        }),
    },
    expandOpen: {
        transform: 'rotate(180deg)',
    },
}));
function CustomPluginForm({ open, onClose, model, }) {
    const { classes, cx } = useStyles();
    const [umdPluginName, setUMDPluginName] = (0, react_1.useState)('');
    const [umdPluginUrl, setUMDPluginUrl] = (0, react_1.useState)('');
    const [esmPluginUrl, setESMPluginUrl] = (0, react_1.useState)('');
    const [cjsPluginUrl, setCJSPluginUrl] = (0, react_1.useState)('');
    const [advancedOptionsOpen, setAdvancedOptionsOpen] = (0, react_1.useState)(false);
    function handleChange(event) {
        const { name, value } = event.target;
        if (name === 'umdName') {
            setUMDPluginName(value);
        }
        if (name === 'umdUrl') {
            setUMDPluginUrl(value);
        }
        if (name === 'esmUrl') {
            setESMPluginUrl(value);
        }
        if (name === 'cjsUrl') {
            setCJSPluginUrl(value);
        }
    }
    function handleOpenAdvancedOptions() {
        setAdvancedOptionsOpen(!advancedOptionsOpen);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const { jbrowse } = (0, mobx_state_tree_1.getRoot)(model);
    const ready = Boolean((umdPluginName && umdPluginUrl) || esmPluginUrl || cjsPluginUrl);
    function handleSubmit() {
        if (!ready) {
            return;
        }
        const pluginDefinition = {};
        if (umdPluginName && umdPluginUrl) {
            pluginDefinition.name = umdPluginName;
            pluginDefinition.umdUrl = umdPluginUrl;
        }
        if (esmPluginUrl) {
            pluginDefinition.esmUrl = esmPluginUrl;
        }
        if (cjsPluginUrl) {
            pluginDefinition.cjsUrl = cjsPluginUrl;
        }
        jbrowse.addPlugin(pluginDefinition);
    }
    function handleClose() {
        setUMDPluginName('');
        setUMDPluginUrl('');
        setESMPluginUrl('');
        setCJSPluginUrl('');
        onClose();
    }
    return (react_1.default.createElement(material_1.Dialog, { open: open, onClose: handleClose },
        react_1.default.createElement(material_1.DialogTitle, null,
            "Add custom plugin",
            react_1.default.createElement(IconButton_1.default, { size: "medium", className: classes.closeButton, onClick: () => onClose() },
                react_1.default.createElement(Close_1.default, null))),
        react_1.default.createElement("form", { onSubmit: handleSubmit },
            react_1.default.createElement(material_1.DialogContent, { className: classes.dialogContent },
                react_1.default.createElement(material_1.DialogContentText, null, "Enter the name of the plugin and its URL. The name should match what is defined in the plugin's build."),
                react_1.default.createElement(material_1.TextField, { id: "umd-name-input", name: "umdName", label: "Plugin name", variant: "outlined", value: umdPluginName, onChange: handleChange }),
                react_1.default.createElement(material_1.TextField, { id: "umd-url-input", name: "umdUrl", label: "Plugin URL", variant: "outlined", value: umdPluginUrl, onChange: handleChange }),
                react_1.default.createElement(material_1.DialogContentText, { onClick: handleOpenAdvancedOptions },
                    react_1.default.createElement(IconButton_1.default, { className: cx(classes.expand, {
                            [classes.expandOpen]: advancedOptionsOpen,
                        }), "aria-expanded": advancedOptionsOpen, "aria-label": "show more" },
                        react_1.default.createElement(ExpandMore_1.default, null)),
                    "Advanced options"),
                react_1.default.createElement(material_1.Collapse, { in: advancedOptionsOpen },
                    react_1.default.createElement("div", { className: classes.dialogContent },
                        react_1.default.createElement(material_1.DialogContentText, null, "The above fields assume that the plugin is built in UMD format. If your plugin is in another format, or you have additional builds you want to add (such as a CJS build for using NodeJS APIs in desktop), you can enter the URLs for those builds below."),
                        react_1.default.createElement(material_1.TextField, { id: "esm-url-input", name: "esmUrl", label: "ESM build URL", variant: "outlined", value: esmPluginUrl, onChange: handleChange }),
                        react_1.default.createElement(material_1.TextField, { id: "cjs-url-input", name: "cjsUrl", label: "CJS build URL", variant: "outlined", value: cjsPluginUrl, onChange: handleChange })))),
            react_1.default.createElement(material_1.DialogActions, null,
                react_1.default.createElement(material_1.Button, { variant: "contained", onClick: handleClose }, "Cancel"),
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "primary", onClick: handleSubmit, disabled: !ready }, "Submit")))));
}
exports.default = (0, mobx_react_1.observer)(CustomPluginForm);
//# sourceMappingURL=CustomPluginForm.js.map
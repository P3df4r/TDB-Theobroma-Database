"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const mobx_state_tree_1 = require("mobx-state-tree");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const Lock_1 = __importDefault(require("@mui/icons-material/Lock"));
const util_1 = require("@jbrowse/core/util");
const types_1 = require("@jbrowse/core/util/types");
const useStyles = (0, mui_1.makeStyles)()(() => ({
    closeDialog: {
        position: 'absolute',
        right: 0,
        top: 0,
    },
    dialogContainer: {
        margin: 15,
    },
    lockedPluginTooltip: {
        marginRight: '0.5rem',
    },
}));
function LockedPlugin() {
    const { classes } = useStyles();
    return (react_1.default.createElement(material_1.Tooltip, { className: classes.lockedPluginTooltip, title: "This plugin was installed by an administrator, you cannot remove it." },
        react_1.default.createElement(Lock_1.default, null)));
}
function PluginDialog({ onClose, plugin, }) {
    const { classes } = useStyles();
    return (react_1.default.createElement(material_1.Dialog, { open: true, onClose: () => onClose() },
        react_1.default.createElement(material_1.DialogTitle, null,
            react_1.default.createElement(material_1.IconButton, { className: classes.closeDialog, "aria-label": "close-dialog", onClick: () => onClose() },
                react_1.default.createElement(Close_1.default, null))),
        react_1.default.createElement(material_1.DialogContent, null,
            react_1.default.createElement(material_1.Typography, null,
                "Please confirm that you want to remove ",
                plugin,
                ". Note: if any resources in this session still use this plugin, it may cause your session to crash"),
            react_1.default.createElement(material_1.DialogActions, null,
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "primary", onClick: () => {
                        // avoid showing runtime plugin warning
                        window.setTimeout(() => {
                            onClose(plugin);
                        }, 500);
                    } }, "Confirm"),
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "secondary", onClick: () => {
                        onClose();
                    } }, "Cancel")))));
}
function InstalledPlugin({ plugin, model, pluginManager, }) {
    const [dialogPlugin, setDialogPlugin] = (0, react_1.useState)();
    const session = (0, util_1.getSession)(model);
    const { sessionPlugins } = session;
    const isSessionPlugin = sessionPlugins === null || sessionPlugins === void 0 ? void 0 : sessionPlugins.some(p => pluginManager.pluginMetadata[plugin.name].url === p.url);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const rootModel = (0, mobx_state_tree_1.getParent)(model, 3);
    const { jbrowse, adminMode } = rootModel;
    return (react_1.default.createElement(react_1.default.Fragment, null,
        dialogPlugin ? (react_1.default.createElement(PluginDialog, { plugin: dialogPlugin, onClose: name => {
                if (name) {
                    const pluginMetadata = pluginManager.pluginMetadata[plugin.name];
                    if (adminMode) {
                        jbrowse.removePlugin(pluginMetadata);
                    }
                    else if ((0, types_1.isSessionWithSessionPlugins)(session)) {
                        session.removeSessionPlugin(pluginMetadata);
                    }
                }
                setDialogPlugin(undefined);
            } })) : null,
        react_1.default.createElement(material_1.ListItem, { key: plugin.name },
            adminMode || isSessionPlugin ? (react_1.default.createElement(material_1.IconButton, { "aria-label": "removePlugin", "data-testid": `removePlugin-${plugin.name}`, onClick: () => setDialogPlugin(plugin.name) },
                react_1.default.createElement(Close_1.default, null))) : (react_1.default.createElement(LockedPlugin, null)),
            react_1.default.createElement(material_1.Typography, null, plugin.name))));
}
exports.default = (0, mobx_react_1.observer)(InstalledPlugin);
//# sourceMappingURL=InstalledPlugin.js.map
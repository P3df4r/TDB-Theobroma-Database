"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const mobx_state_tree_1 = require("mobx-state-tree");
const util_1 = require("@jbrowse/core/util");
const types_1 = require("@jbrowse/core/util/types");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
// icons
const Person_1 = __importDefault(require("@mui/icons-material/Person"));
const Add_1 = __importDefault(require("@mui/icons-material/Add"));
const Check_1 = __importDefault(require("@mui/icons-material/Check"));
const useStyles = (0, mui_1.makeStyles)()(() => ({
    card: {
        margin: '1em',
    },
    icon: {
        marginLeft: '0.5em',
        marginRight: '0.5em',
    },
    bold: {
        fontWeight: 600,
    },
    dataField: {
        display: 'flex',
        alignItems: 'center',
        margin: '0.4em 0em',
    },
}));
function PluginCard({ plugin, model, adminMode, }) {
    const { classes } = useStyles();
    const session = (0, util_1.getSession)(model);
    const { pluginManager } = (0, util_1.getEnv)(model);
    const isInstalled = Boolean(pluginManager.runtimePluginDefinitions.find(def => def.url === plugin.url));
    const [tempDisabled, setTempDisabled] = (0, react_1.useState)(false);
    const disableButton = isInstalled || tempDisabled;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const rootModel = (0, mobx_state_tree_1.getParent)(model, 3);
    const { jbrowse } = rootModel;
    return (react_1.default.createElement(material_1.Card, { variant: "outlined", key: plugin.name, className: classes.card },
        react_1.default.createElement(material_1.CardContent, null,
            react_1.default.createElement("div", { className: classes.dataField },
                react_1.default.createElement(material_1.Typography, { variant: "h5" },
                    react_1.default.createElement(material_1.Link, { href: `${plugin.location}#readme`, target: "_blank", rel: "noopener" }, plugin.name))),
            react_1.default.createElement("div", { className: classes.dataField },
                react_1.default.createElement(Person_1.default, { style: { marginRight: '0.5em' } }),
                react_1.default.createElement(material_1.Typography, null, plugin.authors.join(', '))),
            react_1.default.createElement(material_1.Typography, { className: classes.bold }, "Description:"),
            react_1.default.createElement(material_1.Typography, null, plugin.description)),
        react_1.default.createElement(material_1.CardActions, null,
            react_1.default.createElement(material_1.Button, { variant: "contained", color: "primary", disabled: disableButton, startIcon: isInstalled ? react_1.default.createElement(Check_1.default, null) : react_1.default.createElement(Add_1.default, null), onClick: () => {
                    if (adminMode) {
                        jbrowse.addPlugin({ name: plugin.name, url: plugin.url });
                    }
                    else if ((0, types_1.isSessionWithSessionPlugins)(session)) {
                        session.addSessionPlugin(plugin);
                    }
                    setTempDisabled(true);
                } }, isInstalled ? 'Installed' : 'Install'))));
}
exports.default = (0, mobx_react_1.observer)(PluginCard);
//# sourceMappingURL=PluginCard.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const mobx_state_tree_1 = require("mobx-state-tree");
const ui_1 = require("@jbrowse/core/ui");
const util_1 = require("@jbrowse/core/util");
// icons
const ExpandMore_1 = __importDefault(require("@mui/icons-material/ExpandMore"));
const Clear_1 = __importDefault(require("@mui/icons-material/Clear"));
const InfoOutlined_1 = __importDefault(require("@mui/icons-material/InfoOutlined"));
// locals
const InstalledPluginsList_1 = __importDefault(require("./InstalledPluginsList"));
const PluginCard_1 = __importDefault(require("./PluginCard"));
const CustomPluginForm_1 = __importDefault(require("./CustomPluginForm"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    root: {
        margin: theme.spacing(1),
    },
    expandIcon: {
        color: '#fff',
    },
    adminBadge: {
        margin: '0.5em',
        borderRadius: 3,
        backgroundColor: theme.palette.quaternary.main,
        padding: '1em',
        display: 'flex',
        alignContent: 'center',
    },
    customPluginButton: {
        margin: '0.5em',
        display: 'flex',
        justifyContent: 'center',
    },
}));
function PluginStoreWidget({ model }) {
    const { classes } = useStyles();
    const [pluginArray, setPluginArray] = (0, react_1.useState)();
    const [error, setError] = (0, react_1.useState)();
    const [customPluginFormOpen, setCustomPluginFormOpen] = (0, react_1.useState)(false);
    const { adminMode } = (0, util_1.getSession)(model);
    const { pluginManager } = (0, mobx_state_tree_1.getEnv)(model);
    (0, react_1.useEffect)(() => {
        const controller = new AbortController();
        const { signal } = controller;
        (async () => {
            try {
                const response = await fetch('https://jbrowse.org/plugin-store/plugins.json', { signal });
                if (!response.ok) {
                    const err = await response.text();
                    throw new Error(`Failed to fetch plugin data: ${response.status} ${response.statusText} ${err}`);
                }
                const array = await response.json();
                if (!signal.aborted) {
                    setPluginArray(array.plugins);
                }
            }
            catch (e) {
                console.error(e);
                setError(e);
            }
        })();
        return () => {
            controller.abort();
        };
    }, []);
    return (react_1.default.createElement("div", { className: classes.root },
        adminMode && (react_1.default.createElement(react_1.default.Fragment, null,
            !util_1.isElectron && (react_1.default.createElement("div", { className: classes.adminBadge },
                react_1.default.createElement(InfoOutlined_1.default, { style: { marginRight: '0.3em' } }),
                react_1.default.createElement(material_1.Typography, null,
                    "You are using the ",
                    react_1.default.createElement("code", null, "admin-server"),
                    ". Any changes you make will be saved to your configuration file. You also have the ability to add custom plugins that are not in the store."))),
            react_1.default.createElement("div", { className: classes.customPluginButton },
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "primary", onClick: () => setCustomPluginFormOpen(true) }, "Add custom plugin")),
            react_1.default.createElement(CustomPluginForm_1.default, { open: customPluginFormOpen, onClose: () => setCustomPluginFormOpen(false), model: model }))),
        react_1.default.createElement(material_1.TextField, { label: "Filter plugins", value: model.filterText, onChange: event => model.setFilterText(event.target.value), fullWidth: true, InputProps: {
                endAdornment: (react_1.default.createElement(material_1.InputAdornment, { position: "end" },
                    react_1.default.createElement(material_1.IconButton, { color: "secondary", onClick: () => model.clearFilterText() },
                        react_1.default.createElement(Clear_1.default, null)))),
            } }),
        react_1.default.createElement(material_1.Accordion, { defaultExpanded: true },
            react_1.default.createElement(material_1.AccordionSummary, { expandIcon: react_1.default.createElement(ExpandMore_1.default, { className: classes.expandIcon }) },
                react_1.default.createElement(material_1.Typography, { variant: "h5" }, "Installed plugins")),
            react_1.default.createElement("div", { style: { margin: '1em' } },
                react_1.default.createElement(InstalledPluginsList_1.default, { pluginManager: pluginManager, model: model }))),
        react_1.default.createElement(material_1.Accordion, { defaultExpanded: true },
            react_1.default.createElement(material_1.AccordionSummary, { expandIcon: react_1.default.createElement(ExpandMore_1.default, { className: classes.expandIcon }) },
                react_1.default.createElement(material_1.Typography, { variant: "h5" }, "Available plugins")),
            error ? (react_1.default.createElement(material_1.Typography, { color: "error" }, `${error}`)) : pluginArray ? (pluginArray
                .filter(plugin => {
                // If pugin only has cjsUrl, don't display outside desktop
                if (!util_1.isElectron &&
                    !(plugin.esmUrl || plugin.url || plugin.umdUrl)) {
                    return false;
                }
                return plugin.name
                    .toLowerCase()
                    .includes(model.filterText.toLowerCase());
            })
                .map(plugin => (react_1.default.createElement(PluginCard_1.default, { key: plugin.name, plugin: plugin, model: model, adminMode: !!adminMode })))) : (react_1.default.createElement(ui_1.LoadingEllipses, null)))));
}
exports.default = (0, mobx_react_1.observer)(PluginStoreWidget);
//# sourceMappingURL=PluginStoreWidget.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const ui_1 = require("@jbrowse/core/ui");
const mui_1 = require("tss-react/mui");
const util_1 = require("@jbrowse/core/util");
const mobx_react_1 = require("mobx-react");
const useStyles = (0, mui_1.makeStyles)()({
    textbox: {
        width: '100%',
    },
    submit: {
        marginTop: 25,
        marginBottom: 100,
        display: 'block',
    },
});
function AddTrackWorkflow({ model }) {
    const { classes } = useStyles();
    const [val, setVal] = (0, react_1.useState)('');
    const [error, setError] = (0, react_1.useState)();
    return (react_1.default.createElement("div", null,
        error ? react_1.default.createElement(ui_1.ErrorMessage, { error: error }) : null,
        react_1.default.createElement(material_1.TextField, { multiline: true, rows: 10, value: val, onChange: event => setVal(event.target.value), placeholder: 'Paste track config or array of track configs in JSON format', variant: "outlined", className: classes.textbox }),
        react_1.default.createElement(material_1.Button, { variant: "contained", className: classes.submit, onClick: () => {
                try {
                    setError(undefined);
                    const session = (0, util_1.getSession)(model);
                    const conf = JSON.parse(val);
                    const confs = Array.isArray(conf) ? conf : [conf];
                    confs.forEach(c => session.addTrackConf(c));
                    confs.forEach(c => c.trackId);
                    model.clearData();
                    session.hideWidget(model);
                }
                catch (e) {
                    setError(e);
                }
            } }, "Submit")));
}
exports.default = (0, mobx_react_1.observer)(AddTrackWorkflow);
//# sourceMappingURL=PasteConfigWorkflow.js.map
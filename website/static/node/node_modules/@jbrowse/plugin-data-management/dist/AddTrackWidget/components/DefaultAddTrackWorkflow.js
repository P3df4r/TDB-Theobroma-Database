"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_state_tree_1 = require("mobx-state-tree");
const util_1 = require("@jbrowse/core/util");
const configuration_1 = require("@jbrowse/core/configuration");
const mobx_react_1 = require("mobx-react");
// locals
const ConfirmTrack_1 = __importDefault(require("./ConfirmTrack"));
const TrackSourceSelect_1 = __importDefault(require("./TrackSourceSelect"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    root: {
        marginTop: theme.spacing(1),
    },
    stepper: {
        backgroundColor: theme.palette.background.default,
    },
    button: {
        marginTop: theme.spacing(1),
        marginRight: theme.spacing(1),
    },
    actionsContainer: {
        marginBottom: theme.spacing(2),
    },
    stepContent: {
        margin: theme.spacing(1),
    },
    alertContainer: {
        padding: `${theme.spacing(2)}px 0px ${theme.spacing(2)}px 0px`,
    },
}));
const steps = ['Enter track data', 'Confirm track type'];
function AddTrackWorkflow({ model }) {
    const [activeStep, setActiveStep] = (0, react_1.useState)(0);
    const { classes } = useStyles();
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const { jobsManager } = (0, mobx_state_tree_1.getRoot)(model);
    const session = (0, util_1.getSession)(model);
    const { assembly, trackAdapter, trackData, trackName, trackType, textIndexTrack, textIndexingConf, } = model;
    const [trackErrorMessage, setTrackErrorMessage] = (0, react_1.useState)();
    function getStepContent(step) {
        switch (step) {
            case 0:
                return react_1.default.createElement(TrackSourceSelect_1.default, { model: model });
            case 1:
                return react_1.default.createElement(ConfirmTrack_1.default, { model: model });
            default:
                return react_1.default.createElement(material_1.Typography, null, "Unknown step");
        }
    }
    async function handleNext() {
        if (activeStep !== steps.length - 1) {
            setActiveStep(activeStep + 1);
            return;
        }
        const trackId = [
            `${trackName.toLowerCase().replace(/ /g, '_')}-${Date.now()}`,
            `${session.adminMode ? '' : '-sessionTrack'}`,
        ].join('');
        const assemblyInstance = session.assemblyManager.get(assembly);
        if (trackAdapter && trackAdapter.type !== 'UNKNOWN') {
            session.addTrackConf({
                trackId,
                type: trackType,
                name: trackName,
                assemblyNames: [assembly],
                adapter: {
                    ...trackAdapter,
                    sequenceAdapter: (0, configuration_1.getConf)(assemblyInstance, ['sequence', 'adapter']),
                },
            });
            if (model.view) {
                model.view.showTrack(trackId);
                if (util_1.isElectron &&
                    textIndexTrack &&
                    (0, util_1.supportedIndexingAdapters)(trackAdapter.type)) {
                    const attr = textIndexingConf || {
                        attributes: ['Name', 'ID'],
                        exclude: ['CDS', 'exon'],
                    };
                    const indexName = trackName + '-index';
                    const newEntry = {
                        indexingParams: {
                            ...attr,
                            assemblies: [assembly],
                            tracks: [trackId],
                            indexType: 'perTrack',
                            name: indexName,
                            timestamp: new Date().toISOString(),
                        },
                        name: indexName,
                        cancelCallback: () => jobsManager.abortJob(),
                    };
                    jobsManager.queueJob(newEntry);
                }
            }
            else {
                session.notify('Open a new view, or use the track selector in an existing view, to view this track', 'info');
            }
            model.clearData();
            session.hideWidget(model);
        }
        else {
            setTrackErrorMessage('Failed to add track.\nThe configuration of this file is not currently supported.');
        }
    }
    function handleBack() {
        setTrackErrorMessage(undefined);
        setActiveStep(activeStep - 1);
    }
    function isNextDisabled() {
        switch (activeStep) {
            case 0:
                return !trackData;
            case 1:
                return !(trackName && trackType && (trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type) && assembly);
            default:
                return true;
        }
    }
    return (react_1.default.createElement("div", { className: classes.root },
        react_1.default.createElement(material_1.Stepper, { className: classes.stepper, activeStep: activeStep, orientation: "vertical" }, steps.map((label, idx) => (react_1.default.createElement(material_1.Step, { key: label },
            react_1.default.createElement(material_1.StepLabel, null, label),
            react_1.default.createElement(material_1.StepContent, null,
                getStepContent(idx),
                react_1.default.createElement("div", { className: classes.actionsContainer },
                    react_1.default.createElement(material_1.Button, { disabled: activeStep === 0, onClick: handleBack, className: classes.button }, "Back"),
                    react_1.default.createElement(material_1.Button, { disabled: isNextDisabled(), variant: "contained", color: "primary", onClick: handleNext, className: classes.button, "data-testid": "addTrackNextButton" }, activeStep === steps.length - 1 ? 'Add' : 'Next')),
                trackErrorMessage ? (react_1.default.createElement("div", { className: classes.alertContainer },
                    react_1.default.createElement(material_1.Alert, { severity: "error" }, trackErrorMessage))) : null)))))));
}
exports.default = (0, mobx_react_1.observer)(AddTrackWorkflow);
//# sourceMappingURL=DefaultAddTrackWorkflow.js.map
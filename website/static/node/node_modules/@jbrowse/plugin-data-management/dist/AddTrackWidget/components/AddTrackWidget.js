"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
const util_1 = require("@jbrowse/core/util");
const DefaultAddTrackWorkflow_1 = __importDefault(require("./DefaultAddTrackWorkflow"));
const PasteConfigWorkflow_1 = __importDefault(require("./PasteConfigWorkflow"));
function AddTrackSelector({ model }) {
    const [val, setVal] = (0, util_1.useLocalStorage)('trackSelector-choice', 'Default');
    const { pluginManager } = (0, util_1.getEnv)(model);
    const widgets = pluginManager.getElementTypesInGroup('add track workflow');
    const ComponentMap = {
        Default: DefaultAddTrackWorkflow_1.default,
        'Add track JSON': PasteConfigWorkflow_1.default,
        ...Object.fromEntries(widgets.map(w => [w.name, w.ReactComponent])),
    };
    // make sure the selected value is in the list
    const val2 = ComponentMap[val] ? val : 'Default';
    const Component = ComponentMap[val2];
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(material_1.FormControl, null,
            react_1.default.createElement(material_1.Select, { value: val2, onChange: event => setVal(event.target.value) }, Object.keys(ComponentMap).map(e => (react_1.default.createElement(material_1.MenuItem, { key: e, value: e }, e)))),
            react_1.default.createElement(material_1.FormHelperText, null, "Type of add track workflow")),
        react_1.default.createElement("br", null),
        react_1.default.createElement(Component, { model: model })));
}
exports.default = (0, mobx_react_1.observer)(AddTrackSelector);
//# sourceMappingURL=AddTrackWidget.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const FileSelector_1 = __importDefault(require("@jbrowse/core/ui/FileSelector"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const Add_1 = __importDefault(require("@mui/icons-material/Add"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    root: {
        flexGrow: 1,
        overflow: 'hidden',
        padding: theme.spacing(0, 3),
    },
    paper: {
        margin: `${theme.spacing(1)}px auto`,
        padding: theme.spacing(2),
    },
    createButton: {
        marginTop: '1em',
        justifyContent: 'center',
    },
    paperContent: {
        flex: 'auto',
        margin: `${theme.spacing(1)}px auto`,
        padding: theme.spacing(1),
        overflow: 'auto',
    },
}));
const AdapterSelector = (0, mobx_react_1.observer)(({ adapterSelection, setAdapterSelection, adapterTypes, }) => {
    return (react_1.default.createElement(material_1.TextField, { value: adapterSelection, label: "Type", select: true, helperText: "Type of adapter to use", fullWidth: true, onChange: event => {
            setAdapterSelection(event.target.value);
        } }, adapterTypes.map(str => (react_1.default.createElement(material_1.MenuItem, { key: str, value: str }, str)))));
});
const AdapterInput = (0, mobx_react_1.observer)(({ adapterSelection, fastaLocation, setFastaLocation, faiLocation, setFaiLocation, gziLocation, setGziLocation, twoBitLocation, setTwoBitLocation, chromSizesLocation, setChromSizesLocation, }) => {
    if (adapterSelection === 'IndexedFastaAdapter' ||
        adapterSelection === 'BgzipFastaAdapter') {
        return (react_1.default.createElement(material_1.Grid, { container: true, spacing: 2 },
            react_1.default.createElement(material_1.Grid, { item: true },
                react_1.default.createElement(FileSelector_1.default, { name: "fastaLocation", location: fastaLocation, setLocation: loc => setFastaLocation(loc) })),
            react_1.default.createElement(material_1.Grid, { item: true },
                react_1.default.createElement(FileSelector_1.default, { name: "faiLocation", location: faiLocation, setLocation: loc => setFaiLocation(loc) })),
            adapterSelection === 'BgzipFastaAdapter' ? (react_1.default.createElement(material_1.Grid, { item: true },
                react_1.default.createElement(FileSelector_1.default, { name: "gziLocation", location: gziLocation, setLocation: loc => setGziLocation(loc) }))) : null));
    }
    if (adapterSelection === 'TwoBitAdapter') {
        return (react_1.default.createElement(material_1.Grid, { container: true, spacing: 2 },
            react_1.default.createElement(material_1.Grid, { item: true },
                react_1.default.createElement(FileSelector_1.default, { name: "twoBitLocation", location: twoBitLocation, setLocation: loc => setTwoBitLocation(loc) })),
            react_1.default.createElement(material_1.Grid, { item: true },
                react_1.default.createElement(FileSelector_1.default, { name: "chromSizesLocation (optional, can be added to speed up loading 2bit files with many contigs)", location: chromSizesLocation, setLocation: loc => setChromSizesLocation(loc) }))));
    }
    return null;
});
const blank = { uri: '' };
const AssemblyAddForm = (0, mobx_react_1.observer)(({ rootModel, setFormOpen, }) => {
    const { classes } = useStyles();
    const adapterTypes = [
        'IndexedFastaAdapter',
        'BgzipFastaAdapter',
        'TwoBitAdapter',
    ];
    const [assemblyName, setAssemblyName] = (0, react_1.useState)('');
    const [assemblyDisplayName, setAssemblyDisplayName] = (0, react_1.useState)('');
    const [adapterSelection, setAdapterSelection] = (0, react_1.useState)(adapterTypes[0]);
    const [fastaLocation, setFastaLocation] = (0, react_1.useState)(blank);
    const [faiLocation, setFaiLocation] = (0, react_1.useState)(blank);
    const [gziLocation, setGziLocation] = (0, react_1.useState)(blank);
    const [twoBitLocation, setTwoBitLocation] = (0, react_1.useState)(blank);
    const [chromSizesLocation, setChromSizesLocation] = (0, react_1.useState)(blank);
    function createAssembly() {
        if (assemblyName === '') {
            rootModel.session.notify("Can't create an assembly without a name");
        }
        else {
            setFormOpen(false);
            let newAssembly;
            if (adapterSelection === 'IndexedFastaAdapter') {
                newAssembly = {
                    name: assemblyName,
                    displayName: assemblyDisplayName,
                    sequence: {
                        adapter: {
                            type: 'IndexedFastaAdapter',
                            fastaLocation,
                            faiLocation,
                        },
                    },
                };
            }
            else if (adapterSelection === 'BgzipFastaAdapter') {
                newAssembly = {
                    name: assemblyName,
                    displayName: assemblyDisplayName,
                    sequence: {
                        adapter: {
                            type: 'BgzipFastaAdapter',
                            fastaLocation,
                            faiLocation,
                            gziLocation,
                        },
                    },
                };
            }
            else if (adapterSelection === 'TwoBitAdapter') {
                newAssembly = {
                    name: assemblyName,
                    displayName: assemblyDisplayName,
                    sequence: {
                        adapter: {
                            type: 'TwoBitAdapter',
                            twoBitLocation,
                            chromSizesLocation,
                        },
                    },
                };
            }
            rootModel.jbrowse.addAssemblyConf(newAssembly);
            rootModel.session.notify(`Successfully added ${assemblyName} assembly to JBrowse 2`, 'success');
        }
    }
    return (react_1.default.createElement("div", { className: classes.root },
        react_1.default.createElement(material_1.Paper, { className: classes.paper },
            react_1.default.createElement(material_1.TextField, { id: "assembly-name", inputProps: { 'data-testid': 'assembly-name' }, label: "Assembly name", helperText: "The assembly name e.g. hg38", variant: "outlined", value: assemblyName, onChange: event => setAssemblyName(event.target.value) }),
            react_1.default.createElement(material_1.TextField, { id: "assembly-name", inputProps: { 'data-testid': 'assembly-display-name' }, label: "Assembly display name", helperText: 'A human readable display name for the assembly e.g. "Homo sapiens (hg38)"', variant: "outlined", value: assemblyDisplayName, onChange: event => setAssemblyDisplayName(event.target.value) }),
            react_1.default.createElement(AdapterSelector, { adapterSelection: adapterSelection, setAdapterSelection: setAdapterSelection, adapterTypes: adapterTypes }),
            react_1.default.createElement("div", { className: classes.paperContent },
                react_1.default.createElement(AdapterInput, { adapterSelection: adapterSelection, fastaLocation: fastaLocation, setFastaLocation: setFastaLocation, faiLocation: faiLocation, setFaiLocation: setFaiLocation, gziLocation: gziLocation, setGziLocation: setGziLocation, twoBitLocation: twoBitLocation, setTwoBitLocation: setTwoBitLocation, chromSizesLocation: chromSizesLocation, setChromSizesLocation: setChromSizesLocation }))),
        react_1.default.createElement(material_1.Grid, { container: true, className: classes.createButton },
            react_1.default.createElement(material_1.Grid, { item: true },
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "secondary", startIcon: react_1.default.createElement(Add_1.default, null), onClick: createAssembly }, "Create new assembly")))));
});
exports.default = AssemblyAddForm;
//# sourceMappingURL=AssemblyAddForm.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const mui_1 = require("tss-react/mui");
const material_1 = require("@mui/material");
const ArrowBackIos_1 = __importDefault(require("@mui/icons-material/ArrowBackIos"));
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const Add_1 = __importDefault(require("@mui/icons-material/Add"));
const AssemblyTable_1 = __importDefault(require("./AssemblyTable"));
const AssemblyAddForm_1 = __importDefault(require("./AssemblyAddForm"));
const AssemblyEditor_1 = __importDefault(require("./AssemblyEditor"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    titleBox: {
        color: '#fff',
        backgroundColor: theme.palette.primary.main,
        textAlign: 'center',
    },
    dialogContent: {
        width: '100%',
    },
    backButton: {
        color: '#fff',
        position: 'absolute',
        left: theme.spacing(4),
        top: theme.spacing(4),
    },
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
}));
const AssemblyManager = (0, mobx_react_1.observer)(({ rootModel, onClose, }) => {
    const { classes } = useStyles();
    const [isFormOpen, setFormOpen] = (0, react_1.useState)(false);
    const [isAssemblyBeingEdited, setIsAssemblyBeingEdited] = (0, react_1.useState)(false);
    const [assemblyBeingEdited, setAssemblyBeingEdited] = (0, react_1.useState)();
    const showAssemblyTable = !isFormOpen && !isAssemblyBeingEdited;
    return (react_1.default.createElement(material_1.Dialog, { open: true, onClose: () => onClose(false) },
        react_1.default.createElement(material_1.DialogTitle, { className: classes.titleBox },
            showAssemblyTable ? 'Assembly manager' : null,
            isFormOpen ? (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(material_1.IconButton, { "aria-label": "back", className: classes.backButton, onClick: () => setFormOpen(false) },
                    react_1.default.createElement(ArrowBackIos_1.default, null)),
                "Add new assembly")) : null,
            isAssemblyBeingEdited ? (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(material_1.IconButton, { "aria-label": "back", className: classes.backButton, onClick: () => setIsAssemblyBeingEdited(false) },
                    react_1.default.createElement(ArrowBackIos_1.default, null)),
                returnAssemblyName(assemblyBeingEdited))) : null,
            react_1.default.createElement(material_1.IconButton, { "aria-label": "close", className: classes.closeButton, onClick: () => onClose(false) },
                react_1.default.createElement(Close_1.default, null))),
        react_1.default.createElement(material_1.DialogContent, null,
            react_1.default.createElement("div", { className: classes.dialogContent },
                showAssemblyTable ? (react_1.default.createElement(AssemblyTable_1.default, { rootModel: rootModel, setIsAssemblyBeingEdited: setIsAssemblyBeingEdited, setAssemblyBeingEdited: setAssemblyBeingEdited })) : null,
                isAssemblyBeingEdited ? (react_1.default.createElement(AssemblyEditor_1.default, { assembly: assemblyBeingEdited })) : null,
                isFormOpen ? (react_1.default.createElement(AssemblyAddForm_1.default, { rootModel: rootModel, setFormOpen: setFormOpen })) : null)),
        react_1.default.createElement(material_1.DialogActions, null, showAssemblyTable ? (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(material_1.Button, { color: "secondary", variant: "contained", onClick: () => onClose(false) }, "Close"),
            react_1.default.createElement(material_1.Button, { variant: "contained", color: "secondary", startIcon: react_1.default.createElement(Add_1.default, null), onClick: () => setFormOpen(true) }, "Add new assembly"))) : null)));
});
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function returnAssemblyName(assembly) {
    if (assembly !== undefined) {
        return assembly.name;
    }
    return null;
}
exports.default = AssemblyManager;
//# sourceMappingURL=AssemblyManager.js.map
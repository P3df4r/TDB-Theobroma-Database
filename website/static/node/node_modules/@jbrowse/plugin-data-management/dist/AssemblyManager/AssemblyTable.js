"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const Create_1 = __importDefault(require("@mui/icons-material/Create"));
const Delete_1 = __importDefault(require("@mui/icons-material/Delete"));
const configuration_1 = require("@jbrowse/core/configuration");
const useStyles = (0, mui_1.makeStyles)()(() => ({
    table: {
        minWidth: 500,
        minHeight: 150,
    },
    buttonCell: {
        padding: 3,
    },
    button: {
        display: 'inline-block',
        padding: 3,
        minHeight: 0,
        minWidth: 0,
    },
}));
const AssemblyTable = (0, mobx_react_1.observer)(({ rootModel, setIsAssemblyBeingEdited, setAssemblyBeingEdited, }) => {
    const { classes } = useStyles();
    function removeAssembly(name) {
        rootModel.jbrowse.removeAssemblyConf(name);
    }
    const rows = rootModel.jbrowse.assemblies.map(assembly => {
        const name = (0, configuration_1.readConfObject)(assembly, 'name');
        const displayName = (0, configuration_1.readConfObject)(assembly, 'displayName');
        const aliases = (0, configuration_1.readConfObject)(assembly, 'aliases');
        return (react_1.default.createElement(material_1.TableRow, { key: name },
            react_1.default.createElement(material_1.TableCell, null, name),
            react_1.default.createElement(material_1.TableCell, null, displayName),
            react_1.default.createElement(material_1.TableCell, null, aliases ? aliases.toString() : ''),
            react_1.default.createElement(material_1.TableCell, { className: classes.buttonCell },
                react_1.default.createElement(material_1.IconButton, { "data-testid": `${name}-edit`, className: classes.button, onClick: () => {
                        setIsAssemblyBeingEdited(true);
                        setAssemblyBeingEdited(assembly);
                    } },
                    react_1.default.createElement(Create_1.default, { color: "primary" })),
                react_1.default.createElement(material_1.IconButton, { "data-testid": `${name}-delete`, className: classes.button, onClick: () => {
                        removeAssembly(name);
                    } },
                    react_1.default.createElement(Delete_1.default, { color: "error" })))));
    });
    return (react_1.default.createElement(material_1.TableContainer, { component: material_1.Paper },
        react_1.default.createElement(material_1.Table, { className: classes.table },
            react_1.default.createElement(material_1.TableHead, null,
                react_1.default.createElement(material_1.TableRow, null,
                    react_1.default.createElement(material_1.TableCell, null,
                        react_1.default.createElement(material_1.Typography, { variant: "h5" }, "Name")),
                    react_1.default.createElement(material_1.TableCell, null,
                        react_1.default.createElement(material_1.Typography, { variant: "h5" }, "Display name")),
                    react_1.default.createElement(material_1.TableCell, null,
                        react_1.default.createElement(material_1.Typography, { variant: "h5" }, "Aliases")),
                    react_1.default.createElement(material_1.TableCell, null,
                        react_1.default.createElement(material_1.Typography, { variant: "h5" }, "Actions")))),
            react_1.default.createElement(material_1.TableBody, null, rows))));
});
exports.default = AssemblyTable;
//# sourceMappingURL=AssemblyTable.js.map
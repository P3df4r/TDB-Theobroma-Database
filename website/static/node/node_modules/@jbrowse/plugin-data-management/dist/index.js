"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetDefaultSession = exports.AssemblyManager = void 0;
const react_1 = require("react");
const ConnectionType_1 = __importDefault(require("@jbrowse/core/pluggableElementTypes/ConnectionType"));
const WidgetType_1 = __importDefault(require("@jbrowse/core/pluggableElementTypes/WidgetType"));
const Plugin_1 = __importDefault(require("@jbrowse/core/Plugin"));
const ucsc_trackhub_1 = require("./ucsc-trackhub");
const AddTrackWidget_1 = require("./AddTrackWidget");
const AddConnectionWidget_1 = require("./AddConnectionWidget");
const HierarchicalTrackSelectorWidget_1 = require("./HierarchicalTrackSelectorWidget");
const PluginStoreWidget_1 = require("./PluginStoreWidget");
const SetDefaultSession = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./SetDefaultSession'))));
exports.SetDefaultSession = SetDefaultSession;
const AssemblyManager = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./AssemblyManager'))));
exports.AssemblyManager = AssemblyManager;
class default_1 extends Plugin_1.default {
    constructor() {
        super(...arguments);
        this.name = 'DataManagementPlugin';
        this.exports = {
            AssemblyManager,
            SetDefaultSession,
        };
    }
    install(pluginManager) {
        pluginManager.addConnectionType(() => new ConnectionType_1.default({
            name: 'UCSCTrackHubConnection',
            configSchema: ucsc_trackhub_1.configSchema,
            stateModel: (0, ucsc_trackhub_1.modelFactory)(pluginManager),
            displayName: 'UCSC Track Hub',
            description: 'A track or assembly hub in the Track Hub format',
            url: '//genome.ucsc.edu/goldenPath/help/hgTrackHubHelp.html#Intro',
        }));
        pluginManager.addWidgetType(() => {
            return new WidgetType_1.default({
                name: 'HierarchicalTrackSelectorWidget',
                heading: 'Available tracks',
                configSchema: HierarchicalTrackSelectorWidget_1.configSchema,
                stateModel: (0, HierarchicalTrackSelectorWidget_1.stateModelFactory)(pluginManager),
                ReactComponent: (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./HierarchicalTrackSelectorWidget/components/HierarchicalTrackSelector')))),
            });
        });
        pluginManager.addWidgetType(() => {
            return new WidgetType_1.default({
                name: 'AddTrackWidget',
                heading: 'Add a track',
                configSchema: AddTrackWidget_1.configSchema,
                stateModel: (0, AddTrackWidget_1.stateModelFactory)(pluginManager),
                ReactComponent: (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./AddTrackWidget/components/AddTrackWidget')))),
            });
        });
        pluginManager.addWidgetType(() => {
            return new WidgetType_1.default({
                name: 'AddConnectionWidget',
                heading: 'Add a connection',
                configSchema: AddConnectionWidget_1.configSchema,
                stateModel: AddConnectionWidget_1.stateModel,
                ReactComponent: (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./AddConnectionWidget/components/AddConnectionWidget')))),
            });
        });
        pluginManager.addWidgetType(() => {
            return new WidgetType_1.default({
                name: 'PluginStoreWidget',
                heading: 'Plugin store',
                configSchema: PluginStoreWidget_1.configSchema,
                stateModel: (0, PluginStoreWidget_1.stateModelFactory)(pluginManager),
                ReactComponent: (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./PluginStoreWidget/components/PluginStoreWidget')))),
            });
        });
    }
    configure(_pluginManager) { }
}
exports.default = default_1;
//# sourceMappingURL=index.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const util_1 = require("@jbrowse/core/util");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
// locals
const ConfigureConnection_1 = __importDefault(require("./ConfigureConnection"));
const ConnectionTypeSelect_1 = __importDefault(require("./ConnectionTypeSelect"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    root: {
        marginTop: theme.spacing(1),
    },
    stepper: {
        backgroundColor: theme.palette.background.default,
    },
    button: {
        marginTop: theme.spacing(1),
        marginRight: theme.spacing(1),
    },
    actionsContainer: {
        marginBottom: theme.spacing(2),
    },
}));
const steps = ['Select a Connection Type', 'Configure Connection'];
function AddConnectionWidget({ model }) {
    const [connectionType, setConnectionType] = (0, react_1.useState)();
    const [configModel, setConfigModel] = (0, react_1.useState)();
    const [activeStep, setActiveStep] = (0, react_1.useState)(0);
    const { classes } = useStyles();
    const session = (0, util_1.getSession)(model);
    const { pluginManager } = (0, util_1.getEnv)(session);
    function stepContent() {
        switch (activeStep) {
            case 0:
                return (react_1.default.createElement(ConnectionTypeSelect_1.default, { connectionTypeChoices: pluginManager.getElementTypesInGroup('connection'), connectionType: connectionType, setConnectionType: c => {
                        setConnectionType(c);
                        if (c) {
                            setConfigModel(c.configSchema.create({
                                connectionId: `${c.name}-${Date.now()}`,
                            }, (0, util_1.getEnv)(model)));
                        }
                    } }));
            case 1:
                return connectionType && configModel ? (react_1.default.createElement(ConfigureConnection_1.default, { connectionType: connectionType, model: configModel, session: session })) : null;
            default:
                return react_1.default.createElement(material_1.Typography, null, "Unknown step");
        }
    }
    function handleNext() {
        if (activeStep === steps.length - 1) {
            handleFinish();
        }
        else {
            setActiveStep(activeStep + 1);
        }
    }
    function handleBack() {
        setActiveStep(activeStep - 1);
    }
    function handleFinish() {
        const connectionConf = session.addConnectionConf(configModel);
        if (session.makeConnection) {
            session.makeConnection(connectionConf);
        }
        session.hideWidget(model);
    }
    function checkNextEnabled() {
        return ((activeStep === 0 && connectionType) || (activeStep === 1 && configModel));
    }
    return (react_1.default.createElement("div", { className: classes.root },
        react_1.default.createElement(material_1.Stepper, { className: classes.stepper, activeStep: activeStep, orientation: "vertical" }, steps.map(label => (react_1.default.createElement(material_1.Step, { key: label },
            react_1.default.createElement(material_1.StepLabel, null, label),
            react_1.default.createElement(material_1.StepContent, null,
                stepContent(),
                react_1.default.createElement("div", { className: classes.actionsContainer },
                    react_1.default.createElement(material_1.Button, { disabled: activeStep === 0, onClick: handleBack, className: classes.button }, "Back"),
                    react_1.default.createElement(material_1.Button, { disabled: !checkNextEnabled(), variant: "contained", color: "primary", onClick: handleNext, className: classes.button, "data-testid": "addConnectionNext" }, activeStep === steps.length - 1 ? 'Connect' : 'Next')))))))));
}
exports.default = (0, mobx_react_1.observer)(AddConnectionWidget);
//# sourceMappingURL=AddConnectionWidget.js.map
import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { makeStyles } from 'tss-react/mui';
import { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, } from '@mui/material';
import ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';
import CloseIcon from '@mui/icons-material/Close';
import AddIcon from '@mui/icons-material/Add';
import AssemblyTable from './AssemblyTable';
import AssemblyAddForm from './AssemblyAddForm';
import AssemblyEditor from './AssemblyEditor';
const useStyles = makeStyles()(theme => ({
    titleBox: {
        color: '#fff',
        backgroundColor: theme.palette.primary.main,
        textAlign: 'center',
    },
    dialogContent: {
        width: '100%',
    },
    backButton: {
        color: '#fff',
        position: 'absolute',
        left: theme.spacing(4),
        top: theme.spacing(4),
    },
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
}));
const AssemblyManager = observer(({ rootModel, onClose, }) => {
    const { classes } = useStyles();
    const [isFormOpen, setFormOpen] = useState(false);
    const [isAssemblyBeingEdited, setIsAssemblyBeingEdited] = useState(false);
    const [assemblyBeingEdited, setAssemblyBeingEdited] = useState();
    const showAssemblyTable = !isFormOpen && !isAssemblyBeingEdited;
    return (React.createElement(Dialog, { open: true, onClose: () => onClose(false) },
        React.createElement(DialogTitle, { className: classes.titleBox },
            showAssemblyTable ? 'Assembly manager' : null,
            isFormOpen ? (React.createElement(React.Fragment, null,
                React.createElement(IconButton, { "aria-label": "back", className: classes.backButton, onClick: () => setFormOpen(false) },
                    React.createElement(ArrowBackIosIcon, null)),
                "Add new assembly")) : null,
            isAssemblyBeingEdited ? (React.createElement(React.Fragment, null,
                React.createElement(IconButton, { "aria-label": "back", className: classes.backButton, onClick: () => setIsAssemblyBeingEdited(false) },
                    React.createElement(ArrowBackIosIcon, null)),
                returnAssemblyName(assemblyBeingEdited))) : null,
            React.createElement(IconButton, { "aria-label": "close", className: classes.closeButton, onClick: () => onClose(false) },
                React.createElement(CloseIcon, null))),
        React.createElement(DialogContent, null,
            React.createElement("div", { className: classes.dialogContent },
                showAssemblyTable ? (React.createElement(AssemblyTable, { rootModel: rootModel, setIsAssemblyBeingEdited: setIsAssemblyBeingEdited, setAssemblyBeingEdited: setAssemblyBeingEdited })) : null,
                isAssemblyBeingEdited ? (React.createElement(AssemblyEditor, { assembly: assemblyBeingEdited })) : null,
                isFormOpen ? (React.createElement(AssemblyAddForm, { rootModel: rootModel, setFormOpen: setFormOpen })) : null)),
        React.createElement(DialogActions, null, showAssemblyTable ? (React.createElement(React.Fragment, null,
            React.createElement(Button, { color: "secondary", variant: "contained", onClick: () => onClose(false) }, "Close"),
            React.createElement(Button, { variant: "contained", color: "secondary", startIcon: React.createElement(AddIcon, null), onClick: () => setFormOpen(true) }, "Add new assembly"))) : null)));
});
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function returnAssemblyName(assembly) {
    if (assembly !== undefined) {
        return assembly.name;
    }
    return null;
}
export default AssemblyManager;
//# sourceMappingURL=AssemblyManager.js.map
import React from 'react';
import { observer } from 'mobx-react';
import { IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Typography, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import CreateIcon from '@mui/icons-material/Create';
import DeleteIcon from '@mui/icons-material/Delete';
import { readConfObject, } from '@jbrowse/core/configuration';
const useStyles = makeStyles()(() => ({
    table: {
        minWidth: 500,
        minHeight: 150,
    },
    buttonCell: {
        padding: 3,
    },
    button: {
        display: 'inline-block',
        padding: 3,
        minHeight: 0,
        minWidth: 0,
    },
}));
const AssemblyTable = observer(({ rootModel, setIsAssemblyBeingEdited, setAssemblyBeingEdited, }) => {
    const { classes } = useStyles();
    function removeAssembly(name) {
        rootModel.jbrowse.removeAssemblyConf(name);
    }
    const rows = rootModel.jbrowse.assemblies.map(assembly => {
        const name = readConfObject(assembly, 'name');
        const displayName = readConfObject(assembly, 'displayName');
        const aliases = readConfObject(assembly, 'aliases');
        return (React.createElement(TableRow, { key: name },
            React.createElement(TableCell, null, name),
            React.createElement(TableCell, null, displayName),
            React.createElement(TableCell, null, aliases ? aliases.toString() : ''),
            React.createElement(TableCell, { className: classes.buttonCell },
                React.createElement(IconButton, { "data-testid": `${name}-edit`, className: classes.button, onClick: () => {
                        setIsAssemblyBeingEdited(true);
                        setAssemblyBeingEdited(assembly);
                    } },
                    React.createElement(CreateIcon, { color: "primary" })),
                React.createElement(IconButton, { "data-testid": `${name}-delete`, className: classes.button, onClick: () => {
                        removeAssembly(name);
                    } },
                    React.createElement(DeleteIcon, { color: "error" })))));
    });
    return (React.createElement(TableContainer, { component: Paper },
        React.createElement(Table, { className: classes.table },
            React.createElement(TableHead, null,
                React.createElement(TableRow, null,
                    React.createElement(TableCell, null,
                        React.createElement(Typography, { variant: "h5" }, "Name")),
                    React.createElement(TableCell, null,
                        React.createElement(Typography, { variant: "h5" }, "Display name")),
                    React.createElement(TableCell, null,
                        React.createElement(Typography, { variant: "h5" }, "Aliases")),
                    React.createElement(TableCell, null,
                        React.createElement(Typography, { variant: "h5" }, "Actions")))),
            React.createElement(TableBody, null, rows))));
});
export default AssemblyTable;
//# sourceMappingURL=AssemblyTable.js.map
import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { getParent } from 'mobx-state-tree';
import { Button, Dialog, DialogTitle, DialogActions, DialogContent, IconButton, ListItem, Tooltip, Typography, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import CloseIcon from '@mui/icons-material/Close';
import LockIcon from '@mui/icons-material/Lock';
import { getSession } from '@jbrowse/core/util';
import { isSessionWithSessionPlugins, } from '@jbrowse/core/util/types';
const useStyles = makeStyles()(() => ({
    closeDialog: {
        position: 'absolute',
        right: 0,
        top: 0,
    },
    dialogContainer: {
        margin: 15,
    },
    lockedPluginTooltip: {
        marginRight: '0.5rem',
    },
}));
function LockedPlugin() {
    const { classes } = useStyles();
    return (React.createElement(Tooltip, { className: classes.lockedPluginTooltip, title: "This plugin was installed by an administrator, you cannot remove it." },
        React.createElement(LockIcon, null)));
}
function PluginDialog({ onClose, plugin, }) {
    const { classes } = useStyles();
    return (React.createElement(Dialog, { open: true, onClose: () => onClose() },
        React.createElement(DialogTitle, null,
            React.createElement(IconButton, { className: classes.closeDialog, "aria-label": "close-dialog", onClick: () => onClose() },
                React.createElement(CloseIcon, null))),
        React.createElement(DialogContent, null,
            React.createElement(Typography, null,
                "Please confirm that you want to remove ",
                plugin,
                ". Note: if any resources in this session still use this plugin, it may cause your session to crash"),
            React.createElement(DialogActions, null,
                React.createElement(Button, { variant: "contained", color: "primary", onClick: () => {
                        // avoid showing runtime plugin warning
                        window.setTimeout(() => {
                            onClose(plugin);
                        }, 500);
                    } }, "Confirm"),
                React.createElement(Button, { variant: "contained", color: "secondary", onClick: () => {
                        onClose();
                    } }, "Cancel")))));
}
function InstalledPlugin({ plugin, model, pluginManager, }) {
    const [dialogPlugin, setDialogPlugin] = useState();
    const session = getSession(model);
    const { sessionPlugins } = session;
    const isSessionPlugin = sessionPlugins === null || sessionPlugins === void 0 ? void 0 : sessionPlugins.some(p => pluginManager.pluginMetadata[plugin.name].url === p.url);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const rootModel = getParent(model, 3);
    const { jbrowse, adminMode } = rootModel;
    return (React.createElement(React.Fragment, null,
        dialogPlugin ? (React.createElement(PluginDialog, { plugin: dialogPlugin, onClose: name => {
                if (name) {
                    const pluginMetadata = pluginManager.pluginMetadata[plugin.name];
                    if (adminMode) {
                        jbrowse.removePlugin(pluginMetadata);
                    }
                    else if (isSessionWithSessionPlugins(session)) {
                        session.removeSessionPlugin(pluginMetadata);
                    }
                }
                setDialogPlugin(undefined);
            } })) : null,
        React.createElement(ListItem, { key: plugin.name },
            adminMode || isSessionPlugin ? (React.createElement(IconButton, { "aria-label": "removePlugin", "data-testid": `removePlugin-${plugin.name}`, onClick: () => setDialogPlugin(plugin.name) },
                React.createElement(CloseIcon, null))) : (React.createElement(LockedPlugin, null)),
            React.createElement(Typography, null, plugin.name))));
}
export default observer(InstalledPlugin);
//# sourceMappingURL=InstalledPlugin.js.map
import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { getRoot } from 'mobx-state-tree';
import { Button, Collapse, Dialog, DialogActions, DialogTitle, DialogContent, DialogContentText, TextField, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
// icons
import IconButton from '@mui/material/IconButton';
import CloseIcon from '@mui/icons-material/Close';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
const useStyles = makeStyles()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
    },
    dialogContent: {
        display: 'flex',
        flexDirection: 'column',
    },
    expand: {
        transform: 'rotate(0deg)',
        marginLeft: 'auto',
        transition: theme.transitions.create('transform', {
            duration: theme.transitions.duration.shortest,
        }),
    },
    expandOpen: {
        transform: 'rotate(180deg)',
    },
}));
function CustomPluginForm({ open, onClose, model, }) {
    const { classes, cx } = useStyles();
    const [umdPluginName, setUMDPluginName] = useState('');
    const [umdPluginUrl, setUMDPluginUrl] = useState('');
    const [esmPluginUrl, setESMPluginUrl] = useState('');
    const [cjsPluginUrl, setCJSPluginUrl] = useState('');
    const [advancedOptionsOpen, setAdvancedOptionsOpen] = useState(false);
    function handleChange(event) {
        const { name, value } = event.target;
        if (name === 'umdName') {
            setUMDPluginName(value);
        }
        if (name === 'umdUrl') {
            setUMDPluginUrl(value);
        }
        if (name === 'esmUrl') {
            setESMPluginUrl(value);
        }
        if (name === 'cjsUrl') {
            setCJSPluginUrl(value);
        }
    }
    function handleOpenAdvancedOptions() {
        setAdvancedOptionsOpen(!advancedOptionsOpen);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const { jbrowse } = getRoot(model);
    const ready = Boolean((umdPluginName && umdPluginUrl) || esmPluginUrl || cjsPluginUrl);
    function handleSubmit() {
        if (!ready) {
            return;
        }
        const pluginDefinition = {};
        if (umdPluginName && umdPluginUrl) {
            pluginDefinition.name = umdPluginName;
            pluginDefinition.umdUrl = umdPluginUrl;
        }
        if (esmPluginUrl) {
            pluginDefinition.esmUrl = esmPluginUrl;
        }
        if (cjsPluginUrl) {
            pluginDefinition.cjsUrl = cjsPluginUrl;
        }
        jbrowse.addPlugin(pluginDefinition);
    }
    function handleClose() {
        setUMDPluginName('');
        setUMDPluginUrl('');
        setESMPluginUrl('');
        setCJSPluginUrl('');
        onClose();
    }
    return (React.createElement(Dialog, { open: open, onClose: handleClose },
        React.createElement(DialogTitle, null,
            "Add custom plugin",
            React.createElement(IconButton, { size: "medium", className: classes.closeButton, onClick: () => onClose() },
                React.createElement(CloseIcon, null))),
        React.createElement("form", { onSubmit: handleSubmit },
            React.createElement(DialogContent, { className: classes.dialogContent },
                React.createElement(DialogContentText, null, "Enter the name of the plugin and its URL. The name should match what is defined in the plugin's build."),
                React.createElement(TextField, { id: "umd-name-input", name: "umdName", label: "Plugin name", variant: "outlined", value: umdPluginName, onChange: handleChange }),
                React.createElement(TextField, { id: "umd-url-input", name: "umdUrl", label: "Plugin URL", variant: "outlined", value: umdPluginUrl, onChange: handleChange }),
                React.createElement(DialogContentText, { onClick: handleOpenAdvancedOptions },
                    React.createElement(IconButton, { className: cx(classes.expand, {
                            [classes.expandOpen]: advancedOptionsOpen,
                        }), "aria-expanded": advancedOptionsOpen, "aria-label": "show more" },
                        React.createElement(ExpandMoreIcon, null)),
                    "Advanced options"),
                React.createElement(Collapse, { in: advancedOptionsOpen },
                    React.createElement("div", { className: classes.dialogContent },
                        React.createElement(DialogContentText, null, "The above fields assume that the plugin is built in UMD format. If your plugin is in another format, or you have additional builds you want to add (such as a CJS build for using NodeJS APIs in desktop), you can enter the URLs for those builds below."),
                        React.createElement(TextField, { id: "esm-url-input", name: "esmUrl", label: "ESM build URL", variant: "outlined", value: esmPluginUrl, onChange: handleChange }),
                        React.createElement(TextField, { id: "cjs-url-input", name: "cjsUrl", label: "CJS build URL", variant: "outlined", value: cjsPluginUrl, onChange: handleChange })))),
            React.createElement(DialogActions, null,
                React.createElement(Button, { variant: "contained", onClick: handleClose }, "Cancel"),
                React.createElement(Button, { variant: "contained", color: "primary", onClick: handleSubmit, disabled: !ready }, "Submit")))));
}
export default observer(CustomPluginForm);
//# sourceMappingURL=CustomPluginForm.js.map
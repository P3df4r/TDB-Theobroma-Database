import React, { useState, useEffect } from 'react';
import { Accordion, AccordionSummary, Button, IconButton, InputAdornment, TextField, Typography, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { getEnv } from 'mobx-state-tree';
import { LoadingEllipses } from '@jbrowse/core/ui';
import { getSession, isElectron } from '@jbrowse/core/util';
// icons
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ClearIcon from '@mui/icons-material/Clear';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
// locals
import InstalledPluginsList from './InstalledPluginsList';
import PluginCard from './PluginCard';
import CustomPluginForm from './CustomPluginForm';
const useStyles = makeStyles()(theme => ({
    root: {
        margin: theme.spacing(1),
    },
    expandIcon: {
        color: '#fff',
    },
    adminBadge: {
        margin: '0.5em',
        borderRadius: 3,
        backgroundColor: theme.palette.quaternary.main,
        padding: '1em',
        display: 'flex',
        alignContent: 'center',
    },
    customPluginButton: {
        margin: '0.5em',
        display: 'flex',
        justifyContent: 'center',
    },
}));
function PluginStoreWidget({ model }) {
    const { classes } = useStyles();
    const [pluginArray, setPluginArray] = useState();
    const [error, setError] = useState();
    const [customPluginFormOpen, setCustomPluginFormOpen] = useState(false);
    const { adminMode } = getSession(model);
    const { pluginManager } = getEnv(model);
    useEffect(() => {
        const controller = new AbortController();
        const { signal } = controller;
        (async () => {
            try {
                const response = await fetch('https://jbrowse.org/plugin-store/plugins.json', { signal });
                if (!response.ok) {
                    const err = await response.text();
                    throw new Error(`Failed to fetch plugin data: ${response.status} ${response.statusText} ${err}`);
                }
                const array = await response.json();
                if (!signal.aborted) {
                    setPluginArray(array.plugins);
                }
            }
            catch (e) {
                console.error(e);
                setError(e);
            }
        })();
        return () => {
            controller.abort();
        };
    }, []);
    return (React.createElement("div", { className: classes.root },
        adminMode && (React.createElement(React.Fragment, null,
            !isElectron && (React.createElement("div", { className: classes.adminBadge },
                React.createElement(InfoOutlinedIcon, { style: { marginRight: '0.3em' } }),
                React.createElement(Typography, null,
                    "You are using the ",
                    React.createElement("code", null, "admin-server"),
                    ". Any changes you make will be saved to your configuration file. You also have the ability to add custom plugins that are not in the store."))),
            React.createElement("div", { className: classes.customPluginButton },
                React.createElement(Button, { variant: "contained", color: "primary", onClick: () => setCustomPluginFormOpen(true) }, "Add custom plugin")),
            React.createElement(CustomPluginForm, { open: customPluginFormOpen, onClose: () => setCustomPluginFormOpen(false), model: model }))),
        React.createElement(TextField, { label: "Filter plugins", value: model.filterText, onChange: event => model.setFilterText(event.target.value), fullWidth: true, InputProps: {
                endAdornment: (React.createElement(InputAdornment, { position: "end" },
                    React.createElement(IconButton, { color: "secondary", onClick: () => model.clearFilterText() },
                        React.createElement(ClearIcon, null)))),
            } }),
        React.createElement(Accordion, { defaultExpanded: true },
            React.createElement(AccordionSummary, { expandIcon: React.createElement(ExpandMoreIcon, { className: classes.expandIcon }) },
                React.createElement(Typography, { variant: "h5" }, "Installed plugins")),
            React.createElement("div", { style: { margin: '1em' } },
                React.createElement(InstalledPluginsList, { pluginManager: pluginManager, model: model }))),
        React.createElement(Accordion, { defaultExpanded: true },
            React.createElement(AccordionSummary, { expandIcon: React.createElement(ExpandMoreIcon, { className: classes.expandIcon }) },
                React.createElement(Typography, { variant: "h5" }, "Available plugins")),
            error ? (React.createElement(Typography, { color: "error" }, `${error}`)) : pluginArray ? (pluginArray
                .filter(plugin => {
                // If pugin only has cjsUrl, don't display outside desktop
                if (!isElectron &&
                    !(plugin.esmUrl || plugin.url || plugin.umdUrl)) {
                    return false;
                }
                return plugin.name
                    .toLowerCase()
                    .includes(model.filterText.toLowerCase());
            })
                .map(plugin => (React.createElement(PluginCard, { key: plugin.name, plugin: plugin, model: model, adminMode: !!adminMode })))) : (React.createElement(LoadingEllipses, null)))));
}
export default observer(PluginStoreWidget);
//# sourceMappingURL=PluginStoreWidget.js.map
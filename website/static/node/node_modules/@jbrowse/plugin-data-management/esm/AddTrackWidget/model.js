import { types } from 'mobx-state-tree';
import { ElementId } from '@jbrowse/core/util/types/mst';
import { guessAdapter, guessTrackType, getFileName, UNSUPPORTED, } from '@jbrowse/core/util/tracks';
function isAbsoluteUrl(url = '') {
    try {
        new URL(url);
        return true;
    }
    catch (error) {
        return url.startsWith('/');
    }
}
export default function f(pluginManager) {
    return types
        .model('AddTrackModel', {
        id: ElementId,
        type: types.literal('AddTrackWidget'),
        view: types.safeReference(pluginManager.pluggableMstType('view', 'stateModel')),
    })
        .volatile(() => ({
        trackSource: 'fromFile',
        trackData: undefined,
        indexTrackData: undefined,
        // alts
        altAssemblyName: '',
        altTrackName: '',
        altTrackType: '',
        adapterHint: '',
        textIndexTrack: true,
        textIndexingConf: undefined,
    }))
        .actions(self => ({
        setAdapterHint(obj) {
            self.adapterHint = obj;
        },
        setTrackSource(str) {
            self.trackSource = str;
        },
        setTextIndexingConf(conf) {
            self.textIndexingConf = conf;
        },
        setTextIndexTrack(flag) {
            self.textIndexTrack = flag;
        },
        setTrackData(obj) {
            self.trackData = obj;
        },
        setIndexTrackData(obj) {
            self.indexTrackData = obj;
        },
        setAssembly(str) {
            self.altAssemblyName = str;
        },
        setTrackName(str) {
            self.altTrackName = str;
        },
        setTrackType(str) {
            self.altTrackType = str;
        },
        clearData() {
            self.trackSource = '';
            self.altTrackName = '';
            self.altTrackType = '';
            self.altAssemblyName = '';
            self.adapterHint = '';
            self.indexTrackData = undefined;
            self.trackData = undefined;
            self.textIndexingConf = undefined;
            self.textIndexTrack = true;
        },
    }))
        .views(self => ({
        get trackAdapter() {
            const { trackData, indexTrackData, adapterHint } = self;
            return trackData
                ? guessAdapter(trackData, indexTrackData, adapterHint, self)
                : undefined;
        },
        get trackName() {
            return (self.altTrackName ||
                (self.trackData ? getFileName(self.trackData) : ''));
        },
        get isFtp() {
            var _a, _b;
            const { trackData: track, indexTrackData: index } = self;
            return !!(
            // @ts-ignore
            (((_a = index === null || index === void 0 ? void 0 : index.uri) === null || _a === void 0 ? void 0 : _a.startsWith('ftp://')) || ((_b = track === null || track === void 0 ? void 0 : track.uri) === null || _b === void 0 ? void 0 : _b.startsWith('ftp://'))));
        },
        get isRelativeTrackUrl() {
            var _a;
            // @ts-ignore
            const uri = (_a = self.trackData) === null || _a === void 0 ? void 0 : _a.uri;
            return uri ? !isAbsoluteUrl(uri) : false;
        },
        get isRelativeIndexUrl() {
            var _a;
            // @ts-ignore
            const uri = (_a = self.indexTrackData) === null || _a === void 0 ? void 0 : _a.uri;
            return uri ? !isAbsoluteUrl(uri) : false;
        },
        get isRelativeUrl() {
            return this.isRelativeIndexUrl || this.isRelativeTrackUrl;
        },
        get trackHttp() {
            var _a, _b;
            // @ts-ignore
            return (_b = (_a = self.trackData) === null || _a === void 0 ? void 0 : _a.uri) === null || _b === void 0 ? void 0 : _b.startsWith('http://');
        },
        get indexHttp() {
            var _a, _b;
            // @ts-ignore
            return (_b = (_a = self.indexTrackData) === null || _a === void 0 ? void 0 : _a.uri) === null || _b === void 0 ? void 0 : _b.startsWith('http://');
        },
        get wrongProtocol() {
            return (window.location.protocol === 'https:' &&
                (this.trackHttp || this.indexHttp));
        },
        get unsupported() {
            var _a;
            return ((_a = this.trackAdapter) === null || _a === void 0 ? void 0 : _a.type) === UNSUPPORTED;
        },
        get assembly() {
            var _a;
            return self.altAssemblyName || ((_a = self.view.assemblyNames) === null || _a === void 0 ? void 0 : _a[0]);
        },
        get trackType() {
            return (self.altTrackType ||
                (this.trackAdapter
                    ? guessTrackType(this.trackAdapter.type, self)
                    : ''));
        },
    }))
        .views(self => ({
        get warningMessage() {
            if (self.isFtp) {
                return `Warning: JBrowse cannot access files using the ftp protocol`;
            }
            else if (self.isRelativeUrl) {
                return `Warning: one or more of your files do not provide the protocol e.g.
          https://, please provide an absolute URL unless you are sure a
          relative URL is intended.`;
            }
            else if (self.wrongProtocol) {
                return `Warning: You entered a http:// resources but we cannot access HTTP
          resources from JBrowse when it is running on https. Please use an
          https URL for your track, or access the JBrowse app from the http
          protocol`;
            }
            return '';
        },
    }));
}
//# sourceMappingURL=model.js.map
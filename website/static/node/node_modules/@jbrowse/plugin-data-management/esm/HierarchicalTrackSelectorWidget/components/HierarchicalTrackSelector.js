import React, { useCallback, useMemo, useState, useRef, useEffect } from 'react';
import { Fab, Menu, MenuItem } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
// icons
import AddIcon from '@mui/icons-material/Add';
// other
import AutoSizer from 'react-virtualized-auto-sizer';
import { getSession, isSessionModelWithWidgets, isSessionModelWithConnections, isSessionWithAddTracks, } from '@jbrowse/core/util';
import { observer } from 'mobx-react';
import { VariableSizeTree } from 'react-vtree';
import Header from './Header';
import Node from './Node';
const useStyles = makeStyles()(theme => ({
    fab: {
        position: 'absolute',
        bottom: theme.spacing(6),
        right: theme.spacing(6),
    },
}));
function getNodeData(node, nestingLevel, extra, selection) {
    const isLeaf = !!node.conf;
    const selected = !!selection[node.id];
    return {
        data: {
            defaultHeight: isLeaf ? 22 : 40,
            isLeaf,
            isOpenByDefault: true,
            nestingLevel,
            selected,
            ...node,
            ...extra,
        },
        nestingLevel,
        node,
    };
}
// this is the main tree component for the hierarchical track selector in note:
// in jbrowse-web the toolbar is position="sticky" which means the autosizer
// includes the height of the toolbar, so we subtract the given offsets
const HierarchicalTree = observer(({ height, tree, model, }) => {
    const { filterText, selection, view } = model;
    const treeRef = useRef(null);
    const session = getSession(model);
    const { drawerPosition } = session;
    const obj = useMemo(() => Object.fromEntries(selection.map(s => [s.trackId, s])), [selection]);
    const extra = useMemo(() => ({
        onChange: (trackId) => view.toggleTrack(trackId),
        toggleCollapse: (pathName) => model.toggleCategory(pathName),
        tree,
        model,
        drawerPosition,
    }), [view, model, drawerPosition, tree]);
    const treeWalker = useCallback(function* treeWalker() {
        for (let i = 0; i < tree.children.length; i++) {
            const r = tree.children[i];
            yield getNodeData(r, 0, extra, obj);
        }
        while (true) {
            // @ts-ignore
            const parentMeta = yield;
            for (let i = 0; i < parentMeta.node.children.length; i++) {
                const curr = parentMeta.node.children[i];
                yield getNodeData(curr, parentMeta.nestingLevel + 1, extra, obj);
            }
        }
    }, [tree, extra, obj]);
    useEffect(() => {
        // @ts-ignore
        treeRef.current.recomputeTree({
            refreshNodes: true,
            useDefaultHeight: true,
        });
    }, [tree, filterText]);
    return (React.createElement(React.Fragment, null,
        React.createElement(VariableSizeTree, { ref: treeRef, treeWalker: treeWalker, height: height }, Node)));
});
// Don't use autosizer in jest and instead hardcode a height, otherwise fails
// jest tests
const AutoSizedHierarchicalTree = ({ tree, model, offset, }) => {
    return typeof jest === 'undefined' ? (React.createElement(AutoSizer, { disableWidth: true }, ({ height }) => {
        return (React.createElement(HierarchicalTree, { height: height - offset, model: model, tree: tree }));
    })) : (React.createElement(HierarchicalTree, { height: 9000, model: model, tree: tree }));
};
const Wrapper = ({ overrideDimensions, children, }) => {
    return overrideDimensions ? (React.createElement("div", { style: { ...overrideDimensions } }, children)) : (React.createElement(React.Fragment, null, children));
};
const HierarchicalTrackSelectorContainer = observer(({ model, toolbarHeight, overrideDimensions, }) => {
    const { classes } = useStyles();
    const session = getSession(model);
    const [anchorEl, setAnchorEl] = useState(null);
    function handleFabClose() {
        setAnchorEl(null);
    }
    const hasConnections = isSessionModelWithConnections(session);
    const hasAddTrack = isSessionWithAddTracks(session);
    return (React.createElement(Wrapper, { overrideDimensions: overrideDimensions },
        React.createElement(HierarchicalTrackSelector, { model: model, toolbarHeight: toolbarHeight }),
        hasAddTrack || hasConnections ? (React.createElement(React.Fragment, null,
            React.createElement(Fab, { color: "secondary", className: classes.fab, onClick: event => setAnchorEl(event.currentTarget) },
                React.createElement(AddIcon, null)),
            React.createElement(Menu, { anchorEl: anchorEl, open: Boolean(anchorEl), onClose: () => setAnchorEl(null) },
                hasConnections ? (React.createElement(MenuItem, { onClick: () => {
                        handleFabClose();
                        if (isSessionModelWithWidgets(session)) {
                            session.showWidget(session.addWidget('AddConnectionWidget', 'addConnectionWidget'));
                        }
                    } }, "Add connection")) : null,
                hasAddTrack ? (React.createElement(MenuItem, { onClick: () => {
                        handleFabClose();
                        if (isSessionModelWithWidgets(session)) {
                            session.showWidget(session.addWidget('AddTrackWidget', 'addTrackWidget', {
                                view: model.view.id,
                            }));
                        }
                    } }, "Add track")) : null))) : null));
});
const HierarchicalTrackSelector = observer(({ model, toolbarHeight = 0, }) => {
    const [assemblyIdx, setAssemblyIdx] = useState(0);
    const [headerHeight, setHeaderHeight] = useState(0);
    const { assemblyNames } = model;
    const assemblyName = assemblyNames.length ? assemblyNames[assemblyIdx] : '';
    return assemblyName ? (React.createElement(React.Fragment, null,
        React.createElement(Header, { model: model, setHeaderHeight: setHeaderHeight, setAssemblyIdx: setAssemblyIdx, assemblyIdx: assemblyIdx }),
        React.createElement(AutoSizedHierarchicalTree, { tree: model.hierarchy(assemblyName), model: model, offset: toolbarHeight + headerHeight }))) : null;
});
export default HierarchicalTrackSelectorContainer;
//# sourceMappingURL=HierarchicalTrackSelector.js.map
import React, { Suspense, lazy, useState } from 'react';
import { Badge, IconButton, InputAdornment, TextField } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import JBrowseMenu from '@jbrowse/core/ui/Menu';
import { getSession, getEnv, isSessionModelWithWidgets, isSessionModelWithConnections, isSessionWithAddTracks, } from '@jbrowse/core/util';
import { readConfObject, } from '@jbrowse/core/configuration';
// icons
import ClearIcon from '@mui/icons-material/Clear';
import MenuIcon from '@mui/icons-material/Menu';
import ShoppingCartIcon from '@mui/icons-material/ShoppingCart';
import { Cable } from '@jbrowse/core/ui/Icons';
// lazy components
const CloseConnectionDialog = lazy(() => import('./CloseConnectionDialog'));
const DeleteConnectionDialog = lazy(() => import('./DeleteConnectionDialog'));
const ManageConnectionsDialog = lazy(() => import('./ManageConnectionsDialog'));
const ToggleConnectionsDialog = lazy(() => import('./ToggleConnectionsDialog'));
const useStyles = makeStyles()(theme => ({
    searchBox: {
        margin: theme.spacing(2),
    },
    menuIcon: {
        marginRight: theme.spacing(1),
        marginBottom: 0,
    },
}));
function HierarchicalTrackSelectorHeader({ model, setHeaderHeight, setAssemblyIdx, assemblyIdx, }) {
    const { classes } = useStyles();
    const session = getSession(model);
    const [connectionEl, setConnectionEl] = useState();
    const [selectionEl, setSelectionEl] = useState();
    const [menuEl, setMenuEl] = useState();
    const [modalInfo, setModalInfo] = useState();
    const [deleteDlgDetails, setDeleteDlgDetails] = useState();
    const [connectionManagerOpen, setConnectionManagerOpen] = useState(false);
    const [connectionToggleOpen, setConnectionToggleOpen] = useState(false);
    const { assemblyNames } = model;
    function breakConnection(connectionConf, deletingConnection) {
        const name = readConfObject(connectionConf, 'name');
        // @ts-ignore
        const result = session.prepareToBreakConnection(connectionConf);
        if (result) {
            const [safelyBreakConnection, dereferenceTypeCount] = result;
            if (Object.keys(dereferenceTypeCount).length > 0) {
                setModalInfo({
                    connectionConf,
                    safelyBreakConnection,
                    dereferenceTypeCount,
                    name,
                });
            }
            else {
                safelyBreakConnection();
            }
        }
        if (deletingConnection) {
            setDeleteDlgDetails({ name, connectionConf });
        }
    }
    const connectionMenuItems = [
        {
            label: 'Turn on/off connections...',
            onClick: () => setConnectionToggleOpen(true),
        },
    ];
    if (isSessionModelWithConnections(session)) {
        connectionMenuItems.unshift({
            label: 'Add connection',
            onClick: () => {
                if (isSessionModelWithWidgets(session)) {
                    session.showWidget(session.addWidget('AddConnectionWidget', 'addConnectionWidget'));
                }
            },
        });
        connectionMenuItems.push({
            label: 'Delete connections...',
            onClick: () => setConnectionManagerOpen(true),
        });
    }
    const assemblyMenuItems = assemblyNames.length > 1
        ? [
            {
                label: 'Select assembly...',
                subMenu: assemblyNames.map((name, idx) => ({
                    label: name,
                    onClick: () => setAssemblyIdx(idx),
                })),
            },
        ]
        : [];
    const menuItems = [
        {
            label: 'Add track...',
            onClick: () => {
                if (isSessionModelWithWidgets(session)) {
                    session.showWidget(session.addWidget('AddTrackWidget', 'addTrackWidget', {
                        view: model.view.id,
                    }));
                }
            },
        },
        ...assemblyMenuItems,
    ];
    const items = getEnv(model).pluginManager.evaluateExtensionPoint('TrackSelector-multiTrackMenuItems', [], { session });
    return (React.createElement("div", { ref: ref => setHeaderHeight((ref === null || ref === void 0 ? void 0 : ref.getBoundingClientRect().height) || 0), "data-testid": "hierarchical_track_selector" },
        React.createElement("div", { style: { display: 'flex' } },
            isSessionWithAddTracks(session) && (React.createElement(IconButton, { className: classes.menuIcon, onClick: event => setMenuEl(event.currentTarget) },
                React.createElement(MenuIcon, null))),
            session.makeConnection && (React.createElement(IconButton, { className: classes.menuIcon, onClick: event => setConnectionEl(event.currentTarget) },
                React.createElement(Cable, null))),
            model.selection.length ? (React.createElement(IconButton, { className: classes.menuIcon, onClick: event => setSelectionEl(event.currentTarget) },
                React.createElement(Badge, { badgeContent: model.selection.length, color: "primary" },
                    React.createElement(ShoppingCartIcon, null)))) : null,
            React.createElement(TextField, { className: classes.searchBox, label: "Filter tracks", value: model.filterText, onChange: event => model.setFilterText(event.target.value), fullWidth: true, InputProps: {
                    endAdornment: (React.createElement(InputAdornment, { position: "end" },
                        React.createElement(IconButton, { color: "secondary", onClick: model.clearFilterText },
                            React.createElement(ClearIcon, null)))),
                } })),
        React.createElement(JBrowseMenu, { anchorEl: connectionEl, open: Boolean(connectionEl), onMenuItemClick: (_, callback) => {
                callback();
                setConnectionEl(undefined);
            }, onClose: () => setConnectionEl(undefined), menuItems: connectionMenuItems }),
        React.createElement(JBrowseMenu, { anchorEl: menuEl, open: Boolean(menuEl), onMenuItemClick: (_, callback) => {
                callback();
                setMenuEl(undefined);
            }, onClose: () => setMenuEl(undefined), menuItems: menuItems }),
        React.createElement(JBrowseMenu, { anchorEl: selectionEl, open: Boolean(selectionEl), onMenuItemClick: (_, callback) => {
                callback();
                setSelectionEl(undefined);
            }, onClose: () => setSelectionEl(undefined), menuItems: [
                { label: 'Clear', onClick: () => model.clearSelection() },
                ...items.map(item => ({
                    ...item,
                    ...('onClick' in item
                        ? { onClick: () => item.onClick(model) }
                        : {}),
                })),
            ] }),
        React.createElement(Suspense, { fallback: React.createElement("div", null) },
            modalInfo ? (React.createElement(CloseConnectionDialog, { modalInfo: modalInfo, setModalInfo: setModalInfo })) : null,
            deleteDlgDetails ? (React.createElement(DeleteConnectionDialog, { handleClose: () => setDeleteDlgDetails(undefined), deleteDialogDetails: deleteDlgDetails, session: session })) : null,
            connectionManagerOpen ? (React.createElement(ManageConnectionsDialog, { handleClose: () => setConnectionManagerOpen(false), breakConnection: breakConnection, session: session })) : null,
            connectionToggleOpen ? (React.createElement(ToggleConnectionsDialog, { handleClose: () => setConnectionToggleOpen(false), session: session, breakConnection: breakConnection })) : null)));
}
export default observer(HierarchicalTrackSelectorHeader);
//# sourceMappingURL=Header.js.map
import { Instance } from 'mobx-state-tree';
import { AnyConfigurationModel } from '@jbrowse/core/configuration';
import PluginManager from '@jbrowse/core/PluginManager';
export type TreeNode = {
    name: string;
    id: string;
    conf?: AnyConfigurationModel;
    checked?: boolean;
    isOpenByDefault?: boolean;
    children: TreeNode[];
};
export declare function generateHierarchy(model: HierarchicalTrackSelectorModel, trackConfigurations: AnyConfigurationModel[], collapsed: {
    get: (arg: string) => boolean | undefined;
}): TreeNode[];
export default function stateTreeFactory(pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<"HierarchicalTrackSelectorWidget">;
    collapsed: import("mobx-state-tree").IMapType<import("mobx-state-tree").ISimpleType<boolean>>;
    filterText: import("mobx-state-tree").IType<string | undefined, string, string>;
    view: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
}, {
    selection: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
} & {
    addToSelection(elt: AnyConfigurationModel[]): void;
    removeFromSelection(elt: AnyConfigurationModel[]): void;
    clearSelection(): void;
    setView(view: unknown): void;
    toggleCategory(pathName: string): void;
    clearFilterText(): void;
    setFilterText(newText: string): void;
} & {
    getRefSeqTrackConf(assemblyName: string): any;
} & {
    trackConfigurations(assemblyName: string): any[];
    readonly assemblyNames: string[];
    connectionTrackConfigurations(assemblyName: string, connection: {
        tracks: AnyConfigurationModel[];
    }): ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
} & {
    hierarchy(assemblyName: string): {
        name: string;
        id: string;
        children: ({
            id: any;
            name: any;
            children: TreeNode[];
            state: {
                expanded: boolean;
            };
        } | {
            name: string;
            id: string;
            children: TreeNode[];
        })[];
    };
    connectionHierarchy(assemblyName: string, connection: {
        tracks: AnyConfigurationModel[];
    }): TreeNode[];
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type HierarchicalTrackSelectorStateModel = ReturnType<typeof stateTreeFactory>;
export type HierarchicalTrackSelectorModel = Instance<HierarchicalTrackSelectorStateModel>;

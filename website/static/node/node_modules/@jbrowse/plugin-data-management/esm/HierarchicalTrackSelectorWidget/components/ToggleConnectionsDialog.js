import React from 'react';
import { Button, Checkbox, Dialog, DialogTitle, DialogContent, DialogActions, FormControlLabel, IconButton, Typography, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import CloseIcon from '@mui/icons-material/Close';
import { observer } from 'mobx-react';
import { readConfObject, } from '@jbrowse/core/configuration';
export function ellipses(slug) {
    return slug.length > 20 ? `${slug.slice(0, 20)}...` : slug;
}
const useStyles = makeStyles()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    connectionContainer: {
        width: 500,
        margin: theme.spacing(4),
    },
}));
function ToggleConnectionDialog({ session, handleClose, breakConnection, }) {
    const { classes } = useStyles();
    const { connections, connectionInstances: instances = [] } = session;
    return (React.createElement(Dialog, { open: true, onClose: handleClose, maxWidth: "lg" },
        React.createElement(DialogTitle, null,
            "Turn on/off connections",
            React.createElement(IconButton, { className: classes.closeButton, onClick: () => handleClose() },
                React.createElement(CloseIcon, null))),
        React.createElement(DialogContent, null,
            React.createElement(Typography, null, "Use the checkbox to turn on/off connections"),
            React.createElement("div", { className: classes.connectionContainer },
                connections.map(conf => {
                    const name = readConfObject(conf, 'name');
                    const assemblyNames = readConfObject(conf, 'assemblyNames');
                    const found = instances.find(conn => name === conn.name);
                    return (React.createElement(FormControlLabel, { key: conf.connectionId, control: React.createElement(Checkbox, { checked: !!found, onChange: () => {
                                var _a;
                                if (found) {
                                    breakConnection(conf);
                                }
                                else {
                                    (_a = session.makeConnection) === null || _a === void 0 ? void 0 : _a.call(session, conf);
                                }
                            }, color: "primary" }), label: `${name} (${ellipses(assemblyNames.join(','))})` }));
                }),
                !connections.length ? (React.createElement(Typography, null, "No connections found")) : null)),
        React.createElement(DialogActions, null,
            React.createElement(Button, { onClick: () => handleClose(), variant: "contained", color: "primary" }, "Close"))));
}
export default observer(ToggleConnectionDialog);
//# sourceMappingURL=ToggleConnectionsDialog.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AdapterType_1 = __importDefault(require("@jbrowse/core/pluggableElementTypes/AdapterType"));
const Plugin_1 = __importDefault(require("@jbrowse/core/Plugin"));
const BigBedAdapter_1 = require("./BigBedAdapter");
const BedTabixAdapter_1 = require("./BedTabixAdapter");
const BedAdapter_1 = require("./BedAdapter");
const tracks_1 = require("@jbrowse/core/util/tracks");
class BedPlugin extends Plugin_1.default {
    constructor() {
        super(...arguments);
        this.name = 'BedPlugin';
    }
    install(pluginManager) {
        pluginManager.addAdapterType(() => new AdapterType_1.default({
            name: 'BigBedAdapter',
            configSchema: BigBedAdapter_1.configSchema,
            getAdapterClass: () => Promise.resolve().then(() => __importStar(require('./BigBedAdapter/BigBedAdapter'))).then(r => r.default),
        }));
        pluginManager.addToExtensionPoint('Core-guessAdapterForLocation', (adapterGuesser) => {
            return (file, index, adapterHint) => {
                const regexGuess = /\.(bb|bigbed)$/i;
                const adapterName = 'BigBedAdapter';
                const fileName = (0, tracks_1.getFileName)(file);
                const obj = {
                    type: adapterName,
                    bigBedLocation: file,
                };
                if (regexGuess.test(fileName) && !adapterHint) {
                    return obj;
                }
                else if (adapterHint === adapterName) {
                    return obj;
                }
                return adapterGuesser(file, index, adapterHint);
            };
        });
        pluginManager.addAdapterType(() => new AdapterType_1.default({
            name: 'BedTabixAdapter',
            configSchema: BedTabixAdapter_1.configSchema,
            getAdapterClass: () => Promise.resolve().then(() => __importStar(require('./BedTabixAdapter/BedTabixAdapter'))).then(r => r.default),
        }));
        pluginManager.addAdapterType(() => new AdapterType_1.default({
            name: 'BedAdapter',
            configSchema: BedAdapter_1.configSchema,
            getAdapterClass: () => Promise.resolve().then(() => __importStar(require('./BedAdapter/BedAdapter'))).then(r => r.default),
        }));
        pluginManager.addToExtensionPoint('Core-guessAdapterForLocation', (adapterGuesser) => {
            return (file, index, adapterHint) => {
                const regexGuess = /\.bed\.b?gz$/i;
                const adapterName = 'BedTabixAdapter';
                const fileName = (0, tracks_1.getFileName)(file);
                const indexName = index && (0, tracks_1.getFileName)(index);
                if (regexGuess.test(fileName) || adapterHint === adapterName) {
                    return {
                        type: adapterName,
                        bedGzLocation: file,
                        index: {
                            location: index || (0, tracks_1.makeIndex)(file, '.tbi'),
                            indexType: (0, tracks_1.makeIndexType)(indexName, 'CSI', 'TBI'),
                        },
                    };
                }
                return adapterGuesser(file, index, adapterHint);
            };
        });
        pluginManager.addToExtensionPoint('Core-guessAdapterForLocation', (adapterGuesser) => {
            return (file, index, adapterHint) => {
                const regexGuess = /\.bed$/i;
                const adapterName = 'BedAdapter';
                const fileName = (0, tracks_1.getFileName)(file);
                if (regexGuess.test(fileName) || adapterHint === adapterName) {
                    return {
                        type: adapterName,
                        bedLocation: file,
                    };
                }
                return adapterGuesser(file, index, adapterHint);
            };
        });
    }
}
exports.default = BedPlugin;
//# sourceMappingURL=index.js.map
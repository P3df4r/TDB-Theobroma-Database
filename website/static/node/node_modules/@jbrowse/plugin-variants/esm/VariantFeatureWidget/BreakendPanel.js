/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useState } from 'react';
import { Link, Typography } from '@mui/material';
import SimpleFeature from '@jbrowse/core/util/simpleFeature';
import { getEnv, getSession } from '@jbrowse/core/util';
import { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail';
import BreakendOptionDialog from './BreakendOptionDialog';
export default function BreakendPanel(props) {
    const { model, locStrings, feature } = props;
    const session = getSession(model);
    const { pluginManager } = getEnv(session);
    const [breakpointDialog, setBreakpointDialog] = useState(false);
    let viewType;
    try {
        viewType = pluginManager.getViewType('BreakpointSplitView');
    }
    catch (e) {
        // ignore
    }
    const simpleFeature = new SimpleFeature(feature);
    return (React.createElement(BaseCard, { ...props, title: "Breakends" },
        React.createElement(Typography, null, "Link to linear view of breakend endpoints"),
        React.createElement("ul", null, locStrings.map(locString => (React.createElement("li", { key: `${JSON.stringify(locString)}` },
            React.createElement(Link, { href: "#", onClick: event => {
                    var _a;
                    event.preventDefault();
                    const { view } = model;
                    try {
                        if (view) {
                            (_a = view.navToLocString) === null || _a === void 0 ? void 0 : _a.call(view, locString);
                        }
                        else {
                            throw new Error('No view associated with this feature detail panel anymore');
                        }
                    }
                    catch (e) {
                        console.error(e);
                        session.notify(`${e}`);
                    }
                } }, `LGV - ${locString}`))))),
        viewType ? (React.createElement("div", null,
            React.createElement(Typography, null, "Launch split views with breakend source and target"),
            React.createElement("ul", null, locStrings.map(locString => (React.createElement("li", { key: `${JSON.stringify(locString)}` },
                React.createElement(Link, { href: "#", onClick: event => {
                        event.preventDefault();
                        setBreakpointDialog(true);
                    } }, `${feature.refName}:${feature.start} // ${locString} (split view)`))))),
            breakpointDialog ? (React.createElement(BreakendOptionDialog, { model: model, feature: simpleFeature, viewType: viewType, handleClose: () => {
                    setBreakpointDialog(false);
                } })) : null)) : null));
}
//# sourceMappingURL=BreakendPanel.js.map
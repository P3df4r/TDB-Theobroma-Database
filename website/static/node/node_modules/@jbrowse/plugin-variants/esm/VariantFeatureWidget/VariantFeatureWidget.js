/* eslint-disable @typescript-eslint/no-explicit-any */
import React from 'react';
import { observer } from 'mobx-react';
import { Divider, Paper } from '@mui/material';
import { FeatureDetails } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail';
import { parseBreakend } from '@gmod/vcf';
// locals
import VariantSampleGrid from './VariantSampleGrid';
import VariantCsqPanel from './VariantCsqPanel';
import VariantAnnPanel from './VariantAnnPanel';
import BreakendPanel from './BreakendPanel';
function VariantFeatureDetails(props) {
    const { model } = props;
    const { featureData, descriptions } = model;
    const feat = JSON.parse(JSON.stringify(featureData));
    const { samples, ...rest } = feat;
    const basicDescriptions = {
        CHROM: 'chromosome: An identifier from the reference genome',
        POS: 'position: The reference position, with the 1st base having position 1',
        ID: 'identifier: Semi-colon separated list of unique identifiers where available',
        REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',
        ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',
        QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',
        FILTER: 'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',
    };
    return (React.createElement(Paper, { "data-testid": "variant-side-drawer" },
        React.createElement(FeatureDetails, { feature: rest, descriptions: { ...basicDescriptions, ...descriptions }, ...props }),
        React.createElement(Divider, null),
        React.createElement(VariantCsqPanel, { feature: rest, descriptions: descriptions }),
        React.createElement(Divider, null),
        React.createElement(VariantAnnPanel, { feature: rest, descriptions: descriptions }),
        React.createElement(Divider, null),
        feat.type === 'breakend' ? (React.createElement(BreakendPanel, { feature: feat, locStrings: feat.ALT.map((alt) => { var _a; return ((_a = parseBreakend(alt)) === null || _a === void 0 ? void 0 : _a.MatePosition) || ''; }), model: model })) : null,
        feat.type === 'translocation' ? (React.createElement(BreakendPanel, { feature: feat, model: model, locStrings: [`${feat.INFO.CHR2[0]}:${feat.INFO.END}`] })) : null,
        React.createElement(VariantSampleGrid, { feature: feat, ...props, descriptions: descriptions })));
}
export default observer(VariantFeatureDetails);
//# sourceMappingURL=VariantFeatureWidget.js.map
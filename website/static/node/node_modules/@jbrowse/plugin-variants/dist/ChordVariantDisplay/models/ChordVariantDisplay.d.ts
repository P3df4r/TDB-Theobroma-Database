/// <reference types="react" />
import PluginManager from '@jbrowse/core/PluginManager';
/**
 * #stateModel ChordVariantDisplay
 * extends `BaseChordDisplay`
 */
declare const ChordVariantDisplayF: (pluginManager: PluginManager) => {
    stateModel: import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").ISimpleType<string>;
        rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
    } & {
        bezierRadiusRatio: import("mobx-state-tree").IType<number | undefined, number, number>;
        assemblyName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
    } & {
        /**
         * #property
         */
        type: import("mobx-state-tree").ISimpleType<"ChordVariantDisplay">;
        /**
         * #property
         */
        configuration: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        rendererTypeName: string;
        error: unknown;
    } & {
        readonly RenderingComponent: import("react").FC<{
            model: {
                id: string; /**
                 * #property
                 */
                type: string;
                rpcDriverName: string | undefined;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                rendererTypeName: string;
                error: unknown;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").ISimpleType<string>;
                rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            }, {
                rendererTypeName: string;
                error: unknown;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
            onHorizontalScroll?: Function | undefined;
            blockState?: Record<string, any> | undefined;
        }>;
        readonly DisplayBlurb: import("react").FC<{
            model: {
                id: string;
                type: string;
                rpcDriverName: string | undefined;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                rendererTypeName: string;
                error: unknown;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
                type: import("mobx-state-tree").ISimpleType<string>;
                rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
            }, {
                rendererTypeName: string;
                error: unknown;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }> | null;
        readonly adapterConfig: any;
        readonly parentTrack: any;
        renderProps(): any;
        readonly rendererType: import("@jbrowse/core/pluggableElementTypes").RendererType;
        readonly DisplayMessageComponent: import("react").FC<any> | undefined;
        trackMenuItems(): import("@jbrowse/core/ui").MenuItem[];
        readonly viewMenuActions: import("@jbrowse/core/ui").MenuItem[];
        regionCannotBeRendered(): undefined;
    } & {
        setError(error?: unknown): void;
        setRpcDriverName(rpcDriverName: string): void;
        reload(): void;
    } & {
        filled: boolean;
        reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
        data: undefined;
        message: string;
        renderingComponent: import("@jbrowse/core/util").AnyReactComponentType | undefined;
        refNameMap: Record<string, string> | undefined;
    } & {
        onChordClick(feature: import("@jbrowse/core/util").Feature): void;
    } & {
        readonly blockDefinitions: any;
        renderProps(): any;
        readonly rendererType: import("@jbrowse/core/pluggableElementTypes").RendererType;
        isCompatibleWithRenderer(renderer: import("@jbrowse/core/pluggableElementTypes").RendererType): boolean;
        readonly selectedFeatureId: string | undefined;
    } & {
        renderStarted(): void;
        renderSuccess({ message, data, reactElement, renderingComponent, }: {
            message: string;
            data: any;
            reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
            renderingComponent: import("@jbrowse/core/util").AnyReactComponentType;
        }): void;
        renderError(error: unknown): void;
        setRefNameMap(refNameMap: Record<string, string>): void;
    } & {
        afterAttach(): void;
    } & {
        /**
         * #getter
         */
        readonly rendererTypeName: any;
        /**
         * #method
         */
        renderProps(): Record<string, unknown>;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
    configSchema: import("@jbrowse/core/configuration").AnyConfigurationSchemaType;
};
export default ChordVariantDisplayF;

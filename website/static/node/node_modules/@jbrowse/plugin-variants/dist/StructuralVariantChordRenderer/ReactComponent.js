"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const util_1 = require("@jbrowse/core/util");
const configuration_1 = require("@jbrowse/core/configuration");
const vcf_1 = require("@gmod/vcf");
function bpToRadians(block, pos) {
    const blockStart = block.region.elided ? 0 : block.region.start;
    const blockEnd = block.region.elided ? 0 : block.region.end;
    const bpOffset = block.flipped ? blockEnd - pos : pos - blockStart;
    return bpOffset / block.bpPerRadian + block.startRadians;
}
const Chord = (0, mobx_react_1.observer)(function Chord({ feature, blocksForRefs, radius, config, bezierRadius, selected, onClick, }) {
    var _a, _b, _c, _d, _e;
    // find the blocks that our start and end points belong to
    const startBlock = blocksForRefs[feature.get('refName')];
    if (!startBlock) {
        return null;
    }
    let svType;
    if (feature.get('INFO')) {
        ;
        [svType] = feature.get('INFO').SVTYPE || [];
    }
    else if (feature.get('mate')) {
        svType = 'mate';
    }
    let endPosition;
    let endBlock;
    const alt = (_a = feature.get('ALT')) === null || _a === void 0 ? void 0 : _a[0];
    const bnd = alt && (0, vcf_1.parseBreakend)(alt);
    if (bnd) {
        // VCF BND
        const matePosition = bnd.MatePosition.split(':');
        endPosition = +matePosition[1];
        endBlock = blocksForRefs[matePosition[0]];
    }
    else if (alt === '<TRA>') {
        // VCF TRA
        const chr2 = (_c = (_b = feature.get('INFO')) === null || _b === void 0 ? void 0 : _b.CHR2) === null || _c === void 0 ? void 0 : _c[0];
        const end = (_e = (_d = feature.get('INFO')) === null || _d === void 0 ? void 0 : _d.END) === null || _e === void 0 ? void 0 : _e[0];
        endPosition = parseInt(end, 10);
        endBlock = blocksForRefs[chr2];
    }
    else if (svType === 'mate') {
        // generic simplefeatures arcs
        const mate = feature.get('mate');
        const chr2 = mate.refName;
        endPosition = mate.start;
        endBlock = blocksForRefs[chr2];
    }
    if (endBlock) {
        const startPos = feature.get('start');
        const startRadians = bpToRadians(startBlock, startPos);
        const endRadians = bpToRadians(endBlock, endPosition);
        const startXY = (0, util_1.polarToCartesian)(radius, startRadians);
        const endXY = (0, util_1.polarToCartesian)(radius, endRadians);
        const controlXY = (0, util_1.polarToCartesian)(bezierRadius, (endRadians + startRadians) / 2);
        const strokeColor = selected
            ? (0, configuration_1.readConfObject)(config, 'strokeColorSelected', { feature })
            : (0, configuration_1.readConfObject)(config, 'strokeColor', { feature });
        const hoverStrokeColor = (0, configuration_1.readConfObject)(config, 'strokeColorHover', {
            feature,
        });
        return (react_1.default.createElement("path", { "data-testid": `chord-${feature.id()}`, d: ['M', ...startXY, 'Q', ...controlXY, ...endXY].join(' '), style: { stroke: strokeColor }, onClick: evt => {
                if (endBlock && startBlock) {
                    onClick(feature, startBlock.region, endBlock.region, evt);
                }
            }, onMouseOver: evt => {
                if (!selected) {
                    // @ts-ignore
                    evt.target.style.stroke = hoverStrokeColor;
                    // @ts-ignore
                    evt.target.style.strokeWidth = 3;
                }
            }, onMouseOut: evt => {
                if (!selected) {
                    // @ts-ignore
                    evt.target.style.stroke = strokeColor;
                    // @ts-ignore
                    evt.target.style.strokeWidth = 1;
                }
            } }));
    }
    return null;
});
function StructuralVariantChords(props) {
    const { features, config, displayModel, blockDefinitions, radius, bezierRadius, displayModel: { selectedFeatureId }, onChordClick, } = props;
    // make a map of refName -> blockDefinition
    const blocksForRefsMemo = (0, react_1.useMemo)(() => {
        const blocksForRefs = {};
        blockDefinitions.forEach(block => {
            const regions = block.region.elided
                ? block.region.regions
                : [block.region];
            regions.forEach(region => {
                blocksForRefs[region.refName] = block;
            });
        });
        return blocksForRefs;
    }, [blockDefinitions]);
    // console.log(blocksForRefs)
    const chords = [];
    for (const [id, feature] of features) {
        const selected = String(selectedFeatureId) === String(feature.id());
        chords.push(react_1.default.createElement(Chord, { key: id, feature: feature, config: config, radius: radius, bezierRadius: bezierRadius, blocksForRefs: blocksForRefsMemo, selected: selected, onClick: onChordClick }));
    }
    const trackStyleId = `chords-${displayModel.id}`;
    return (react_1.default.createElement("g", { id: trackStyleId, "data-testid": "structuralVariantChordRenderer" },
        react_1.default.createElement("style", { 
            // eslint-disable-next-line react/no-danger
            dangerouslySetInnerHTML: {
                __html: `
          #${trackStyleId} > path {
            cursor: crosshair;
            fill: none;
          }
`,
            } }),
        chords));
}
exports.default = (0, mobx_react_1.observer)(StructuralVariantChords);
//# sourceMappingURL=ReactComponent.js.map
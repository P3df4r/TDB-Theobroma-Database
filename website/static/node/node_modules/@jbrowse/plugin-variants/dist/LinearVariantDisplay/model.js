"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = require("@jbrowse/core/configuration");
const tracks_1 = require("@jbrowse/core/util/tracks");
const util_1 = require("@jbrowse/core/util");
const plugin_linear_genome_view_1 = require("@jbrowse/plugin-linear-genome-view");
const mobx_state_tree_1 = require("mobx-state-tree");
/**
 * #stateModel LinearVariantDisplay
 * extends `LinearBasicDisplay`
 * very similar to basic display, but provides custom widget on feature click
 */
function stateModelFactory(configSchema) {
    return mobx_state_tree_1.types
        .compose('LinearVariantDisplay', (0, plugin_linear_genome_view_1.linearBasicDisplayModelFactory)(configSchema), mobx_state_tree_1.types.model({
        /**
         * #property
         */
        type: mobx_state_tree_1.types.literal('LinearVariantDisplay'),
        /**
         * #property
         */
        configuration: (0, configuration_1.ConfigurationReference)(configSchema),
    }))
        .actions(self => ({
        /**
         * #action
         */
        async selectFeature(feature) {
            const session = (0, util_1.getSession)(self);
            if ((0, util_1.isSessionModelWithWidgets)(session)) {
                const { rpcManager } = session;
                const sessionId = (0, tracks_1.getRpcSessionId)(self);
                const track = (0, util_1.getContainingTrack)(self);
                const view = (0, util_1.getContainingView)(self);
                const adapterConfig = (0, configuration_1.getConf)(track, 'adapter');
                const descriptions = await rpcManager.call(sessionId, 'CoreGetMetadata', {
                    adapterConfig,
                });
                session.showWidget(session.addWidget('VariantFeatureWidget', 'variantFeature', {
                    featureData: feature.toJSON(),
                    view,
                    track,
                    descriptions,
                }));
            }
            session.setSelection(feature);
        },
    }));
}
exports.default = stateModelFactory;
//# sourceMappingURL=model.js.map
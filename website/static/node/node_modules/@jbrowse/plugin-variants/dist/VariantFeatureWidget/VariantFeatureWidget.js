"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
const react_1 = __importDefault(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
const BaseFeatureDetail_1 = require("@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail");
const vcf_1 = require("@gmod/vcf");
// locals
const VariantSampleGrid_1 = __importDefault(require("./VariantSampleGrid"));
const VariantCsqPanel_1 = __importDefault(require("./VariantCsqPanel"));
const VariantAnnPanel_1 = __importDefault(require("./VariantAnnPanel"));
const BreakendPanel_1 = __importDefault(require("./BreakendPanel"));
function VariantFeatureDetails(props) {
    const { model } = props;
    const { featureData, descriptions } = model;
    const feat = JSON.parse(JSON.stringify(featureData));
    const { samples, ...rest } = feat;
    const basicDescriptions = {
        CHROM: 'chromosome: An identifier from the reference genome',
        POS: 'position: The reference position, with the 1st base having position 1',
        ID: 'identifier: Semi-colon separated list of unique identifiers where available',
        REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',
        ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',
        QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',
        FILTER: 'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',
    };
    return (react_1.default.createElement(material_1.Paper, { "data-testid": "variant-side-drawer" },
        react_1.default.createElement(BaseFeatureDetail_1.FeatureDetails, { feature: rest, descriptions: { ...basicDescriptions, ...descriptions }, ...props }),
        react_1.default.createElement(material_1.Divider, null),
        react_1.default.createElement(VariantCsqPanel_1.default, { feature: rest, descriptions: descriptions }),
        react_1.default.createElement(material_1.Divider, null),
        react_1.default.createElement(VariantAnnPanel_1.default, { feature: rest, descriptions: descriptions }),
        react_1.default.createElement(material_1.Divider, null),
        feat.type === 'breakend' ? (react_1.default.createElement(BreakendPanel_1.default, { feature: feat, locStrings: feat.ALT.map((alt) => { var _a; return ((_a = (0, vcf_1.parseBreakend)(alt)) === null || _a === void 0 ? void 0 : _a.MatePosition) || ''; }), model: model })) : null,
        feat.type === 'translocation' ? (react_1.default.createElement(BreakendPanel_1.default, { feature: feat, model: model, locStrings: [`${feat.INFO.CHR2[0]}:${feat.INFO.END}`] })) : null,
        react_1.default.createElement(VariantSampleGrid_1.default, { feature: feat, ...props, descriptions: descriptions })));
}
exports.default = (0, mobx_react_1.observer)(VariantFeatureDetails);
//# sourceMappingURL=VariantFeatureWidget.js.map
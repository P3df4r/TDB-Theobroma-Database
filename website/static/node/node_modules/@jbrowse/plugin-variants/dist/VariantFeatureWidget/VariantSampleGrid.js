"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const x_data_grid_1 = require("@mui/x-data-grid");
const BaseFeatureDetail_1 = require("@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail");
function VariantSamples(props) {
    const { feature, descriptions } = props;
    const [filter, setFilter] = (0, react_1.useState)({});
    const [showFilters, setShowFilters] = (0, react_1.useState)(false);
    const { samples = {} } = feature;
    const preFilteredRows = Object.entries(samples);
    if (!preFilteredRows.length) {
        return null;
    }
    const infoFields = ['sample', ...Object.keys(preFilteredRows[0][1])].map(field => {
        var _a, _b;
        return ({
            field,
            description: (_b = (_a = descriptions.FORMAT) === null || _a === void 0 ? void 0 : _a[field]) === null || _b === void 0 ? void 0 : _b.Description,
        });
    });
    let error;
    let rows = [];
    const filters = Object.keys(filter);
    // catch some error thrown from regex
    // note: maps all values into a string, if this is not done rows are not
    // sortable by the data-grid
    try {
        rows = preFilteredRows
            .map(row => ({
            ...Object.fromEntries(Object.entries(row[1]).map(entry => [entry[0], String(entry[1])])),
            sample: row[0],
            id: row[0],
        }))
            .filter(row => filters.length
            ? filters.every(key => {
                const val = row[key];
                const currFilter = filter[key];
                return currFilter ? val.match(new RegExp(currFilter, 'i')) : true;
            })
            : true);
    }
    catch (e) {
        error = e;
    }
    // disableSelectionOnClick helps avoid
    // https://github.com/mui-org/material-ui-x/issues/1197
    return (react_1.default.createElement(BaseFeatureDetail_1.BaseCard, { ...props, title: "Samples" },
        error ? react_1.default.createElement(material_1.Typography, { color: "error" }, `${error}`) : null,
        react_1.default.createElement(material_1.FormControlLabel, { control: react_1.default.createElement(material_1.Checkbox, { checked: showFilters, onChange: () => setShowFilters(f => !f) }), label: "Show sample filters" }),
        showFilters ? (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(material_1.Typography, null, "These filters can use a plain text search or regex style query, e.g. in the genotype field, entering 1 will query for all genotypes that include the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\d* will find any non-zero allele e.g. 0|2 or 2/33"),
            infoFields.map(({ field }) => (react_1.default.createElement(material_1.TextField, { key: `filter-${field}`, placeholder: `Filter ${field}`, value: filter[field] || '', onChange: event => setFilter({ ...filter, [field]: event.target.value }) }))))) : null,
        react_1.default.createElement("div", { style: { height: 600, width: '100%', overflow: 'auto' } },
            react_1.default.createElement(x_data_grid_1.DataGrid, { rows: rows, columns: infoFields, disableSelectionOnClick: true, rowHeight: 25, disableColumnMenu: true }))));
}
exports.default = VariantSamples;
//# sourceMappingURL=VariantSampleGrid.js.map
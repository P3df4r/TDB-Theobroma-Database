"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const simpleFeature_1 = __importDefault(require("@jbrowse/core/util/simpleFeature"));
const util_1 = require("@jbrowse/core/util");
const BaseFeatureDetail_1 = require("@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail");
const BreakendOptionDialog_1 = __importDefault(require("./BreakendOptionDialog"));
function BreakendPanel(props) {
    const { model, locStrings, feature } = props;
    const session = (0, util_1.getSession)(model);
    const { pluginManager } = (0, util_1.getEnv)(session);
    const [breakpointDialog, setBreakpointDialog] = (0, react_1.useState)(false);
    let viewType;
    try {
        viewType = pluginManager.getViewType('BreakpointSplitView');
    }
    catch (e) {
        // ignore
    }
    const simpleFeature = new simpleFeature_1.default(feature);
    return (react_1.default.createElement(BaseFeatureDetail_1.BaseCard, { ...props, title: "Breakends" },
        react_1.default.createElement(material_1.Typography, null, "Link to linear view of breakend endpoints"),
        react_1.default.createElement("ul", null, locStrings.map(locString => (react_1.default.createElement("li", { key: `${JSON.stringify(locString)}` },
            react_1.default.createElement(material_1.Link, { href: "#", onClick: event => {
                    var _a;
                    event.preventDefault();
                    const { view } = model;
                    try {
                        if (view) {
                            (_a = view.navToLocString) === null || _a === void 0 ? void 0 : _a.call(view, locString);
                        }
                        else {
                            throw new Error('No view associated with this feature detail panel anymore');
                        }
                    }
                    catch (e) {
                        console.error(e);
                        session.notify(`${e}`);
                    }
                } }, `LGV - ${locString}`))))),
        viewType ? (react_1.default.createElement("div", null,
            react_1.default.createElement(material_1.Typography, null, "Launch split views with breakend source and target"),
            react_1.default.createElement("ul", null, locStrings.map(locString => (react_1.default.createElement("li", { key: `${JSON.stringify(locString)}` },
                react_1.default.createElement(material_1.Link, { href: "#", onClick: event => {
                        event.preventDefault();
                        setBreakpointDialog(true);
                    } }, `${feature.refName}:${feature.start} // ${locString} (split view)`))))),
            breakpointDialog ? (react_1.default.createElement(BreakendOptionDialog_1.default, { model: model, feature: simpleFeature, viewType: viewType, handleClose: () => {
                    setBreakpointDialog(false);
                } })) : null)) : null));
}
exports.default = BreakendPanel;
//# sourceMappingURL=BreakendPanel.js.map
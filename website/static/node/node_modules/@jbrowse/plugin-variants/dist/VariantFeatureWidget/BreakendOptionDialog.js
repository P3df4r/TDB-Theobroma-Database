"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const mobx_state_tree_1 = require("mobx-state-tree");
const util_1 = require("@jbrowse/core/util");
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    block: {
        display: 'block',
    },
}));
function BreakendOptionDialog({ model, handleClose, feature, viewType, }) {
    const { classes } = useStyles();
    const [copyTracks, setCopyTracks] = (0, react_1.useState)(true);
    const [mirrorTracks, setMirrorTracks] = (0, react_1.useState)(true);
    return (react_1.default.createElement(material_1.Dialog, { open: true, onClose: handleClose },
        react_1.default.createElement(material_1.DialogTitle, null,
            "Breakpoint split view options",
            handleClose ? (react_1.default.createElement(material_1.IconButton, { className: classes.closeButton, onClick: () => handleClose() },
                react_1.default.createElement(Close_1.default, null))) : null),
        react_1.default.createElement(material_1.Divider, null),
        react_1.default.createElement(material_1.DialogContent, null,
            react_1.default.createElement(material_1.FormControlLabel, { className: classes.block, control: react_1.default.createElement(material_1.Checkbox, { checked: copyTracks, onChange: () => setCopyTracks(val => !val) }), label: "Copy tracks into the new view" }),
            react_1.default.createElement(material_1.FormControlLabel, { className: classes.block, control: react_1.default.createElement(material_1.Checkbox, { checked: mirrorTracks, onChange: () => setMirrorTracks(val => !val) }), label: "Mirror tracks vertically in vertically stacked view" })),
        react_1.default.createElement(material_1.DialogActions, null,
            react_1.default.createElement(material_1.Button, { onClick: () => {
                    const { view } = model;
                    const session = (0, util_1.getSession)(model);
                    try {
                        const viewSnapshot = viewType.snapshotFromBreakendFeature(feature, view);
                        viewSnapshot.views[0].offsetPx -= view.width / 2 + 100;
                        viewSnapshot.views[1].offsetPx -= view.width / 2 + 100;
                        viewSnapshot.featureData = feature;
                        const viewTracks = (0, mobx_state_tree_1.getSnapshot)(view.tracks);
                        viewSnapshot.views[0].tracks = viewTracks;
                        viewSnapshot.views[1].tracks = mirrorTracks
                            ? viewTracks.slice().reverse()
                            : viewTracks;
                        session.addView('BreakpointSplitView', viewSnapshot);
                    }
                    catch (e) {
                        console.error(e);
                        session.notify(`${e}`);
                    }
                    handleClose();
                }, variant: "contained", color: "primary", autoFocus: true }, "OK"),
            react_1.default.createElement(material_1.Button, { onClick: () => handleClose(), color: "secondary", variant: "contained" }, "Cancel"))));
}
exports.default = (0, mobx_react_1.observer)(BreakendOptionDialog);
//# sourceMappingURL=BreakendOptionDialog.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const simpleFeature_1 = __importDefault(require("@jbrowse/core/util/simpleFeature"));
const rxjs_1 = require("@jbrowse/core/util/rxjs");
const operators_1 = require("rxjs/operators");
const FromConfigAdapter_1 = __importDefault(require("./FromConfigAdapter"));
class FromConfigSequenceAdapter extends FromConfigAdapter_1.default {
    /**
     * Fetch features for a certain region
     * @param region - Region
     * @returns Observable of Feature objects in the region
     */
    getFeatures(region) {
        return (0, rxjs_1.ObservableCreate)(async (observer) => {
            const feats = await super.getFeatures(region).pipe((0, operators_1.toArray)()).toPromise();
            const feat = feats[0];
            observer.next(new simpleFeature_1.default({
                ...feat.toJSON(),
                uniqueId: `${feat.id()}:${region.start}-${region.end}`,
                end: region.end,
                start: region.start,
                seq: feat
                    .get('seq')
                    .slice(Math.max(region.start - feat.get('start'), 0), Math.max(region.end - feat.get('start'), 0)),
            }));
            observer.complete();
        });
    }
    /**
     * Get refName, start, and end for all features after collapsing any overlaps
     */
    async getRegions() {
        const regions = [];
        // recall: features are stored in this object sorted by start coordinate
        for (const [refName, features] of this.features) {
            let currentRegion;
            for (const feature of features) {
                if (currentRegion &&
                    currentRegion.end >= feature.get('start') &&
                    currentRegion.start <= feature.get('end')) {
                    currentRegion.end = feature.get('end');
                }
                else {
                    if (currentRegion) {
                        regions.push(currentRegion);
                    }
                    currentRegion = {
                        refName,
                        start: feature.get('start'),
                        end: feature.get('end'),
                    };
                }
            }
            if (currentRegion) {
                regions.push(currentRegion);
            }
        }
        return regions;
    }
    /**
     * called to provide a hint that data tied to a certain region
     * will not be needed for the forseeable future and can be purged
     * from caches, etc
     */
    freeResources( /* { region } */) { }
}
exports.default = FromConfigSequenceAdapter;
//# sourceMappingURL=FromConfigSequenceAdapter.js.map
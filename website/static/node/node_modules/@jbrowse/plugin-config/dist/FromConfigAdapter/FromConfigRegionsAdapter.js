"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseAdapter_1 = require("@jbrowse/core/data_adapters/BaseAdapter");
const configuration_1 = require("@jbrowse/core/configuration");
const FromConfigAdapter_1 = __importDefault(require("./FromConfigAdapter"));
/**
 * Adapter that just returns the features defined in its `features` configuration
 * key, like:
 *   `"features": [ { "refName": "ctgA", "start":1, "end":20 }, ... ]`
 */
class FromConfigRegionsAdapter extends BaseAdapter_1.BaseAdapter {
    constructor(config, getSubAdapter, pluginManager) {
        super(config, getSubAdapter, pluginManager);
        const features = (0, configuration_1.readConfObject)(config, 'features');
        this.features = FromConfigAdapter_1.default.makeFeatures(features || []);
    }
    /**
     * Get refName, start, and end for all features after collapsing any overlaps
     */
    async getRegions() {
        const regions = [];
        // recall: features are stored in this object sorted by start coordinate
        for (const [refName, features] of this.features) {
            let currentRegion;
            for (const feature of features) {
                if (currentRegion &&
                    currentRegion.end >= feature.get('start') &&
                    currentRegion.start <= feature.get('end')) {
                    currentRegion.end = feature.get('end');
                }
                else {
                    if (currentRegion) {
                        regions.push(currentRegion);
                    }
                    currentRegion = {
                        refName,
                        start: feature.get('start'),
                        end: feature.get('end'),
                    };
                }
            }
            if (currentRegion) {
                regions.push(currentRegion);
            }
        }
        // sort the regions by refName
        regions.sort((a, b) => a.refName.localeCompare(b.refName));
        return regions;
    }
    freeResources( /* { region } */) { }
}
exports.default = FromConfigRegionsAdapter;
//# sourceMappingURL=FromConfigRegionsAdapter.js.map
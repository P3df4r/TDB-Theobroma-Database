"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationEditor = exports.JsonEditor = void 0;
const react_1 = require("react");
const AdapterType_1 = __importDefault(require("@jbrowse/core/pluggableElementTypes/AdapterType"));
const WidgetType_1 = __importDefault(require("@jbrowse/core/pluggableElementTypes/WidgetType"));
const Plugin_1 = __importDefault(require("@jbrowse/core/Plugin"));
const ConfigurationEditorWidget_1 = require("./ConfigurationEditorWidget");
const FromConfigAdapter_1 = require("./FromConfigAdapter");
const RefNameAliasAdapter_1 = require("./RefNameAliasAdapter");
const LazyConfigurationEditorComponent = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./ConfigurationEditorWidget/components/ConfigurationEditor'))));
exports.ConfigurationEditor = LazyConfigurationEditorComponent;
class default_1 extends Plugin_1.default {
    constructor() {
        super(...arguments);
        this.name = 'ConfigurationPlugin';
    }
    install(pluginManager) {
        pluginManager.addAdapterType(() => new AdapterType_1.default({
            name: 'FromConfigAdapter',
            configSchema: FromConfigAdapter_1.configSchema,
            getAdapterClass: () => Promise.resolve().then(() => __importStar(require('./FromConfigAdapter/FromConfigAdapter'))).then(r => r.default),
            adapterMetadata: {
                category: null,
                hiddenFromGUI: true,
                displayName: null,
                description: null,
            },
        }));
        pluginManager.addAdapterType(() => new AdapterType_1.default({
            name: 'FromConfigRegionsAdapter',
            configSchema: FromConfigAdapter_1.regionsConfigSchema,
            getAdapterClass: () => Promise.resolve().then(() => __importStar(require('./FromConfigAdapter/FromConfigRegionsAdapter'))).then(r => r.default),
            adapterMetadata: {
                category: null,
                hiddenFromGUI: true,
                displayName: null,
                description: null,
            },
        }));
        pluginManager.addAdapterType(() => new AdapterType_1.default({
            name: 'FromConfigSequenceAdapter',
            configSchema: FromConfigAdapter_1.sequenceConfigSchema,
            getAdapterClass: () => Promise.resolve().then(() => __importStar(require('./FromConfigAdapter/FromConfigSequenceAdapter'))).then(r => r.default),
            adapterMetadata: {
                category: null,
                hiddenFromGUI: true,
                displayName: null,
                description: null,
            },
        }));
        pluginManager.addAdapterType(() => new AdapterType_1.default({
            name: 'RefNameAliasAdapter',
            configSchema: RefNameAliasAdapter_1.configSchema,
            getAdapterClass: () => Promise.resolve().then(() => __importStar(require('./RefNameAliasAdapter/RefNameAliasAdapter'))).then(r => r.default),
            adapterMetadata: {
                category: null,
                hiddenFromGUI: true,
                displayName: null,
                description: null,
            },
        }));
        pluginManager.addWidgetType(() => {
            return new WidgetType_1.default({
                name: 'ConfigurationEditorWidget',
                HeadingComponent: ConfigurationEditorWidget_1.HeadingComponent,
                configSchema: ConfigurationEditorWidget_1.configSchema,
                stateModel: (0, ConfigurationEditorWidget_1.stateModelFactory)(pluginManager),
                ReactComponent: LazyConfigurationEditorComponent,
            });
        });
    }
}
exports.default = default_1;
var JsonEditor_1 = require("./ConfigurationEditorWidget/components/JsonEditor");
Object.defineProperty(exports, "JsonEditor", { enumerable: true, get: function () { return __importDefault(JsonEditor_1).default; } });
//# sourceMappingURL=index.js.map
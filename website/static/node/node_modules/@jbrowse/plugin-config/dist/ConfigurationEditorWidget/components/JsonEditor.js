"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
// fontSize and fontFamily have to match between Editor and SyntaxHighlighter
const fontSize = '12px';
// Optimize by using system default fonts: https://css-tricks.com/snippets/css/font-stacks/
const fontFamily = 'Consolas, "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", Monaco, "Courier New", Courier, monospace';
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    error: {
        color: 'red',
        fontSize: '0.8em',
    },
    callbackEditor: {
        fontFamily,
        fontSize,
        background: theme.palette.background.default,
        width: 800,
        marginTop: '16px',
        border: '1px solid rgba(0,0,0,0.42)',
    },
    callbackContainer: {
        width: '100%',
        overflowX: 'auto',
    },
    textAreaFont: {
        fontFamily,
    },
}));
function JsonEditor({ slot, }) {
    const { classes } = useStyles();
    const [contents, setContents] = (0, react_1.useState)(JSON.stringify(slot.value, null, 2));
    const [error, setError] = (0, react_1.useState)();
    (0, react_1.useEffect)(() => {
        try {
            setError(undefined);
            slot.set(JSON.parse(contents));
        }
        catch (e) {
            console.error({ e });
            setError(e);
        }
    }, [contents, slot]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        error ? react_1.default.createElement("p", { className: classes.error }, `${error}`) : null,
        react_1.default.createElement("div", { className: classes.callbackContainer },
            react_1.default.createElement(material_1.InputLabel, { shrink: true, htmlFor: "json-editor" }, slot.name),
            react_1.default.createElement(material_1.TextField, { id: "json-editor", className: classes.callbackEditor, value: contents, helperText: slot.description, multiline: true, onChange: event => setContents(event.target.value), style: { background: error ? '#fdd' : undefined }, InputProps: {
                    classes: {
                        input: classes.textAreaFont,
                    },
                } }))));
}
exports.default = (0, mobx_react_1.observer)(JsonEditor);
//# sourceMappingURL=JsonEditor.js.map
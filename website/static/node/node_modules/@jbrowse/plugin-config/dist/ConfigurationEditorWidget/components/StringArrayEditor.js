"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
// icons
const Delete_1 = __importDefault(require("@mui/icons-material/Delete"));
const StringArrayEditor = (0, mobx_react_1.observer)(({ slot, }) => {
    const [value, setValue] = (0, react_1.useState)('');
    const [addNew, setAddNew] = (0, react_1.useState)(false);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        slot.name ? react_1.default.createElement(material_1.InputLabel, null, slot.name) : null,
        react_1.default.createElement(material_1.List, { disablePadding: true },
            slot.value.map((val, idx) => (react_1.default.createElement(material_1.ListItem, { key: idx, disableGutters: true },
                react_1.default.createElement(material_1.TextField, { value: val, onChange: evt => slot.setAtIndex(idx, evt.target.value), InputProps: {
                        endAdornment: (react_1.default.createElement(material_1.InputAdornment, { position: "end" },
                            react_1.default.createElement(material_1.IconButton, { color: "secondary", onClick: () => slot.removeAtIndex(idx) },
                                react_1.default.createElement(Delete_1.default, null)))),
                    } })))),
            addNew ? (react_1.default.createElement(material_1.ListItem, { disableGutters: true },
                react_1.default.createElement(material_1.TextField, { value: value, placeholder: "add new", onChange: event => setValue(event.target.value), InputProps: {
                        endAdornment: (react_1.default.createElement(material_1.InputAdornment, { position: "end" },
                            react_1.default.createElement(react_1.default.Fragment, null,
                                react_1.default.createElement(material_1.Button, { color: "primary", variant: "contained", style: { margin: 2 }, "data-testid": `stringArrayAdd-${slot.name}`, onClick: () => {
                                        setAddNew(false);
                                        slot.add(value);
                                        setValue('');
                                    } }, "OK"),
                                react_1.default.createElement(material_1.Button, { color: "primary", variant: "contained", style: { margin: 2 }, onClick: () => {
                                        setAddNew(false);
                                        setValue('');
                                    } }, "Cancel")))),
                    } }))) : null,
            react_1.default.createElement(material_1.Button, { color: "primary", variant: "contained", style: { margin: 4 }, disabled: addNew, onClick: () => setAddNew(true) }, "Add item")),
        react_1.default.createElement(material_1.FormHelperText, null, slot.description)));
});
exports.default = StringArrayEditor;
//# sourceMappingURL=StringArrayEditor.js.map
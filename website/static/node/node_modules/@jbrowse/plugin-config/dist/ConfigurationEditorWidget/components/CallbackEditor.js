"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const util_1 = require("@jbrowse/core/util");
const jexlStrings_1 = require("@jbrowse/core/util/jexlStrings");
const mobx_state_tree_1 = require("mobx-state-tree");
const mobx_react_1 = require("mobx-react");
const mui_1 = require("tss-react/mui");
// icons
const Help_1 = __importDefault(require("@mui/icons-material/Help"));
// Optimize by using system default fonts:
// https://css-tricks.com/snippets/css/font-stacks/
const fontFamily = 'Consolas, "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", Monaco, "Courier New", Courier, monospace';
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    callbackEditor: {
        marginTop: '16px',
        borderBottom: `1px solid ${theme.palette.divider}`,
        width: '100%',
        fontFamily,
    },
    textAreaFont: {
        fontFamily,
    },
    callbackContainer: {
        width: '100%',
        overflowX: 'auto',
    },
    error: {
        color: 'red',
        fontSize: '0.8em',
    },
}));
function CallbackEditor({ slot, }) {
    const { classes } = useStyles();
    const [code, setCode] = (0, react_1.useState)(slot.value);
    const [error, setCodeError] = (0, react_1.useState)();
    const debouncedCode = (0, util_1.useDebounce)(code, 400);
    (0, react_1.useEffect)(() => {
        var _a;
        try {
            const jexlDebouncedCode = debouncedCode.startsWith('jexl:')
                ? debouncedCode
                : `jexl:${debouncedCode}`;
            if (jexlDebouncedCode === 'jexl:') {
                throw new Error('Empty jexl expression is not valid');
            }
            (0, jexlStrings_1.stringToJexlExpression)(jexlDebouncedCode, (_a = (0, mobx_state_tree_1.getEnv)(slot).pluginManager) === null || _a === void 0 ? void 0 : _a.jexl);
            slot.set(jexlDebouncedCode);
            setCodeError(undefined);
        }
        catch (e) {
            console.error({ e });
            setCodeError(e);
        }
    }, [debouncedCode, slot]);
    // if default value is a callback, will have to remove jexl:
    // do this last
    return (react_1.default.createElement(react_1.default.Fragment, null,
        error ? react_1.default.createElement("p", { className: classes.error }, `${error}`) : null,
        react_1.default.createElement("div", { className: classes.callbackContainer },
            react_1.default.createElement(material_1.TextField, { multiline: true, className: classes.callbackEditor, value: code.startsWith('jexl:') ? code.split('jexl:')[1] : code, onChange: event => setCode(event.target.value), style: { background: error ? '#fdd' : undefined }, InputProps: {
                    classes: {
                        input: classes.textAreaFont,
                    },
                } }),
            react_1.default.createElement("p", null, slot.description),
            react_1.default.createElement(material_1.Tooltip, { title: react_1.default.createElement("div", null,
                    "Callbacks are written in Jexl format. Click to learn more.",
                    react_1.default.createElement("br", null),
                    " Names of available context items: ",
                    slot.contextVariable), arrow: true },
                react_1.default.createElement(material_1.IconButton, { color: "primary", onClick: () => {
                        const newWindow = window.open('https://github.com/TomFrost/Jexl', '_blank', 'noopener,noreferrer');
                        if (newWindow) {
                            newWindow.opener = null;
                        }
                    } },
                    react_1.default.createElement(Help_1.default, null))))));
}
exports.default = (0, mobx_react_1.observer)(CallbackEditor);
//# sourceMappingURL=CallbackEditor.js.map
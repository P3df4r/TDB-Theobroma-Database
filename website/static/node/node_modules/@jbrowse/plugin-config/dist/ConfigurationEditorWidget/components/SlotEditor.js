"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSlotEditorStyles = void 0;
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const mobx_state_tree_1 = require("mobx-state-tree");
const util_1 = require("@jbrowse/core/util");
const ui_1 = require("@jbrowse/core/ui");
const mst_reflection_1 = require("@jbrowse/core/util/mst-reflection");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
// icons
const Delete_1 = __importDefault(require("@mui/icons-material/Delete"));
const Add_1 = __importDefault(require("@mui/icons-material/Add"));
const RadioButtonUnchecked_1 = __importDefault(require("@mui/icons-material/RadioButtonUnchecked"));
// locals
const StringArrayEditor_1 = __importDefault(require("./StringArrayEditor"));
const CallbackEditor_1 = __importDefault(require("./CallbackEditor"));
const ColorEditor_1 = __importDefault(require("./ColorEditor"));
const JsonEditor_1 = __importDefault(require("./JsonEditor"));
// adds ability to have html in helperText. note that FormHelperTextProps is
// div because the default is p which does not like div children
function MyTextField(props) {
    const { helperText } = props;
    return (react_1.default.createElement(material_1.TextField, { ...props, helperText: react_1.default.createElement(ui_1.SanitizedHTML, { html: helperText || '' }), FormHelperTextProps: {
            // @ts-ignore
            component: 'div',
        }, fullWidth: true }));
}
const StringEditor = (0, mobx_react_1.observer)(({ slot, }) => (react_1.default.createElement(MyTextField, { label: slot.name, helperText: slot.description, value: slot.value, onChange: evt => slot.set(evt.target.value) })));
const TextEditor = (0, mobx_react_1.observer)(({ slot, }) => (react_1.default.createElement(material_1.TextField, { label: slot.name, helperText: slot.description, multiline: true, value: slot.value, onChange: evt => slot.set(evt.target.value) })));
// checked checkbox, looks like a styled (x)
const SvgCheckbox = () => (react_1.default.createElement(material_1.SvgIcon, null,
    react_1.default.createElement("path", { d: "M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z" })));
const useMapEditorStyles = (0, mui_1.makeStyles)()(theme => ({
    card: {
        marginTop: theme.spacing(1),
    },
}));
const StringArrayMapEditor = (0, mobx_react_1.observer)(({ slot, }) => {
    const { classes } = useMapEditorStyles();
    const [value, setValue] = (0, react_1.useState)('');
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(material_1.InputLabel, null, slot.name),
        Array.from(slot.value, ([key, val]) => (react_1.default.createElement(material_1.Card, { raised: true, key: key, className: classes.card },
            react_1.default.createElement(material_1.CardHeader, { title: key, action: react_1.default.createElement(material_1.IconButton, { color: "secondary", onClick: () => slot.remove(key) },
                    react_1.default.createElement(Delete_1.default, null)) }),
            react_1.default.createElement(material_1.CardContent, null,
                react_1.default.createElement(StringArrayEditor_1.default, { slot: {
                        name: slot.name,
                        value: val,
                        description: `Values associated with entry ${key}`,
                        setAtIndex: (idx, val) => slot.setAtKeyIndex(key, idx, val),
                        removeAtIndex: (idx) => slot.removeAtKeyIndex(key, idx),
                        add: (val) => slot.addToKey(key, val),
                    } }))))),
        react_1.default.createElement(material_1.Card, { raised: true, className: classes.card },
            react_1.default.createElement(material_1.CardHeader, { disableTypography: true, title: react_1.default.createElement(material_1.TextField, { fullWidth: true, value: value, placeholder: "add new", onChange: event => setValue(event.target.value), InputProps: {
                        endAdornment: (react_1.default.createElement(material_1.InputAdornment, { position: "end" },
                            react_1.default.createElement(material_1.IconButton, { disabled: value === '', onClick: () => {
                                    slot.add(value, []);
                                    setValue('');
                                }, color: "secondary" },
                                react_1.default.createElement(Add_1.default, null)))),
                    } }) })),
        react_1.default.createElement(material_1.FormHelperText, null, slot.description)));
});
const NumberMapEditor = (0, mobx_react_1.observer)(({ slot, }) => {
    const { classes } = useMapEditorStyles();
    const [value, setValue] = (0, react_1.useState)('');
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(material_1.InputLabel, null, slot.name),
        Array.from(slot.value, ([key, val]) => (react_1.default.createElement(material_1.Card, { raised: true, key: key, className: classes.card },
            react_1.default.createElement(material_1.CardHeader, { title: key, action: react_1.default.createElement(material_1.IconButton, { color: "secondary", onClick: () => slot.remove(key) },
                    react_1.default.createElement(Delete_1.default, null)) }),
            react_1.default.createElement(material_1.CardContent, null,
                react_1.default.createElement(NumberEditor, { slot: {
                        value: val,
                        set: (val) => slot.add(key, val),
                    } }))))),
        react_1.default.createElement(material_1.Card, { raised: true, className: classes.card },
            react_1.default.createElement(material_1.CardHeader, { disableTypography: true, title: react_1.default.createElement(material_1.TextField, { fullWidth: true, value: value, placeholder: "add new", onChange: event => setValue(event.target.value), InputProps: {
                        endAdornment: (react_1.default.createElement(material_1.InputAdornment, { position: "end" },
                            react_1.default.createElement(material_1.IconButton, { disabled: value === '', onClick: () => {
                                    slot.add(value, 0);
                                    setValue('');
                                }, color: "secondary" },
                                react_1.default.createElement(Add_1.default, null)))),
                    } }) })),
        react_1.default.createElement(material_1.FormHelperText, null, slot.description)));
});
const NumberEditor = (0, mobx_react_1.observer)(({ slot, }) => {
    const [val, setVal] = (0, react_1.useState)(slot.value);
    (0, react_1.useEffect)(() => {
        var _a;
        const num = parseFloat(val);
        if (!Number.isNaN(num)) {
            slot.set(num);
        }
        else {
            (_a = slot.reset) === null || _a === void 0 ? void 0 : _a.call(slot);
        }
    }, [slot, val]);
    return (react_1.default.createElement(MyTextField, { label: slot.name, helperText: slot.description, value: val, type: "number", onChange: evt => setVal(evt.target.value) }));
});
const IntegerEditor = (0, mobx_react_1.observer)(({ slot, }) => {
    const [val, setVal] = (0, react_1.useState)(slot.value);
    (0, react_1.useEffect)(() => {
        const num = parseInt(val, 10);
        if (!Number.isNaN(num)) {
            slot.set(num);
        }
    }, [slot, val]);
    return (react_1.default.createElement(MyTextField, { label: slot.name, helperText: slot.description, value: val, type: "number", onChange: evt => setVal(evt.target.value) }));
});
const BooleanEditor = (0, mobx_react_1.observer)(({ slot, }) => (react_1.default.createElement(material_1.FormControl, null,
    react_1.default.createElement(material_1.FormControlLabel, { label: slot.name, control: react_1.default.createElement(material_1.Checkbox, { checked: slot.value, onChange: evt => slot.set(evt.target.checked) }) }),
    react_1.default.createElement(material_1.FormHelperText, null, slot.description))));
const StringEnumEditor = (0, mobx_react_1.observer)(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
({ slot, slotSchema }) => {
    const p = (0, mobx_state_tree_1.getPropertyMembers)((0, mst_reflection_1.getSubType)(slotSchema));
    const choices = (0, mst_reflection_1.getUnionSubTypes)((0, mst_reflection_1.getUnionSubTypes)((0, mst_reflection_1.getSubType)((0, mst_reflection_1.getPropertyType)(p, 'value')))[1]).map(t => t.value);
    return (react_1.default.createElement(MyTextField, { value: slot.value, label: slot.name, select: true, helperText: slot.description, onChange: evt => slot.set(evt.target.value) }, choices.map(str => (react_1.default.createElement(material_1.MenuItem, { key: str, value: str }, str)))));
});
const FileSelectorWrapper = (0, mobx_react_1.observer)(({ slot, }) => {
    var _a;
    return (react_1.default.createElement(ui_1.FileSelector, { location: slot.value, setLocation: location => slot.set(location), name: slot.name, description: slot.description, rootModel: (_a = (0, util_1.getEnv)(slot).pluginManager) === null || _a === void 0 ? void 0 : _a.rootModel }));
});
const valueComponents = {
    string: StringEditor,
    text: TextEditor,
    fileLocation: FileSelectorWrapper,
    stringArray: StringArrayEditor_1.default,
    stringArrayMap: StringArrayMapEditor,
    numberMap: NumberMapEditor,
    number: NumberEditor,
    integer: IntegerEditor,
    color: ColorEditor_1.default,
    stringEnum: StringEnumEditor,
    boolean: BooleanEditor,
    frozen: JsonEditor_1.default,
    configRelationships: JsonEditor_1.default,
};
exports.useSlotEditorStyles = (0, mui_1.makeStyles)()(theme => ({
    paper: {
        display: 'flex',
        marginBottom: theme.spacing(2),
        position: 'relative',
    },
    paperContent: {
        width: '100%',
    },
    slotModeSwitch: {
        width: 24,
        background: theme.palette.secondary.light,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
}));
const SlotEditor = (0, mobx_react_1.observer)(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
({ slot, slotSchema }) => {
    const { classes } = (0, exports.useSlotEditorStyles)();
    const { type } = slot;
    let ValueComponent = slot.isCallback
        ? CallbackEditor_1.default
        : // @ts-ignore
            valueComponents[type];
    if (!ValueComponent) {
        console.warn(`no slot editor defined for ${type}, editing as string`);
        ValueComponent = StringEditor;
    }
    if (!(type in valueComponents)) {
        console.warn(`SlotEditor needs to implement ${type}`);
    }
    return (react_1.default.createElement(material_1.Paper, { className: classes.paper },
        react_1.default.createElement("div", { className: classes.paperContent },
            react_1.default.createElement(ValueComponent, { slot: slot, slotSchema: slotSchema })),
        react_1.default.createElement("div", { className: classes.slotModeSwitch }, slot.contextVariable.length ? (react_1.default.createElement(material_1.IconButton, { onClick: () => slot.isCallback
                ? slot.convertToValue()
                : slot.convertToCallback(), title: `convert to ${slot.isCallback ? 'regular value' : 'callback'}`, color: "secondary" }, !slot.isCallback ? (react_1.default.createElement(RadioButtonUnchecked_1.default, null)) : (react_1.default.createElement(SvgCheckbox, null)))) : null)));
});
exports.default = SlotEditor;
//# sourceMappingURL=SlotEditor.js.map
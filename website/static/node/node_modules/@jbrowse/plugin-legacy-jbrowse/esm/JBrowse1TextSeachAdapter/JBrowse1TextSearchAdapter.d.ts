import { BaseTextSearchAdapter, BaseArgs, BaseAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';
import BaseResult from '@jbrowse/core/TextSearch/BaseResults';
import { Instance } from 'mobx-state-tree';
import MyConfigSchema from './configSchema';
import HttpMap from './HttpMap';
import PluginManager from '@jbrowse/core/PluginManager';
import { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache';
export interface TooManyHits {
    name: string;
    hitLimit: number;
}
interface SearchResults {
    prefix: ({
        name: string;
    } | string)[];
    exact: [string, number, string, string, number, number][];
}
export type NamesIndexRecord = string | Array<string | number>;
export default class JBrowse1TextSearchAdapter extends BaseAdapter implements BaseTextSearchAdapter {
    httpMap: HttpMap;
    tracksNames?: string[];
    constructor(config: Instance<typeof MyConfigSchema>, getSubAdapter?: getSubAdapterType, pluginManager?: PluginManager);
    /**
     * Returns the contents of the file containing the query if it exists
     * else it returns empty
     * @param query - string query
     */
    loadIndexFile(query: string): Promise<Record<string, SearchResults>>;
    searchIndex(args: BaseArgs): Promise<BaseResult[]>;
    formatResults(results: SearchResults, tracks: string[], searchType?: string): BaseResult[];
    freeResources(): void;
}
export {};

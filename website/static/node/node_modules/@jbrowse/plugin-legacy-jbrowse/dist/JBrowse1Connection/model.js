"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = require("@jbrowse/core/configuration");
const util_1 = require("@jbrowse/core/util");
const models_1 = require("@jbrowse/core/pluggableElementTypes/models");
const mobx_state_tree_1 = require("mobx-state-tree");
const configSchema_1 = __importDefault(require("./configSchema"));
const jb1ConfigLoad_1 = require("./jb1ConfigLoad");
const jb1ToJb2_1 = require("./jb1ToJb2");
function default_1(pluginManager) {
    return mobx_state_tree_1.types
        .compose('JBrowse1Connection', (0, models_1.BaseConnectionModelFactory)(pluginManager), mobx_state_tree_1.types.model({
        configuration: (0, configuration_1.ConfigurationReference)(configSchema_1.default),
        type: mobx_state_tree_1.types.literal('JBrowse1Connection'),
    }))
        .actions(self => ({
        connect() {
            const dataDirLocation = (0, configuration_1.readConfObject)(self.configuration, 'dataDirLocation');
            const session = (0, util_1.getSession)(self);
            (0, jb1ConfigLoad_1.fetchJb1)(dataDirLocation)
                .then(config => {
                var _a;
                const assemblyName = (0, configuration_1.readConfObject)(self.configuration, 'assemblyNames')[0];
                if (!assemblyName) {
                    throw new Error('assembly name required for JBrowse 1 connection');
                }
                const assemblyConf = session.assemblies.find(assembly => (0, configuration_1.readConfObject)(assembly, 'name') === assemblyName);
                if (!assemblyConf) {
                    throw new Error(`Assembly "${assemblyName}" not found`);
                }
                const sequenceAdapter = (0, configuration_1.readConfObject)(assemblyConf, [
                    'sequence',
                    'adapter',
                ]);
                // @ts-ignore
                const jb2Tracks = (_a = config.tracks) === null || _a === void 0 ? void 0 : _a.map(jb1Track => {
                    const jb2Track = (0, jb1ToJb2_1.convertTrackConfig)(jb1Track, config.dataRoot || '', sequenceAdapter);
                    // @ts-ignore
                    jb2Track.assemblyNames = [assemblyName];
                    return jb2Track;
                });
                self.setTrackConfs(jb2Tracks);
            })
                .catch(error => {
                console.error(error);
                session.notify(`There was a problem connecting to the JBrowse 1 data directory "${self.name}". Please make sure you have entered a valid location. The error that was thrown is: "${error}"`, 'error');
                session.breakConnection(self.configuration);
            });
        },
    }));
}
exports.default = default_1;
//# sourceMappingURL=model.js.map
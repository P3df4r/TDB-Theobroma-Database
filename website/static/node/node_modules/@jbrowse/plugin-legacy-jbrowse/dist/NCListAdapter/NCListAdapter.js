"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nclist_1 = __importDefault(require("@gmod/nclist"));
const BaseAdapter_1 = require("@jbrowse/core/data_adapters/BaseAdapter");
const rxjs_1 = require("@jbrowse/core/util/rxjs");
const util_1 = require("@jbrowse/core/util");
const generic_filehandle_1 = require("generic-filehandle");
const NCListFeature_1 = __importDefault(require("./NCListFeature"));
class NCListAdapter extends BaseAdapter_1.BaseFeatureDataAdapter {
    constructor(config, getSubAdapter, pluginManager) {
        super(config, getSubAdapter, pluginManager);
        const refNames = this.getConf('refNames');
        const rootUrlTemplate = this.getConf('rootUrlTemplate');
        this.configRefNames = refNames;
        this.nclist = new nclist_1.default({
            baseUrl: '',
            urlTemplate: rootUrlTemplate.uri,
            readFile: (url) => new generic_filehandle_1.RemoteFile(String(rootUrlTemplate.baseUri
                ? new URL(url, rootUrlTemplate.baseUri).toString()
                : url)).readFile(),
        });
    }
    /**
     * Fetch features for a certain region. Use getFeaturesInRegion() if you also
     * want to verify that the store has features for the given reference sequence
     * before fetching.
     * @param region -
     * @param opts - [signal] optional signalling object for aborting the fetch
     * @returns Observable of Feature objects in the region
     */
    getFeatures(region, opts = {}) {
        return (0, rxjs_1.ObservableCreate)(async (observer) => {
            const { signal } = opts;
            for await (const feature of this.nclist.getFeatures(region, opts)) {
                (0, util_1.checkAbortSignal)(signal);
                observer.next(this.wrapFeature(feature));
            }
            observer.complete();
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    wrapFeature(ncFeature) {
        return new NCListFeature_1.default(ncFeature, undefined, `${this.id}-${ncFeature.id()}`);
    }
    async hasDataForRefName(refName) {
        const root = await this.nclist.getDataRoot(refName);
        return !!(root && root.stats && root.stats.featureCount);
    }
    /**
     * NCList is unable to get list of ref names so returns empty
     */
    async getRefNames() {
        return this.configRefNames || [];
    }
    /**
     * called to provide a hint that data tied to a certain region
     * will not be needed for the forseeable future and can be purged
     * from caches, etc
     */
    freeResources() { }
}
exports.default = NCListAdapter;
//# sourceMappingURL=NCListAdapter.js.map
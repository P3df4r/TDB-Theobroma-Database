import { IndexedCramFile, CramRecord } from '@gmod/cram';
import { BaseFeatureDataAdapter, BaseOptions, BaseSequenceAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';
import { Region, Feature } from '@jbrowse/core/util';
import CramSlightlyLazyFeature from './CramSlightlyLazyFeature';
interface Header {
    idToName?: string[];
    nameToId?: Record<string, number>;
    readGroups?: (string | undefined)[];
}
interface FilterBy {
    flagInclude: number;
    flagExclude: number;
    tagFilter: {
        tag: string;
        value: unknown;
    };
    readName: string;
}
export default class CramAdapter extends BaseFeatureDataAdapter {
    samHeader: Header;
    private setupP?;
    private configureP?;
    private seqIdToRefName;
    private seqIdToOriginalRefName;
    configurePre(): Promise<{
        cram: IndexedCramFile;
        sequenceAdapter: BaseSequenceAdapter;
    }>;
    configure(): Promise<{
        cram: IndexedCramFile;
        sequenceAdapter: BaseSequenceAdapter;
    }>;
    getHeader(opts?: BaseOptions): Promise<string | undefined>;
    private seqFetch;
    private setupPre;
    private setup;
    getRefNames(opts?: BaseOptions): Promise<string[]>;
    refNameToId(refName: string): number | undefined;
    refIdToName(refId: number): string | undefined;
    refIdToOriginalName(refId: number): string;
    getFeatures(region: Region & {
        originalRefName?: string;
    }, opts?: BaseOptions & {
        filterBy: FilterBy;
    }): import("rxjs").Observable<Feature>;
    freeResources(): void;
    cramRecordToFeature(record: CramRecord): CramSlightlyLazyFeature;
    estimateRegionsStats(regions: Region[], opts?: BaseOptions): Promise<{
        bytes: number;
        fetchSizeLimit: any;
    }>;
    /**
     * get the approximate number of bytes queried from the file for the given
     * query regions
     * @param regions - list of query regions
     */
    private bytesForRegions;
}
export {};

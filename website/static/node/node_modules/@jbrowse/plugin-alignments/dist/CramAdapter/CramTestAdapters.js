"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SequenceAdapter = exports.FetchableSmallFasta = exports.parseSmallFasta = void 0;
const rxjs_1 = require("rxjs");
const simpleFeature_1 = __importDefault(require("@jbrowse/core/util/simpleFeature"));
const BaseAdapter_1 = require("@jbrowse/core/data_adapters/BaseAdapter");
const configurationSchema_1 = require("@jbrowse/core/configuration/configurationSchema");
// setup for Cram Adapter Testing
function parseSmallFasta(text) {
    return text
        .split('>')
        .filter(t => /\S/.test(t))
        .map(entryText => {
        const [defLine, ...seqLines] = entryText.split(/\n|\r\n|\r/);
        const [id, ...descriptionLines] = defLine.split(' ');
        const description = descriptionLines.join(' ');
        const sequence = seqLines.join('').replace(/\s/g, '');
        return { id, description, sequence };
    });
}
exports.parseSmallFasta = parseSmallFasta;
class FetchableSmallFasta {
    constructor(filehandle) {
        this.data = filehandle.readFile().then(buffer => {
            const text = buffer.toString('utf8');
            return parseSmallFasta(text);
        });
    }
    async fetch(id, start, end) {
        const data = await this.data;
        const entry = data[id];
        const length = end - start + 1;
        if (!entry) {
            throw new Error(`no sequence with id ${id} exists`);
        }
        return entry.sequence.slice(start, start + length);
    }
    async getSequenceList() {
        const data = await this.data;
        return data.map(entry => entry.id);
    }
}
exports.FetchableSmallFasta = FetchableSmallFasta;
class SequenceAdapter extends BaseAdapter_1.BaseFeatureDataAdapter {
    constructor(filehandle) {
        super((0, configurationSchema_1.ConfigurationSchema)('empty', {}).create());
        this.refNames = [];
        this.fasta = new FetchableSmallFasta(filehandle);
    }
    async getRefNames() {
        return this.refNames;
    }
    getFeatures({ refName, start, end, }) {
        return new rxjs_1.Observable(observer => {
            this.fasta
                .getSequenceList()
                .then(refNames => {
                this.refNames = refNames;
            })
                .then(() => this.fasta.fetch(this.refNames.indexOf(refName), start, end))
                .then(ret => {
                observer.next(new simpleFeature_1.default({
                    uniqueId: `${refName}-${start}-${end}`,
                    seq: ret,
                    start,
                    end,
                }));
                observer.complete();
            });
            return { unsubscribe: () => { } };
        });
    }
    freeResources( /* { region } */) { }
}
exports.SequenceAdapter = SequenceAdapter;
//# sourceMappingURL=CramTestAdapters.js.map
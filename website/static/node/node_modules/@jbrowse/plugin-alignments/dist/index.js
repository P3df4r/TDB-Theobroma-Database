"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MismatchParser = exports.linearPileupDisplayStateModelFactory = exports.linearPileupDisplayConfigSchemaFactory = void 0;
const Plugin_1 = __importDefault(require("@jbrowse/core/Plugin"));
const MismatchParser = __importStar(require("./BamAdapter/MismatchParser"));
exports.MismatchParser = MismatchParser;
const CramAdapter_1 = __importDefault(require("./CramAdapter"));
const BamAdapter_1 = __importDefault(require("./BamAdapter"));
const HtsgetBamAdapter_1 = __importDefault(require("./HtsgetBamAdapter"));
const SNPCoverageAdapter_1 = __importDefault(require("./SNPCoverageAdapter"));
const SNPCoverageRenderer_1 = __importDefault(require("./SNPCoverageRenderer"));
const PileupRenderer_1 = __importDefault(require("./PileupRenderer"));
const LinearAlignmentsDisplay_1 = __importDefault(require("./LinearAlignmentsDisplay"));
const LinearSNPCoverageDisplay_1 = __importDefault(require("./LinearSNPCoverageDisplay"));
const LinearPileupDisplay_1 = __importStar(require("./LinearPileupDisplay"));
Object.defineProperty(exports, "linearPileupDisplayStateModelFactory", { enumerable: true, get: function () { return LinearPileupDisplay_1.linearPileupDisplayStateModelFactory; } });
Object.defineProperty(exports, "linearPileupDisplayConfigSchemaFactory", { enumerable: true, get: function () { return LinearPileupDisplay_1.linearPileupDisplayConfigSchemaFactory; } });
const AlignmentsTrack_1 = __importDefault(require("./AlignmentsTrack"));
const AlignmentsFeatureDetail_1 = __importDefault(require("./AlignmentsFeatureDetail"));
const rpcMethods_1 = require("./PileupRPC/rpcMethods");
const tracks_1 = require("@jbrowse/core/util/tracks");
class AlignmentsPlugin extends Plugin_1.default {
    constructor() {
        super(...arguments);
        this.name = 'AlignmentsPlugin';
    }
    install(pluginManager) {
        ;
        [
            BamAdapter_1.default,
            CramAdapter_1.default,
            LinearPileupDisplay_1.default,
            LinearSNPCoverageDisplay_1.default,
            AlignmentsTrack_1.default,
            SNPCoverageAdapter_1.default,
            HtsgetBamAdapter_1.default,
            PileupRenderer_1.default,
            SNPCoverageRenderer_1.default,
            LinearAlignmentsDisplay_1.default,
            AlignmentsFeatureDetail_1.default,
        ].map(f => f(pluginManager));
        pluginManager.addToExtensionPoint('Core-guessAdapterForLocation', (adapterGuesser) => {
            return (file, index, adapterHint) => {
                const regexGuess = /\.cram$/i;
                const adapterName = 'CramAdapter';
                const fileName = (0, tracks_1.getFileName)(file);
                const obj = {
                    type: adapterName,
                    cramLocation: file,
                    craiLocation: index || (0, tracks_1.makeIndex)(file, '.crai'),
                };
                if (regexGuess.test(fileName) && !adapterHint) {
                    return obj;
                }
                else if (adapterHint === adapterName) {
                    return obj;
                }
                return adapterGuesser(file, index, adapterHint);
            };
        });
        pluginManager.addToExtensionPoint('Core-guessAdapterForLocation', (adapterGuesser) => {
            return (file, index, adapterHint) => {
                const regexGuess = /\.bam$/i;
                const adapterName = 'BamAdapter';
                const fileName = (0, tracks_1.getFileName)(file);
                const indexName = index && (0, tracks_1.getFileName)(index);
                const obj = {
                    type: adapterName,
                    bamLocation: file,
                    index: {
                        location: index || (0, tracks_1.makeIndex)(file, '.bai'),
                        indexType: (0, tracks_1.makeIndexType)(indexName, 'CSI', 'BAI'),
                    },
                };
                if (regexGuess.test(fileName) && !adapterHint) {
                    return obj;
                }
                else if (adapterHint === adapterName) {
                    return obj;
                }
                return adapterGuesser(file, index, adapterHint);
            };
        });
        pluginManager.addToExtensionPoint('Core-guessTrackTypeForLocation', (trackTypeGuesser) => {
            return (adapterName) => {
                if (adapterName === 'BamAdapter' || adapterName === 'CramAdapter') {
                    return 'AlignmentsTrack';
                }
                return trackTypeGuesser(adapterName);
            };
        });
        pluginManager.addRpcMethod(() => new rpcMethods_1.PileupGetGlobalValueForTag(pluginManager));
        pluginManager.addRpcMethod(() => new rpcMethods_1.PileupGetVisibleModifications(pluginManager));
    }
}
exports.default = AlignmentsPlugin;
//# sourceMappingURL=index.js.map
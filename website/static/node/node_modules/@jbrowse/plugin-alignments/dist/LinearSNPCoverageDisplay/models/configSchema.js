"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = require("@jbrowse/core/configuration");
const plugin_linear_genome_view_1 = require("@jbrowse/plugin-linear-genome-view");
const mobx_state_tree_1 = require("mobx-state-tree");
/**
 * #config LinearSNPCoverageDisplay
 */
function x() { } // eslint-disable-line @typescript-eslint/no-unused-vars
function SNPCoverageConfigFactory(pluginManager) {
    return (0, configuration_1.ConfigurationSchema)('LinearSNPCoverageDisplay', {
        /**
         * #slot
         */
        autoscale: {
            type: 'stringEnum',
            defaultValue: 'local',
            model: mobx_state_tree_1.types.enumeration('Autoscale type', ['local']),
            description: 'performs local autoscaling (no other options for SNP Coverage available)',
        },
        /**
         * #slot
         */
        minScore: {
            type: 'number',
            defaultValue: Number.MIN_VALUE,
            description: 'minimum value for the y-scale',
        },
        /**
         * #slot
         */
        maxScore: {
            type: 'number',
            description: 'maximum value for the y-scale',
            defaultValue: Number.MAX_VALUE,
        },
        /**
         * #slot
         */
        scaleType: {
            type: 'stringEnum',
            model: mobx_state_tree_1.types.enumeration('Scale type', ['linear', 'log']),
            description: 'The type of scale to use',
            defaultValue: 'linear',
        },
        /**
         * #slot
         */ inverted: {
            type: 'boolean',
            description: 'draw upside down',
            defaultValue: false,
        },
        /**
         * #slot
         */
        multiTicks: {
            type: 'boolean',
            description: 'Display multiple values for the ticks',
            defaultValue: false,
        },
        /**
         * #slot
         */
        renderers: (0, configuration_1.ConfigurationSchema)('RenderersConfiguration', {
            SNPCoverageRenderer: pluginManager.getRendererType('SNPCoverageRenderer').configSchema,
        }),
    }, {
        /**
         * #baseConfiguration
         */
        baseConfiguration: plugin_linear_genome_view_1.baseLinearDisplayConfigSchema,
        explicitlyTyped: true,
    });
}
exports.default = SNPCoverageConfigFactory;
//# sourceMappingURL=configSchema.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const util_1 = require("@jbrowse/core/util");
const copy_to_clipboard_1 = __importDefault(require("copy-to-clipboard"));
const clone_1 = __importDefault(require("clone"));
const BaseFeatureDetail_1 = require("@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail");
const MismatchParser_1 = require("../BamAdapter/MismatchParser");
const useStyles = (0, mui_1.makeStyles)()({
    compact: {
        paddingRight: 0,
        paddingTop: 0,
        paddingBottom: 0,
    },
});
const omit = ['clipPos', 'flags'];
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function AlignmentFlags(props) {
    const { classes } = useStyles();
    const { feature } = props;
    const { flags } = feature;
    const flagNames = [
        'read paired',
        'read mapped in proper pair',
        'read unmapped',
        'mate unmapped',
        'read reverse strand',
        'mate reverse strand',
        'first in pair',
        'second in pair',
        'not primary alignment',
        'read fails platform/vendor quality checks',
        'read is PCR or optical duplicate',
        'supplementary alignment',
    ];
    return (react_1.default.createElement(BaseFeatureDetail_1.BaseCard, { ...props, title: "Flags" },
        react_1.default.createElement(BaseFeatureDetail_1.SimpleValue, { name: 'Flag', value: flags }),
        react_1.default.createElement(material_1.FormGroup, null, flagNames.map((name, index) => {
            const val = flags & (1 << index);
            const key = `${name}_${val}`;
            return (react_1.default.createElement(material_1.FormControlLabel, { key: key, control: react_1.default.createElement(material_1.Checkbox, { className: classes.compact, checked: Boolean(val), name: name, readOnly: true }), label: name }));
        }))));
}
function Formatter({ value }) {
    const [show, setShow] = (0, react_1.useState)(false);
    const [copied, setCopied] = (0, react_1.useState)(false);
    const display = String(value);
    if (display.length > 100) {
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement("button", { type: "button", onClick: () => {
                    (0, copy_to_clipboard_1.default)(display);
                    setCopied(true);
                    setTimeout(() => {
                        setCopied(false);
                    }, 700);
                } }, copied ? 'Copied to clipboard' : 'Copy'),
            react_1.default.createElement("button", { type: "button", onClick: () => setShow(val => !val) }, show ? 'Show less' : 'Show more'),
            react_1.default.createElement("div", null, show ? display : `${display.slice(0, 100)}...`)));
    }
    return react_1.default.createElement("div", null, display);
}
// utility function to get length of alignment from cigar
function getLengthOnRef(cigar) {
    const cigarOps = (0, MismatchParser_1.parseCigar)(cigar);
    let lengthOnRef = 0;
    for (let i = 0; i < cigarOps.length; i += 2) {
        const len = +cigarOps[i];
        const op = cigarOps[i + 1];
        if (op !== 'H' && op !== 'S' && op !== 'I') {
            lengthOnRef += len;
        }
    }
    return lengthOnRef;
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function SupplementaryAlignments(props) {
    const { tag, model } = props;
    const session = (0, util_1.getSession)(model);
    return (react_1.default.createElement(BaseFeatureDetail_1.BaseCard, { ...props, title: "Supplementary alignments" },
        react_1.default.createElement(material_1.Typography, null, "List of supplementary alignment locations"),
        react_1.default.createElement("ul", null, tag
            .split(';')
            .filter(SA => !!SA)
            .map((SA, index) => {
            const [saRef, saStart, saStrand, saCigar] = SA.split(',');
            const saLength = getLengthOnRef(saCigar);
            const extra = Math.floor(saLength / 5);
            const start = +saStart;
            const end = +saStart + saLength;
            const locString = `${saRef}:${Math.max(1, start - extra)}-${end + extra}`;
            const displayStart = start.toLocaleString('en-US');
            const displayEnd = end.toLocaleString('en-US');
            const displayString = `${saRef}:${displayStart}-${displayEnd} (${saStrand})`;
            return (react_1.default.createElement("li", { key: `${locString}-${index}` },
                react_1.default.createElement(material_1.Link, { onClick: async (event) => {
                        event.preventDefault();
                        const { view } = model;
                        try {
                            if (view) {
                                await view.navToLocString(locString);
                            }
                            else {
                                throw new Error('No view associated with this view anymore');
                            }
                        }
                        catch (e) {
                            console.error(e);
                            session.notify(`${e}`);
                        }
                    }, href: "#" }, displayString)));
        }))));
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function PairLink({ locString, model }) {
    const session = (0, util_1.getSession)(model);
    return (react_1.default.createElement(material_1.Link, { onClick: async () => {
            const { view } = model;
            if (!view) {
                throw new Error('No view associated with this feature detail panel anymore');
            }
            try {
                await view.navToLocString(locString);
            }
            catch (e) {
                console.error(e);
                session.notify(`${e}`);
            }
        }, href: "#" }, locString));
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function AlignmentFeatureDetails(props) {
    const { model } = props;
    const feat = (0, clone_1.default)(model.featureData);
    const SA = (feat.tags && feat.tags.SA) || feat.SA;
    return (react_1.default.createElement(material_1.Paper, { "data-testid": "alignment-side-drawer" },
        react_1.default.createElement(BaseFeatureDetail_1.FeatureDetails, { ...props, omit: omit, feature: feat, formatter: (value, key) => {
                return key === 'next_segment_position' ? (react_1.default.createElement(PairLink, { model: model, locString: value })) : (react_1.default.createElement(Formatter, { value: value }));
            } }),
        SA ? react_1.default.createElement(SupplementaryAlignments, { model: model, tag: SA }) : null,
        feat.flags !== undefined ? (react_1.default.createElement(AlignmentFlags, { feature: feat, ...props })) : null));
}
exports.default = (0, mobx_react_1.observer)(AlignmentFeatureDetails);
//# sourceMappingURL=AlignmentsFeatureDetail.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    paper: {
        padding: theme.spacing(2),
        margin: theme.spacing(2),
    },
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    field: {
        margin: theme.spacing(2),
    },
}));
const flagNames = [
    'read paired',
    'read mapped in proper pair',
    'read unmapped',
    'mate unmapped',
    'read reverse strand',
    'mate reverse strand',
    'first in pair',
    'second in pair',
    'not primary alignment',
    'read fails platform/vendor quality checks',
    'read is PCR or optical duplicate',
    'supplementary alignment',
];
function Bitmask(props) {
    const { flag = 0, setFlag } = props;
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(material_1.TextField, { type: "number", value: flag, onChange: event => setFlag(+event.target.value) }),
        flagNames.map((name, index) => {
            const val = flag & (1 << index);
            const key = `${name}_${val}`;
            return (react_1.default.createElement("div", { key: key },
                react_1.default.createElement("input", { type: "checkbox", checked: Boolean(val), onChange: event => {
                        if (event.target.checked) {
                            setFlag(flag | (1 << index));
                        }
                        else {
                            setFlag(flag & ~(1 << index));
                        }
                    } }),
                react_1.default.createElement("label", { htmlFor: key }, name)));
        })));
}
function FilterByTagDlg(props) {
    var _a, _b;
    const { model, handleClose } = props;
    const { classes } = useStyles();
    const { filterBy } = model;
    const [flagInclude, setFlagInclude] = (0, react_1.useState)(filterBy === null || filterBy === void 0 ? void 0 : filterBy.flagInclude);
    const [flagExclude, setFlagExclude] = (0, react_1.useState)(filterBy === null || filterBy === void 0 ? void 0 : filterBy.flagExclude);
    const [tag, setTag] = (0, react_1.useState)(((_a = filterBy === null || filterBy === void 0 ? void 0 : filterBy.tagFilter) === null || _a === void 0 ? void 0 : _a.tag) || '');
    const [tagValue, setTagValue] = (0, react_1.useState)(((_b = filterBy === null || filterBy === void 0 ? void 0 : filterBy.tagFilter) === null || _b === void 0 ? void 0 : _b.value) || '');
    const [readName, setReadName] = (0, react_1.useState)((filterBy === null || filterBy === void 0 ? void 0 : filterBy.readName) || '');
    const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/);
    const site = 'https://broadinstitute.github.io/picard/explain-flags.html';
    return (react_1.default.createElement(material_1.Dialog, { open: true, onClose: handleClose },
        react_1.default.createElement(material_1.DialogTitle, null,
            "Filter options",
            react_1.default.createElement(material_1.IconButton, { "aria-label": "close", className: classes.closeButton, onClick: handleClose },
                react_1.default.createElement(Close_1.default, null))),
        react_1.default.createElement(material_1.DialogContent, null,
            react_1.default.createElement(material_1.Typography, null,
                "Set filter bitmask options. Refer to ",
                react_1.default.createElement(material_1.Link, { href: site }, site),
                ' ',
                "for details"),
            react_1.default.createElement(material_1.Paper, { className: classes.paper, variant: "outlined" },
                react_1.default.createElement("div", { style: { display: 'flex' } },
                    react_1.default.createElement("div", null,
                        react_1.default.createElement(material_1.Typography, null, "Read must have ALL these flags"),
                        react_1.default.createElement(Bitmask, { flag: flagInclude, setFlag: setFlagInclude })),
                    react_1.default.createElement("div", null,
                        react_1.default.createElement(material_1.Typography, null, "Read must have NONE of these flags"),
                        react_1.default.createElement(Bitmask, { flag: flagExclude, setFlag: setFlagExclude })))),
            react_1.default.createElement(material_1.Paper, { className: classes.paper, variant: "outlined" },
                react_1.default.createElement(material_1.Typography, null, "Filter by tag name and value. Use * in the value field to get all reads containing any value for that tag. Example: filter tag name SA with value * to get all split/supplementary reads. Other examples include HP for haplotype, or RG for read group"),
                react_1.default.createElement(material_1.TextField, { className: classes.field, value: tag, onChange: event => {
                        setTag(event.target.value);
                    }, placeholder: "Enter tag name", inputProps: {
                        maxLength: 2,
                        'data-testid': 'color-tag-name-input',
                    }, error: tag.length === 2 && !validTag, helperText: tag.length === 2 && !validTag ? 'Not a valid tag' : '', "data-testid": "color-tag-name" }),
                react_1.default.createElement(material_1.TextField, { className: classes.field, value: tagValue, onChange: event => {
                        setTagValue(event.target.value);
                    }, placeholder: "Enter tag value", inputProps: {
                        'data-testid': 'color-tag-name-input',
                    }, "data-testid": "color-tag-value" })),
            react_1.default.createElement(material_1.Paper, { className: classes.paper, variant: "outlined" },
                react_1.default.createElement(material_1.Typography, null, "Filter by read name"),
                react_1.default.createElement(material_1.TextField, { className: classes.field, value: readName, onChange: event => {
                        setReadName(event.target.value);
                    }, placeholder: "Enter read name", inputProps: {
                        'data-testid': 'color-tag-readname-input',
                    }, "data-testid": "color-tag-readname" })),
            react_1.default.createElement(material_1.DialogActions, null,
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "primary", autoFocus: true, type: "submit", onClick: () => {
                        model.setFilterBy({
                            flagInclude,
                            flagExclude,
                            readName,
                            tagFilter: tag !== ''
                                ? {
                                    tag,
                                    value: tagValue,
                                }
                                : undefined,
                        });
                        handleClose();
                    } }, "Submit"),
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "secondary", onClick: () => handleClose() }, "Cancel")))));
}
exports.default = (0, mobx_react_1.observer)(FilterByTagDlg);
//# sourceMappingURL=FilterByTag.js.map
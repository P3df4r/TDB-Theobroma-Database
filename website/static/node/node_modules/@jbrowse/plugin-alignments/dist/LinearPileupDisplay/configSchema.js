"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = require("@jbrowse/core/configuration");
const plugin_linear_genome_view_1 = require("@jbrowse/plugin-linear-genome-view");
const mobx_state_tree_1 = require("mobx-state-tree");
/**
 * #config LinearPileupDisplay
 */
function x() { } // eslint-disable-line @typescript-eslint/no-unused-vars
function configSchemaF(pluginManager) {
    // modify config schema to take in a sub coverage display
    return (0, configuration_1.ConfigurationSchema)('LinearPileupDisplay', {
        /**
         * #slot
         */
        defaultRendering: {
            type: 'stringEnum',
            model: mobx_state_tree_1.types.enumeration('Rendering', ['pileup']),
            defaultValue: 'pileup',
        },
        /**
         * #slot
         */
        renderers: (0, configuration_1.ConfigurationSchema)('RenderersConfiguration', {
            PileupRenderer: pluginManager.getRendererType('PileupRenderer').configSchema,
        }),
        /**
         * #slot
         */
        maxFeatureScreenDensity: {
            type: 'number',
            description: 'maximum features per pixel that is displayed in the view',
            defaultValue: 5,
        },
        /**
         * #slot
         */
        colorScheme: {
            type: 'stringEnum',
            model: mobx_state_tree_1.types.enumeration('colorScheme', [
                'strand',
                'normal',
                'insertSize',
                'insertSizeAndOrientation',
                'mappingQuality',
                'tag',
            ]),
            description: 'color scheme to use',
            defaultValue: 'normal',
        },
    }, {
        /**
         * #baseConfiguration
         */
        baseConfiguration: (0, plugin_linear_genome_view_1.linearBasicDisplayConfigSchemaFactory)(pluginManager),
        explicitlyTyped: true,
    });
}
exports.default = configSchemaF;
//# sourceMappingURL=configSchema.js.map
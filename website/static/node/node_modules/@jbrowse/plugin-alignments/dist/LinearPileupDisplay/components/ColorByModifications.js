"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    table: {
        border: '1px solid #888',
        margin: theme.spacing(4),
        '& td': {
            padding: theme.spacing(1),
        },
    },
}));
function ModificationTable({ modifications, }) {
    const { classes } = useStyles();
    return (react_1.default.createElement("table", { className: classes.table },
        react_1.default.createElement("tbody", null, modifications.map(([key, value]) => (react_1.default.createElement("tr", { key: key },
            react_1.default.createElement("td", null, key),
            react_1.default.createElement("td", null, value),
            react_1.default.createElement("td", { style: {
                    width: '1em',
                    background: value,
                } })))))));
}
function ColorByTagDlg(props) {
    const { classes } = useStyles();
    const { model, handleClose } = props;
    const { colorBy, modificationTagMap } = model;
    const modifications = [...modificationTagMap.entries()];
    return (react_1.default.createElement(material_1.Dialog, { open: true, onClose: handleClose },
        react_1.default.createElement(material_1.DialogTitle, null,
            "Color by modifications",
            react_1.default.createElement(material_1.IconButton, { "aria-label": "close", className: classes.closeButton, onClick: handleClose },
                react_1.default.createElement(Close_1.default, null))),
        react_1.default.createElement(material_1.DialogContent, null,
            react_1.default.createElement(material_1.Typography, null, "You can choose to color the modifications in the BAM/CRAM MM/ML specification using this dialog. Choosing modifications colors the modified positions and can color multiple modification types. Choosing the methylation setting colors methylated and unmethylated CpG."),
            react_1.default.createElement(material_1.Typography, null, "Note: you can revisit this dialog to see the current mapping of colors to modification type for the modification coloring mode"),
            react_1.default.createElement("div", { style: { margin: 20 } },
                (colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) === 'modifications' ? (react_1.default.createElement("div", null, modifications.length ? (react_1.default.createElement(react_1.default.Fragment, null,
                    "Current modification-type-to-color mapping",
                    react_1.default.createElement(ModificationTable, { modifications: [...modificationTagMap.entries()] }))) : (react_1.default.createElement("div", null,
                    react_1.default.createElement(material_1.Typography, null, "Note: color by modifications is already enabled. Loading current modifications..."),
                    react_1.default.createElement(material_1.CircularProgress, { size: 15 }))))) : null,
                (colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) === 'methylation' ? (react_1.default.createElement(ModificationTable, { modifications: [
                        ['methylated', 'red'],
                        ['unmethylated', 'blue'],
                    ] })) : null),
            react_1.default.createElement(material_1.DialogActions, null,
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "primary", style: { margin: 5 }, onClick: () => {
                        model.setColorScheme({
                            type: 'modifications',
                        });
                        handleClose();
                    } }, "Modifications"),
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "primary", style: { margin: 5 }, onClick: () => {
                        model.setColorScheme({
                            type: 'methylation',
                        });
                        handleClose();
                    } }, "Methylation"),
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "secondary", style: { margin: 5 }, onClick: () => handleClose() }, "Cancel")))));
}
exports.default = (0, mobx_react_1.observer)(ColorByTagDlg);
//# sourceMappingURL=ColorByModifications.js.map
import { BamFile } from '@gmod/bam';
import { BaseFeatureDataAdapter, BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter';
import { Region } from '@jbrowse/core/util/types';
import { Feature } from '@jbrowse/core/util';
interface Header {
    idToName: string[];
    nameToId: Record<string, number>;
}
export default class BamAdapter extends BaseFeatureDataAdapter {
    private samHeader?;
    private setupP?;
    private configureP?;
    protected configurePre(): Promise<{
        bam: BamFile;
        sequenceAdapter: BaseFeatureDataAdapter;
    } | {
        bam: BamFile;
        sequenceAdapter?: undefined;
    }>;
    protected configure(): Promise<{
        bam: BamFile;
        sequenceAdapter?: BaseFeatureDataAdapter | undefined;
    }>;
    getHeader(opts?: BaseOptions): Promise<any>;
    private setupPre;
    setup(opts?: BaseOptions): Promise<Header>;
    getRefNames(opts?: BaseOptions): Promise<string[]>;
    private seqFetch;
    getFeatures(region: Region & {
        originalRefName?: string;
    }, opts?: BaseOptions & {
        filterBy: {
            flagInclude: number;
            flagExclude: number;
            tagFilter: {
                tag: string;
                value: unknown;
            };
            readName: string;
        };
    }): import("rxjs").Observable<Feature>;
    estimateRegionsStats(regions: Region[], opts?: BaseOptions): Promise<import("@jbrowse/core/data_adapters/BaseAdapter").Stats | {
        bytes: number;
        fetchSizeLimit: any;
    }>;
    freeResources(): void;
    refIdToName(refId: number): string | undefined;
}
export {};

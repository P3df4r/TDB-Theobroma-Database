"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = require("@jbrowse/core/configuration");
const mobx_state_tree_1 = require("mobx-state-tree");
/**
 * #config BamAdapter
 * used to configure BAM adapter
 */
function x() { } // eslint-disable-line @typescript-eslint/no-unused-vars
const configSchema = (0, configuration_1.ConfigurationSchema)('BamAdapter', {
    /**
     * #slot
     */
    bamLocation: {
        type: 'fileLocation',
        defaultValue: { uri: '/path/to/my.bam', locationType: 'UriLocation' },
    },
    index: (0, configuration_1.ConfigurationSchema)('BamIndex', {
        /**
         * #slot index.indexType
         */
        indexType: {
            model: mobx_state_tree_1.types.enumeration('IndexType', ['BAI', 'CSI']),
            type: 'stringEnum',
            defaultValue: 'BAI',
        },
        /**
         * #slot index.location
         */
        location: {
            type: 'fileLocation',
            defaultValue: {
                uri: '/path/to/my.bam.bai',
                locationType: 'UriLocation',
            },
        },
    }),
    /**
     * #slot
     */
    fetchSizeLimit: {
        type: 'number',
        description: 'size to fetch in bytes over which to display a warning to the user that too much data will be fetched',
        defaultValue: 5000000,
    },
    /**
     * #slot
     * generally refers to the reference genome assembly's sequence adapter
     * currently needs to be manually added
     */
    sequenceAdapter: {
        type: 'frozen',
        description: 'sequence data adapter, used to calculate SNPs when BAM reads lacking MD tags',
        defaultValue: null,
    },
}, { explicitlyTyped: true });
exports.default = configSchema;
//# sourceMappingURL=configSchema.js.map
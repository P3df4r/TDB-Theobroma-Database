"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TrackType_1 = __importDefault(require("@jbrowse/core/pluggableElementTypes/TrackType"));
const configuration_1 = require("@jbrowse/core/configuration");
const models_1 = require("@jbrowse/core/pluggableElementTypes/models");
/**
 * #config AlignmentsTrack
 * has very little config; most config and state logic is on the display
 */
function x() { } // eslint-disable-line @typescript-eslint/no-unused-vars
function configSchemaFactory(pluginManager) {
    return (0, configuration_1.ConfigurationSchema)('AlignmentsTrack', {}, {
        /**
         * #baseConfiguration
         */
        baseConfiguration: (0, models_1.createBaseTrackConfig)(pluginManager),
    });
}
function register(pm) {
    pm.addTrackType(() => {
        const configSchema = configSchemaFactory(pm);
        const track = new TrackType_1.default({
            name: 'AlignmentsTrack',
            configSchema,
            stateModel: (0, models_1.createBaseTrackModel)(pm, 'AlignmentsTrack', configSchema),
        });
        const linearAlignmentsDisplay = pm.getDisplayType('LinearAlignmentsDisplay');
        // Add LinearAlignmentsDisplay here so that it has priority over the other
        // linear displays (defaults to order the displays are added, but we have
        // to add the Pileup and SNPCoverage displays first).
        track.addDisplayType(linearAlignmentsDisplay);
        return track;
    });
}
exports.default = register;
//# sourceMappingURL=index.js.map
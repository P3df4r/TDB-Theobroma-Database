"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PileupLayoutSession = void 0;
const fast_deep_equal_1 = __importDefault(require("fast-deep-equal"));
const BoxRendererType_1 = require("@jbrowse/core/pluggableElementTypes/renderers/BoxRendererType");
const configuration_1 = require("@jbrowse/core/configuration");
// Sorting and revealing soft clip changes the layout of Pileup renderer
// Adds extra conditions to see if cached layout is valid
class PileupLayoutSession extends BoxRendererType_1.LayoutSession {
    constructor(args) {
        super(args);
        this.showSoftClip = false;
        this.config = args.config;
    }
    cachedLayoutIsValid(cachedLayout) {
        return (super.cachedLayoutIsValid(cachedLayout) &&
            this.showSoftClip === cachedLayout.showSoftClip &&
            (0, fast_deep_equal_1.default)(this.sortedBy, cachedLayout.sortedBy) &&
            (0, fast_deep_equal_1.default)(this.filterBy, cachedLayout.filterBy));
    }
    get layout() {
        if (!this.cachedLayout || !this.cachedLayoutIsValid(this.cachedLayout)) {
            this.cachedLayout = {
                layout: this.makeLayout(),
                config: (0, configuration_1.readConfObject)(this.config),
                filters: this.filters,
                filterBy: this.filterBy,
                sortedBy: this.sortedBy,
                showSoftClip: this.showSoftClip,
            };
        }
        return this.cachedLayout.layout;
    }
}
exports.PileupLayoutSession = PileupLayoutSession;
//# sourceMappingURL=PileupLayoutSession.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const ui_1 = require("@jbrowse/core/ui");
const util_1 = require("@jbrowse/core/util");
const mobx_react_1 = require("mobx-react");
// used so that user can click-away-from-feature below the laid out features
// (issue #1248)
const canvasPadding = 100;
function PileupRendering(props) {
    const { onMouseMove, blockKey, displayModel, width, height, regions, bpPerPx, sortedBy, colorBy, } = props;
    const { selectedFeatureId, featureIdUnderMouse, contextMenuFeature } = displayModel;
    const [region] = regions;
    const highlightOverlayCanvas = (0, react_1.useRef)(null);
    const [mouseIsDown, setMouseIsDown] = (0, react_1.useState)(false);
    const [movedDuringLastMouseDown, setMovedDuringLastMouseDown] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        var _a, _b;
        const canvas = highlightOverlayCanvas.current;
        if (!canvas) {
            return;
        }
        const ctx = canvas.getContext('2d');
        if (!ctx) {
            return;
        }
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        const selectedRect = selectedFeatureId
            ? (_a = displayModel.getFeatureByID) === null || _a === void 0 ? void 0 : _a.call(displayModel, blockKey, selectedFeatureId)
            : undefined;
        if (selectedRect) {
            const [leftBp, topPx, rightBp, bottomPx] = selectedRect;
            const [leftPx, rightPx] = (0, util_1.bpSpanPx)(leftBp, rightBp, region, bpPerPx);
            const rectTop = Math.round(topPx);
            const rectHeight = Math.round(bottomPx - topPx);
            ctx.shadowColor = '#222266';
            ctx.shadowBlur = 10;
            ctx.lineJoin = 'bevel';
            ctx.lineWidth = 2;
            ctx.strokeStyle = '#00b8ff';
            ctx.strokeRect(leftPx - 2, rectTop - 2, rightPx - leftPx + 4, rectHeight + 4);
            ctx.clearRect(leftPx, rectTop, rightPx - leftPx, rectHeight);
        }
        const highlightedFeature = featureIdUnderMouse || (contextMenuFeature === null || contextMenuFeature === void 0 ? void 0 : contextMenuFeature.id());
        const highlightedRect = highlightedFeature
            ? (_b = displayModel.getFeatureByID) === null || _b === void 0 ? void 0 : _b.call(displayModel, blockKey, highlightedFeature)
            : undefined;
        if (highlightedRect) {
            const [leftBp, topPx, rightBp, bottomPx] = highlightedRect;
            const [leftPx, rightPx] = (0, util_1.bpSpanPx)(leftBp, rightBp, region, bpPerPx);
            const rectTop = Math.round(topPx);
            const rectHeight = Math.round(bottomPx - topPx);
            ctx.fillStyle = '#0003';
            ctx.fillRect(leftPx, rectTop, rightPx - leftPx, rectHeight);
        }
    }, [
        bpPerPx,
        region,
        blockKey,
        selectedFeatureId,
        displayModel,
        featureIdUnderMouse,
        contextMenuFeature,
    ]);
    function onMouseDown(event) {
        setMouseIsDown(true);
        setMovedDuringLastMouseDown(false);
        callMouseHandler('MouseDown', event);
    }
    function onMouseEnter(event) {
        callMouseHandler('MouseEnter', event);
    }
    function onMouseOut(event) {
        callMouseHandler('MouseOut', event);
        callMouseHandler('MouseLeave', event);
    }
    function onMouseOver(event) {
        callMouseHandler('MouseOver', event);
    }
    function onMouseUp(event) {
        setMouseIsDown(false);
        callMouseHandler('MouseUp', event);
    }
    function onClick(event) {
        if (!movedDuringLastMouseDown) {
            callMouseHandler('Click', event);
        }
    }
    function onMouseLeave(event) {
        callMouseHandler('MouseOut', event);
        callMouseHandler('MouseLeave', event);
    }
    function onContextMenu(event) {
        callMouseHandler('ContextMenu', event);
    }
    function mouseMove(event) {
        if (mouseIsDown) {
            setMovedDuringLastMouseDown(true);
        }
        let offsetX = 0;
        let offsetY = 0;
        const canvas = highlightOverlayCanvas.current;
        if (canvas) {
            const { left, top } = canvas.getBoundingClientRect();
            offsetX = left;
            offsetY = top;
        }
        offsetX = event.clientX - offsetX;
        offsetY = event.clientY - offsetY;
        const px = region.reversed ? width - offsetX : offsetX;
        const clientBp = region.start + bpPerPx * px;
        const featIdUnderMouse = displayModel.getFeatureOverlapping(blockKey, clientBp, offsetY);
        if (onMouseMove) {
            onMouseMove(event, featIdUnderMouse);
        }
    }
    function callMouseHandler(handlerName, event) {
        // @ts-ignore
        // eslint-disable-next-line react/destructuring-assignment
        const featureHandler = props[`onFeature${handlerName}`];
        // @ts-ignore
        // eslint-disable-next-line react/destructuring-assignment
        const canvasHandler = props[`on${handlerName}`];
        if (featureHandler && featureIdUnderMouse) {
            featureHandler(event, featureIdUnderMouse);
        }
        else if (canvasHandler) {
            canvasHandler(event, featureIdUnderMouse);
        }
    }
    const canvasWidth = Math.ceil(width);
    // need to call this in render so we get the right observer behavior
    return (react_1.default.createElement("div", { className: "PileupRendering", "data-testid": `pileup-${sortedBy || colorBy
            ? `${(sortedBy === null || sortedBy === void 0 ? void 0 : sortedBy.type) || ''}${(colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) || ''}${(colorBy === null || colorBy === void 0 ? void 0 : colorBy.tag) || ''}`
            : 'normal'}`, style: { position: 'relative', width: canvasWidth, height } },
        react_1.default.createElement(ui_1.PrerenderedCanvas, { ...props, style: { position: 'absolute', left: 0, top: 0 } }),
        react_1.default.createElement("canvas", { "data-testid": "pileup_overlay_canvas", width: canvasWidth, height: height + canvasPadding, style: { position: 'absolute', left: 0, top: 0 }, className: "highlightOverlayCanvas", ref: highlightOverlayCanvas, onMouseDown: event => onMouseDown(event), onMouseEnter: event => onMouseEnter(event), onMouseOut: event => onMouseOut(event), onMouseOver: event => onMouseOver(event), onMouseUp: event => onMouseUp(event), onMouseLeave: event => onMouseLeave(event), onMouseMove: event => mouseMove(event), onClick: event => onClick(event), onContextMenu: event => onContextMenu(event), onFocus: () => { }, onBlur: () => { } })));
}
exports.default = (0, mobx_react_1.observer)(PileupRendering);
//# sourceMappingURL=PileupRendering.js.map
import { toArray } from 'rxjs/operators';
// get tag from BAM or CRAM feature, where CRAM uses feature.get('tags') and
// BAM does not
export function getTag(feature, tag) {
    const tags = feature.get('tags');
    return tags ? tags[tag] : feature.get(tag);
}
// use fallback alt tag, used in situations where upper case/lower case tags
// exist e.g. Mm/MM for base modifications
export function getTagAlt(feature, tag, alt) {
    return getTag(feature, tag) || getTag(feature, alt);
}
// orientation definitions from igv.js, see also
// https://software.broadinstitute.org/software/igv/interpreting_pair_orientations
export const orientationTypes = {
    fr: {
        F1R2: 'LR',
        F2R1: 'LR',
        F1F2: 'LL',
        F2F1: 'LL',
        R1R2: 'RR',
        R2R1: 'RR',
        R1F2: 'RL',
        R2F1: 'RL',
    },
    rf: {
        R1F2: 'LR',
        R2F1: 'LR',
        R1R2: 'LL',
        R2R1: 'LL',
        F1F2: 'RR',
        F2F1: 'RR',
        F1R2: 'RL',
        F2R1: 'RL',
    },
    ff: {
        F2F1: 'LR',
        R1R2: 'LR',
        F2R1: 'LL',
        R1F2: 'LL',
        R2F1: 'RR',
        F1R2: 'RR',
        R2R1: 'RL',
        F1F2: 'RL',
    },
};
export function getColorWGBS(strand, base) {
    if (strand === 1) {
        if (base === 'C') {
            return '#f00';
        }
        if (base === 'T') {
            return '#00f';
        }
    }
    else if (strand === -1) {
        if (base === 'G') {
            return '#f00';
        }
        if (base === 'A') {
            return '#00f';
        }
    }
    return '#888';
}
export async function fetchSequence(region, adapter) {
    var _a;
    const { end, originalRefName, refName } = region;
    const feats = await adapter
        .getFeatures({
        ...region,
        refName: originalRefName || refName,
        end: end + 1,
    })
        .pipe(toArray())
        .toPromise();
    return (_a = feats[0]) === null || _a === void 0 ? void 0 : _a.get('seq');
}
// has to check underlying C-G (aka CpG) on the reference sequence
export function shouldFetchReferenceSequence(type) {
    return type === 'methylation';
}
//# sourceMappingURL=util.js.map
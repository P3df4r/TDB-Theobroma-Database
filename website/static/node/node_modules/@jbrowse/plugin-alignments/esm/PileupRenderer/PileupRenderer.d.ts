/// <reference types="react" />
import { Theme } from '@mui/material/styles';
import BoxRendererType, { RenderArgs, RenderArgsSerialized, RenderArgsDeserialized as BoxRenderArgsDeserialized, RenderResults, ResultsSerialized, ResultsDeserialized } from '@jbrowse/core/pluggableElementTypes/renderers/BoxRendererType';
import { Region, Feature } from '@jbrowse/core/util';
import { BaseLayout } from '@jbrowse/core/util/layouts/BaseLayout';
import { AnyConfigurationModel } from '@jbrowse/core/configuration';
import { PileupLayoutSession, PileupLayoutSessionProps } from './PileupLayoutSession';
export interface RenderArgsDeserialized extends BoxRenderArgsDeserialized {
    colorBy?: {
        type: string;
        tag?: string;
    };
    colorTagMap?: Record<string, string>;
    modificationTagMap?: Record<string, string>;
    sortedBy?: {
        type: string;
        pos: number;
        refName: string;
        assemblyName: string;
        tag?: string;
    };
    showSoftClip: boolean;
    highResolutionScaling: number;
}
export interface RenderArgsDeserializedWithFeaturesAndLayout extends RenderArgsDeserialized {
    features: Map<string, Feature>;
    layout: BaseLayout<Feature>;
    regionSequence?: string;
}
interface LayoutRecord {
    feature: Feature;
    leftPx: number;
    rightPx: number;
    topPx: number;
    heightPx: number;
}
interface LayoutFeature {
    heightPx: number;
    topPx: number;
    feature: Feature;
}
export default class PileupRenderer extends BoxRendererType {
    supportsSVG: boolean;
    getCharWidthHeight(): {
        charWidth: number;
        charHeight: number;
    };
    layoutFeature({ feature, layout, bpPerPx, region, showSoftClip, heightPx, displayMode, }: {
        feature: Feature;
        layout: BaseLayout<Feature>;
        bpPerPx: number;
        region: Region;
        showSoftClip?: boolean;
        heightPx: number;
        displayMode: string;
    }): LayoutRecord | null;
    getExpandedRegion(region: Region, renderArgs: RenderArgsDeserialized): {
        start: number;
        end: number;
        reversed?: boolean | undefined;
        refName: string;
        assemblyName: string;
    };
    colorByOrientation(feature: Feature, config: AnyConfigurationModel): string;
    getOrientation(feature: Feature, config: AnyConfigurationModel): string;
    colorByInsertSize(feature: Feature, _config: AnyConfigurationModel): string;
    colorByStranded(feature: Feature, _config: AnyConfigurationModel): "color_rev_strand" | "color_fwd_strand" | "color_rev_missing_mate" | "color_fwd_missing_mate" | "color_rev_strand_not_proper" | "color_fwd_strand_not_proper" | "color_fwd_diff_chr" | "color_rev_diff_chr";
    colorByPerBaseLettering({ ctx, feat, region, bpPerPx, colorForBase, contrastForBase, charWidth, charHeight, canvasWidth, }: {
        ctx: CanvasRenderingContext2D;
        feat: LayoutFeature;
        region: Region;
        bpPerPx: number;
        colorForBase: Record<string, string>;
        contrastForBase: Record<string, string>;
        charWidth: number;
        charHeight: number;
        canvasWidth: number;
    }): void;
    colorByPerBaseQuality({ ctx, feat, region, bpPerPx, canvasWidth, }: {
        ctx: CanvasRenderingContext2D;
        feat: LayoutFeature;
        region: Region;
        bpPerPx: number;
        canvasWidth: number;
    }): void;
    colorByModifications({ ctx, feat, region, bpPerPx, renderArgs, canvasWidth, }: {
        ctx: CanvasRenderingContext2D;
        feat: LayoutFeature;
        region: Region;
        bpPerPx: number;
        renderArgs: RenderArgsDeserializedWithFeaturesAndLayout;
        canvasWidth: number;
    }): void;
    colorByMethylation({ ctx, feat, region, bpPerPx, renderArgs, canvasWidth, }: {
        ctx: CanvasRenderingContext2D;
        feat: LayoutFeature;
        region: Region;
        bpPerPx: number;
        renderArgs: RenderArgsDeserializedWithFeaturesAndLayout;
        canvasWidth: number;
    }): void;
    drawRect(ctx: CanvasRenderingContext2D, feat: LayoutFeature, props: RenderArgsDeserialized): void;
    drawAlignmentRect({ ctx, feat, renderArgs, colorForBase, contrastForBase, charWidth, charHeight, defaultColor, canvasWidth, }: {
        ctx: CanvasRenderingContext2D;
        feat: LayoutFeature;
        renderArgs: RenderArgsDeserializedWithFeaturesAndLayout;
        colorForBase: Record<string, string>;
        contrastForBase: Record<string, string>;
        charWidth: number;
        charHeight: number;
        defaultColor: boolean;
        canvasWidth: number;
    }): void;
    drawMismatches({ ctx, feat, renderArgs, minSubfeatureWidth, largeInsertionIndicatorScale, mismatchAlpha, charWidth, charHeight, colorForBase, contrastForBase, canvasWidth, drawSNPsMuted, drawIndels, }: {
        ctx: CanvasRenderingContext2D;
        feat: LayoutFeature;
        renderArgs: RenderArgsDeserializedWithFeaturesAndLayout;
        colorForBase: {
            [key: string]: string;
        };
        contrastForBase: {
            [key: string]: string;
        };
        mismatchAlpha?: boolean;
        drawIndels?: boolean;
        drawSNPsMuted?: boolean;
        minSubfeatureWidth: number;
        largeInsertionIndicatorScale: number;
        charWidth: number;
        charHeight: number;
        canvasWidth: number;
    }): void;
    drawSoftClipping({ ctx, feat, renderArgs, config, theme, canvasWidth, }: {
        ctx: CanvasRenderingContext2D;
        feat: LayoutFeature;
        renderArgs: RenderArgsDeserializedWithFeaturesAndLayout;
        config: AnyConfigurationModel;
        theme: Theme;
        canvasWidth: number;
    }): void;
    makeImageData({ ctx, layoutRecords, canvasWidth, renderArgs, }: {
        ctx: CanvasRenderingContext2D;
        canvasWidth: number;
        layoutRecords: (LayoutFeature | null)[];
        renderArgs: RenderArgsDeserializedWithFeaturesAndLayout;
    }): void;
    layoutFeats(props: RenderArgsDeserializedWithFeaturesAndLayout): (LayoutRecord | null)[];
    fetchSequence(renderProps: RenderArgsDeserialized): Promise<any>;
    render(renderProps: RenderArgsDeserialized): Promise<{
        features: Map<any, any>;
        layout: import("@jbrowse/core/util/layouts").GranularRectLayout<unknown>;
        height: number;
        width: number;
        maxHeightReached: boolean;
        canvasRecordedData: any;
        reactElement?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
        html?: string | undefined;
    } | {
        features: Map<any, any>;
        layout: import("@jbrowse/core/util/layouts").GranularRectLayout<unknown>;
        height: number;
        width: number;
        maxHeightReached: boolean;
        reactElement: JSX.Element;
        html?: string | undefined;
    } | {
        features: Map<any, any>;
        layout: import("@jbrowse/core/util/layouts").GranularRectLayout<unknown>;
        height: number;
        width: number;
        maxHeightReached: boolean;
        imageData: any;
        reactElement?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
        html?: string | undefined;
    }>;
    createSession(args: PileupLayoutSessionProps): PileupLayoutSession;
}
export type { RenderArgs, RenderArgsSerialized, RenderResults, ResultsSerialized, ResultsDeserialized, };

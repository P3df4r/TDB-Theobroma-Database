import { BaseFeatureDataAdapter, BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter';
import { AugmentedRegion as Region } from '@jbrowse/core/util/types';
import { Feature } from '@jbrowse/core/util/simpleFeature';
export default class SNPCoverageAdapter extends BaseFeatureDataAdapter {
    protected configure(): Promise<{
        subadapter: BaseFeatureDataAdapter;
        sequenceAdapter: BaseFeatureDataAdapter | undefined;
    }>;
    fetchSequence(region: Region): Promise<any>;
    getFeatures(region: Region, opts?: BaseOptions): import("rxjs").Observable<Feature>;
    estimateRegionsStats(regions: Region[], opts?: BaseOptions): Promise<import("@jbrowse/core/data_adapters/BaseAdapter").Stats>;
    getRefNames(opts?: BaseOptions): Promise<string[]>;
    freeResources(): void;
    generateCoverageBins(features: Feature[], region: Region, opts: {
        bpPerPx?: number;
        colorBy?: {
            type: string;
            tag?: string;
        };
    }): Promise<{
        bins: {
            refbase?: string | undefined;
            total: number;
            all: number;
            ref: number;
            '-1': 0;
            '0': 0;
            '1': 0;
            lowqual: {
                total: number;
                strands: {
                    [key: string]: number;
                };
            };
            cov: {
                total: number;
                strands: {
                    [key: string]: number;
                };
            };
            delskips: {
                total: number;
                strands: {
                    [key: string]: number;
                };
            };
            noncov: {
                total: number;
                strands: {
                    [key: string]: number;
                };
            };
        }[];
        skipmap: {
            [key: string]: {
                score: number;
                feature: unknown;
                start: number;
                end: number;
                strand: number;
                xs: string;
            };
        };
    }>;
}
declare const capabilities: string[];
export { capabilities };

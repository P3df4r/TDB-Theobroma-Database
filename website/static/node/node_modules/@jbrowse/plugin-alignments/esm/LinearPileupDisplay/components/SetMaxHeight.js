import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, TextField, Typography, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import CloseIcon from '@mui/icons-material/Close';
const useStyles = makeStyles()(theme => ({
    root: {
        width: 500,
    },
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    field: {
        margin: theme.spacing(2),
    },
}));
function SetMaxHeightDlg(props) {
    const { model, handleClose } = props;
    const { classes } = useStyles();
    const { maxHeight = '' } = model;
    const [max, setMax] = useState(`${maxHeight}`);
    return (React.createElement(Dialog, { open: true, onClose: handleClose },
        React.createElement(DialogTitle, null,
            "Filter options",
            React.createElement(IconButton, { "aria-label": "close", className: classes.closeButton, onClick: handleClose },
                React.createElement(CloseIcon, null))),
        React.createElement(DialogContent, { className: classes.root },
            React.createElement(Typography, null, "Set max height for the track. For example, you can increase this if the layout says \"Max height reached\""),
            React.createElement(TextField, { value: max, onChange: event => {
                    setMax(event.target.value);
                }, placeholder: "Enter max height for layout" }),
            React.createElement(DialogActions, null,
                React.createElement(Button, { variant: "contained", color: "primary", type: "submit", autoFocus: true, onClick: () => {
                        model.setMaxHeight(max !== '' && !Number.isNaN(+max) ? +max : undefined);
                        handleClose();
                    } }, "Submit"),
                React.createElement(Button, { variant: "contained", color: "secondary", onClick: () => handleClose() }, "Cancel")))));
}
export default observer(SetMaxHeightDlg);
//# sourceMappingURL=SetMaxHeight.js.map
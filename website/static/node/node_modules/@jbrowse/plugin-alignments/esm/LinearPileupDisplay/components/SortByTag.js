import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, TextField, Typography, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import CloseIcon from '@mui/icons-material/Close';
const useStyles = makeStyles()(theme => ({
    root: {
        margin: 0,
        padding: theme.spacing(2),
    },
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
}));
function SortByTagDlg(props) {
    const { classes } = useStyles();
    const { model, handleClose } = props;
    const [tag, setTag] = useState('');
    const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/);
    return (React.createElement(Dialog, { open: true, onClose: handleClose },
        React.createElement(DialogTitle, null,
            "Sort by tag",
            React.createElement(IconButton, { "aria-label": "close", className: classes.closeButton, onClick: handleClose },
                React.createElement(CloseIcon, null))),
        React.createElement(DialogContent, null,
            React.createElement(Typography, null, "Set the tag to sort by"),
            React.createElement(Typography, { color: "textSecondary" }, "Examples: HP for haplotype, RG for read group, etc."),
            React.createElement(TextField, { value: tag, onChange: event => setTag(event.target.value), placeholder: "Enter tag name", inputProps: {
                    maxLength: 2,
                    'data-testid': 'sort-tag-name-input',
                }, error: tag.length === 2 && !validTag, helperText: tag.length === 2 && !validTag ? 'Not a valid tag' : '', autoComplete: "off", "data-testid": "sort-tag-name" }),
            React.createElement(DialogActions, null,
                React.createElement(Button, { variant: "contained", color: "primary", type: "submit", autoFocus: true, onClick: () => {
                        model.setSortedBy('tag', tag);
                        handleClose();
                    } }, "Submit"),
                React.createElement(Button, { variant: "contained", color: "secondary", onClick: () => handleClose() }, "Cancel")))));
}
export default observer(SortByTagDlg);
//# sourceMappingURL=SortByTag.js.map
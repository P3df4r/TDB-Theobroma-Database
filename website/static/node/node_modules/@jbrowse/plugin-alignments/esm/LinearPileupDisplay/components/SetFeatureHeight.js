import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { Button, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, FormControlLabel, IconButton, TextField, Typography, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import CloseIcon from '@mui/icons-material/Close';
const useStyles = makeStyles()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
}));
function SetFeatureHeightDlg(props) {
    const { classes } = useStyles();
    const { model, handleClose } = props;
    const { featureHeightSetting, noSpacing: noSpacingSetting } = model;
    const [height, setHeight] = useState(`${featureHeightSetting}`);
    const [noSpacing, setNoSpacing] = useState(noSpacingSetting);
    const ok = height !== '' && !Number.isNaN(+height);
    return (React.createElement(Dialog, { open: true, onClose: handleClose },
        React.createElement(DialogTitle, null,
            "Set feature height",
            React.createElement(IconButton, { className: classes.closeButton, onClick: handleClose },
                React.createElement(CloseIcon, null))),
        React.createElement(DialogContent, null,
            React.createElement(Typography, null, "Adjust the feature height and whether there is any spacing between features. Setting feature height to 1 and removing spacing makes the display very compact."),
            React.createElement(TextField, { value: height, helperText: "Feature height", onChange: event => {
                    setHeight(event.target.value);
                } }),
            React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: !!noSpacing, onChange: () => setNoSpacing(val => !val) }), label: "Remove spacing between features in y-direction?" }),
            React.createElement(DialogActions, null,
                React.createElement(Button, { variant: "contained", color: "primary", type: "submit", autoFocus: true, disabled: !ok, onClick: () => {
                        model.setFeatureHeight(height !== '' && !Number.isNaN(+height) ? +height : undefined);
                        model.setNoSpacing(noSpacing);
                        handleClose();
                    } }, "Submit"),
                React.createElement(Button, { variant: "contained", color: "secondary", onClick: () => handleClose() }, "Cancel")))));
}
export default observer(SetFeatureHeightDlg);
//# sourceMappingURL=SetFeatureHeight.js.map
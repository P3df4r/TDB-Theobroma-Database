/// <reference types="react" />
import { Instance } from 'mobx-state-tree';
import { AnyConfigurationModel } from '@jbrowse/core/configuration';
import { Feature } from '@jbrowse/core/util';
import { ContentCopy as ContentCopyIcon } from '@jbrowse/core/ui/Icons';
import { LinearPileupDisplayConfigModel } from './configSchema';
/**
 * #stateModel LinearPileupDisplay
 * extends `BaseLinearDisplay`
 */
declare function stateModelFactory(configSchema: LinearPileupDisplayConfigModel): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
} & {
    height: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    blockState: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        key: import("mobx-state-tree").ISimpleType<string>;
        region: import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
        reloadFlag: import("mobx-state-tree").IType<number | undefined, number, number>;
        isLeftEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isRightEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        renderInProgress: AbortController | undefined; /**
         * #property
         */
        filled: boolean;
        reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
        features: Map<string, Feature> | undefined; /**
         * #property
         */
        layout: any;
        status: string;
        error: unknown;
        message: string | undefined;
        maxHeightReached: boolean;
        ReactComponent: ({ model, }: {
            model: any;
        }) => any;
        renderProps: any;
    } & {
        doReload(): void; /**
         * #property
         */
        afterAttach(): void;
        setStatus(message: string): void;
        setLoading(abortController: AbortController): void;
        setMessage(messageText: string): void;
        setRendered(props: {
            reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
            features: Map<string, Feature>;
            layout: any;
            maxHeightReached: boolean;
            renderProps: any;
        } | undefined): void;
        setError(error: unknown): void;
        reload(): void;
        beforeDestroy(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    userBpPerPxLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
    userByteSizeLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
} & {
    type: import("mobx-state-tree").ISimpleType<"LinearPileupDisplay">;
    configuration: import("mobx-state-tree").ITypeUnion<any, any, any>;
    showSoftClipping: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    featureHeight: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
    noSpacing: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<boolean>>;
    fadeLikelihood: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<boolean>>;
    trackMaxHeight: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
    mismatchAlpha: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<boolean>>;
    sortedBy: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IModelType<{
        type: import("mobx-state-tree").ISimpleType<string>;
        pos: import("mobx-state-tree").ISimpleType<number>;
        tag: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        refName: import("mobx-state-tree").ISimpleType<string>;
        assemblyName: import("mobx-state-tree").ISimpleType<string>;
    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    colorBy: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IModelType<{
        type: import("mobx-state-tree").ISimpleType<string>;
        tag: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        extra: import("mobx-state-tree").IType<any, any, any>;
    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    filterBy: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        flagInclude: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        flagExclude: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
        readName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        tagFilter: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IModelType<{
            tag: import("mobx-state-tree").ISimpleType<string>;
            value: import("mobx-state-tree").ISimpleType<string>;
        }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
}, {
    rendererTypeName: string;
    error: unknown;
} & {
    readonly RenderingComponent: import("react").FC<{
        model: {
            id: string;
            type: string;
            rpcDriverName: string | undefined;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            rendererTypeName: string;
            error: unknown;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: unknown;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        onHorizontalScroll?: Function | undefined;
        blockState?: Record<string, any> | undefined;
    }>;
    readonly DisplayBlurb: import("react").FC<{
        model: {
            id: string;
            type: string;
            rpcDriverName: string | undefined;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            rendererTypeName: string;
            error: unknown;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: unknown;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }> | null;
    readonly adapterConfig: any;
    readonly parentTrack: any;
    renderProps(): any;
    readonly rendererType: import("@jbrowse/core/pluggableElementTypes").RendererType;
    readonly DisplayMessageComponent: import("react").FC<any> | undefined;
    trackMenuItems(): import("@jbrowse/core/ui").MenuItem[];
    readonly viewMenuActions: import("@jbrowse/core/ui").MenuItem[];
    regionCannotBeRendered(): undefined;
} & {
    setError(error?: unknown): void;
    setRpcDriverName(rpcDriverName: string): void;
    reload(): void;
} & {
    currBpPerPx: number;
    message: string;
    featureIdUnderMouse: string | undefined;
    contextMenuFeature: Feature | undefined;
    scrollTop: number;
    estimatedRegionStatsP: Promise<import("@jbrowse/core/data_adapters/BaseAdapter").Stats> | undefined;
    estimatedRegionStats: import("@jbrowse/core/data_adapters/BaseAdapter").Stats | undefined;
} & {
    readonly blockType: "dynamicBlocks" | "staticBlocks";
    readonly blockDefinitions: import("@jbrowse/core/util/blockTypes").BlockSet;
} & {
    readonly renderDelay: number;
    readonly TooltipComponent: import("react").FC<any>;
    readonly selectedFeatureId: string | undefined;
    readonly DisplayMessageComponent: import("react").FC<any> | undefined;
} & {
    readonly features: import("@jbrowse/core/util/compositeMap").default<string, Feature>;
    readonly featureUnderMouse: Feature | undefined;
    getFeatureOverlapping(blockKey: string, x: number, y: number): any;
    getFeatureByID(blockKey: string, id: string): [number, number, number, number] | undefined;
    searchFeatureByID(id: string): [number, number, number, number] | undefined;
    readonly currentBytesRequested: number;
    readonly currentFeatureScreenDensity: number;
    readonly maxFeatureScreenDensity: any;
    readonly estimatedStatsReady: boolean;
    readonly maxAllowableBytes: number;
} & {
    setMessage(message: string): void;
    afterAttach(): void;
    estimateRegionsStats(regions: import("@jbrowse/core/util").Region[], opts: {
        headers?: Record<string, string> | undefined;
        signal?: AbortSignal | undefined;
        filters?: string[] | undefined;
    }): Promise<{}>;
    setRegionStatsP(p?: Promise<import("@jbrowse/core/data_adapters/BaseAdapter").Stats> | undefined): void;
    setRegionStats(estimatedRegionStats?: import("@jbrowse/core/data_adapters/BaseAdapter").Stats | undefined): void;
    clearRegionStats(): void;
    setHeight(displayHeight: number): number;
    resizeHeight(distance: number): number;
    setScrollTop(scrollTop: number): void;
    updateStatsLimit(stats: import("@jbrowse/core/data_adapters/BaseAdapter").Stats): void;
    addBlock(key: string, block: import("@jbrowse/core/util/blockTypes").BaseBlock): void;
    setCurrBpPerPx(n: number): void;
    deleteBlock(key: string): void;
    selectFeature(feature: Feature): void;
    clearFeatureSelection(): void;
    setFeatureIdUnderMouse(feature: string | undefined): void;
    reload(): void;
    setContextMenuFeature(feature?: Feature | undefined): void;
} & {
    readonly regionTooLarge: boolean;
    readonly regionTooLargeReason: string;
} & {
    reload(): Promise<void>;
    afterAttach(): void;
} & {
    regionCannotBeRenderedText(_region: import("@jbrowse/core/util").Region): "" | "Force load to see features";
    regionCannotBeRendered(_region: import("@jbrowse/core/util").Region): JSX.Element | null;
    trackMenuItems(): import("@jbrowse/core/ui").MenuItem[];
    contextMenuItems(): {
        label: string;
        icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
            muiName: string;
        };
        onClick: () => void;
    }[];
    renderProps(): any;
} & {
    renderSvg(opts: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions & {
        overrideHeight: number;
    }): Promise<JSX.Element>;
} & {
    colorTagMap: import("mobx").ObservableMap<string, string>;
    modificationTagMap: import("mobx").ObservableMap<string, string>;
    featureUnderMouseVolatile: Feature | undefined;
    currSortBpPerPx: number;
    ready: boolean;
} & {
    /**
     * #action
     */
    setReady(flag: boolean): void;
    /**
     * #action
     */
    setCurrSortBpPerPx(n: number): void;
    /**
     * #action
     */
    setMaxHeight(n: number): void;
    /**
     * #action
     */
    setFeatureHeight(n: number): void;
    /**
     * #action
     */
    setNoSpacing(flag: boolean): void;
    /**
     * #action
     */
    setColorScheme(colorScheme: {
        type: string;
        tag?: string;
    }): void;
    /**
     * #action
     */
    updateModificationColorMap(uniqueModifications: string[]): void;
    /**
     * #action
     */
    updateColorTagMap(uniqueTag: string[]): void;
    /**
     * #action
     */
    setFeatureUnderMouse(feat?: Feature): void;
} & {
    afterAttach(): void;
    /**
     * #action
     */
    selectFeature(feature: Feature): void;
    /**
     * #action
     */
    clearSelected(): void;
    /**
     * #action
     * uses copy-to-clipboard and generates notification
     */
    copyFeatureToClipboard(feature: Feature): void;
    /**
     * #action
     */
    toggleSoftClipping(): void;
    /**
     * #action
     */
    toggleMismatchAlpha(): void;
    /**
     * #action
     */
    setConfig(configuration: AnyConfigurationModel): void;
    /**
     * #action
     */
    setSortedBy(type: string, tag?: string): void;
    setFilterBy(filter: {
        flagInclude: number;
        flagExclude: number;
        readName?: string;
        tagFilter?: {
            tag: string;
            value: string;
        };
    }): void;
} & {
    /**
     * #action
     */
    reload(): void;
} & {
    /**
     * #getter
     */
    readonly maxHeight: any;
    /**
     * #getter
     */
    readonly rendererConfig: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>;
    /**
     * #getter
     */
    readonly featureHeightSetting: any;
    /**
     * #getter
     */
    readonly mismatchAlphaSetting: any;
    /**
     * #getter
     */
    readonly featureUnderMouse: Feature | undefined;
} & {
    /**
     * #getter
     */
    readonly rendererTypeName: string;
    /**
     * #method
     */
    contextMenuItems(): {
        label: string;
        icon: typeof ContentCopyIcon;
        onClick: () => void;
    }[];
    /**
     * #getter
     */
    readonly DisplayBlurb: (props: import("./components/LinearPileupDisplayBlurb").LinearPileupDisplayBlurbProps) => JSX.Element | null;
    /**
     * #method
     */
    renderProps(): any;
    /**
     * #method
     */
    trackMenuItems(): (import("@jbrowse/core/ui").MenuDivider | import("@jbrowse/core/ui").MenuSubHeader | import("@jbrowse/core/ui").NormalMenuItem | import("@jbrowse/core/ui").CheckboxMenuItem | import("@jbrowse/core/ui").RadioMenuItem | import("@jbrowse/core/ui").SubMenuItem | {
        label: string;
        icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
            muiName: string;
        };
        type: string;
        checked: boolean;
        onClick: () => void;
        disabled?: undefined;
        subMenu?: undefined;
    } | {
        label: string;
        icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
            muiName: string;
        };
        disabled: boolean;
        subMenu: {
            label: string;
            onClick: () => void;
        }[];
        type?: undefined;
        checked?: undefined;
        onClick?: undefined;
    } | {
        label: string;
        icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
            muiName: string;
        };
        subMenu: {
            label: string;
            onClick: () => void;
        }[];
        type?: undefined;
        checked?: undefined;
        onClick?: undefined;
        disabled?: undefined;
    } | {
        label: string;
        icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
            muiName: string;
        };
        onClick: () => void;
        type?: undefined;
        checked?: undefined;
        disabled?: undefined;
        subMenu?: undefined;
    } | {
        label: string;
        type: string;
        checked: any;
        onClick: () => void;
        icon?: undefined;
        disabled?: undefined;
        subMenu?: undefined;
    })[];
}, import("mobx-state-tree")._NotCustomized, {
    type: string;
    height: number;
    id: string;
    rpcDriverName: string | undefined;
    userBpPerPxLimit: number | undefined;
    userByteSizeLimit: number | undefined;
} & import("mobx-state-tree")._NotCustomized>;
export type LinearPileupDisplayStateModel = ReturnType<typeof stateModelFactory>;
export type LinearPileupDisplayModel = Instance<LinearPileupDisplayStateModel>;
export default stateModelFactory;

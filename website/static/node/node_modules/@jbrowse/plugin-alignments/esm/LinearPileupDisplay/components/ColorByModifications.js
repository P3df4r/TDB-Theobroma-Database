import React from 'react';
import { observer } from 'mobx-react';
import { Button, CircularProgress, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Typography, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import CloseIcon from '@mui/icons-material/Close';
const useStyles = makeStyles()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    table: {
        border: '1px solid #888',
        margin: theme.spacing(4),
        '& td': {
            padding: theme.spacing(1),
        },
    },
}));
function ModificationTable({ modifications, }) {
    const { classes } = useStyles();
    return (React.createElement("table", { className: classes.table },
        React.createElement("tbody", null, modifications.map(([key, value]) => (React.createElement("tr", { key: key },
            React.createElement("td", null, key),
            React.createElement("td", null, value),
            React.createElement("td", { style: {
                    width: '1em',
                    background: value,
                } })))))));
}
function ColorByTagDlg(props) {
    const { classes } = useStyles();
    const { model, handleClose } = props;
    const { colorBy, modificationTagMap } = model;
    const modifications = [...modificationTagMap.entries()];
    return (React.createElement(Dialog, { open: true, onClose: handleClose },
        React.createElement(DialogTitle, null,
            "Color by modifications",
            React.createElement(IconButton, { "aria-label": "close", className: classes.closeButton, onClick: handleClose },
                React.createElement(CloseIcon, null))),
        React.createElement(DialogContent, null,
            React.createElement(Typography, null, "You can choose to color the modifications in the BAM/CRAM MM/ML specification using this dialog. Choosing modifications colors the modified positions and can color multiple modification types. Choosing the methylation setting colors methylated and unmethylated CpG."),
            React.createElement(Typography, null, "Note: you can revisit this dialog to see the current mapping of colors to modification type for the modification coloring mode"),
            React.createElement("div", { style: { margin: 20 } },
                (colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) === 'modifications' ? (React.createElement("div", null, modifications.length ? (React.createElement(React.Fragment, null,
                    "Current modification-type-to-color mapping",
                    React.createElement(ModificationTable, { modifications: [...modificationTagMap.entries()] }))) : (React.createElement("div", null,
                    React.createElement(Typography, null, "Note: color by modifications is already enabled. Loading current modifications..."),
                    React.createElement(CircularProgress, { size: 15 }))))) : null,
                (colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) === 'methylation' ? (React.createElement(ModificationTable, { modifications: [
                        ['methylated', 'red'],
                        ['unmethylated', 'blue'],
                    ] })) : null),
            React.createElement(DialogActions, null,
                React.createElement(Button, { variant: "contained", color: "primary", style: { margin: 5 }, onClick: () => {
                        model.setColorScheme({
                            type: 'modifications',
                        });
                        handleClose();
                    } }, "Modifications"),
                React.createElement(Button, { variant: "contained", color: "primary", style: { margin: 5 }, onClick: () => {
                        model.setColorScheme({
                            type: 'methylation',
                        });
                        handleClose();
                    } }, "Methylation"),
                React.createElement(Button, { variant: "contained", color: "secondary", style: { margin: 5 }, onClick: () => handleClose() }, "Cancel")))));
}
export default observer(ColorByTagDlg);
//# sourceMappingURL=ColorByModifications.js.map
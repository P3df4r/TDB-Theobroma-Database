"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const configuration_1 = require("@jbrowse/core/configuration");
const util_1 = require("@jbrowse/core/util");
const ConfirmDialog = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./ConfirmDialog'))));
function default_1(pm) {
    pm.addToExtensionPoint('TrackSelector-multiTrackMenuItems', (items, props) => {
        const { session } = props;
        return [
            ...items,
            ...((0, util_1.isSessionWithAddTracks)(session)
                ? [
                    {
                        label: 'Create multi-wiggle track',
                        onClick: (model) => {
                            const tracks = model.selection;
                            const trackIds = tracks.map(c => (0, configuration_1.readConfObject)(c, 'name'));
                            function makeTrack(arg) {
                                const subadapters = tracks
                                    .map(c => (0, configuration_1.readConfObject)(c, 'adapter'))
                                    .map((c, idx) => ({ ...c, source: trackIds[idx] }));
                                const assemblyNames = [
                                    ...new Set(tracks
                                        .map(c => (0, configuration_1.readConfObject)(c, 'assemblyNames'))
                                        .flat()),
                                ];
                                const now = +Date.now();
                                const trackId = `multitrack-${now}-sessionTrack`;
                                (0, util_1.getSession)(model).addTrackConf({
                                    type: 'MultiQuantitativeTrack',
                                    trackId,
                                    name: arg.name,
                                    assemblyNames,
                                    adapter: {
                                        type: 'MultiWiggleAdapter',
                                        subadapters,
                                    },
                                });
                                model.view.showTrack(trackId);
                            }
                            (0, util_1.getSession)(model).queueDialog(handleClose => [
                                ConfirmDialog,
                                {
                                    tracks,
                                    onClose: (arg, arg1) => {
                                        if (arg && arg1) {
                                            makeTrack(arg1);
                                        }
                                        handleClose();
                                    },
                                },
                            ]);
                        },
                    },
                ]
                : []),
        ];
    });
}
exports.default = default_1;
//# sourceMappingURL=index.js.map
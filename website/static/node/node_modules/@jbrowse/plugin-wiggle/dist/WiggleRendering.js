"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const mobx_react_1 = require("mobx-react");
const react_1 = __importStar(require("react"));
const ui_1 = require("@jbrowse/core/ui");
function WiggleRendering(props) {
    const { regions, features, bpPerPx, width, height, onMouseLeave = () => { }, onMouseMove = () => { }, onFeatureClick = () => { }, } = props;
    const [region] = regions;
    const ref = (0, react_1.useRef)(null);
    function getFeatureUnderMouse(eventClientX) {
        // calculates feature under mouse
        let offset = 0;
        if (ref.current) {
            offset = ref.current.getBoundingClientRect().left;
        }
        const offsetX = eventClientX - offset;
        const px = region.reversed ? width - offsetX : offsetX;
        const clientBp = region.start + bpPerPx * px;
        let featureUnderMouse;
        for (const feature of features.values()) {
            // bpPerPx added to the end to accomodate "reduced features" (one feature per px)
            if (clientBp <= feature.get('end') + bpPerPx &&
                clientBp >= feature.get('start')) {
                featureUnderMouse = feature;
                break;
            }
        }
        return featureUnderMouse;
    }
    return (react_1.default.createElement("div", { ref: ref, "data-testid": "wiggle-rendering-test", onMouseMove: event => { var _a; return onMouseMove(event, (_a = getFeatureUnderMouse(event.clientX)) === null || _a === void 0 ? void 0 : _a.id()); }, onClick: event => { var _a; return onFeatureClick(event, (_a = getFeatureUnderMouse(event.clientX)) === null || _a === void 0 ? void 0 : _a.id()); }, onMouseLeave: event => onMouseLeave(event), style: {
            overflow: 'visible',
            position: 'relative',
            height,
        } },
        react_1.default.createElement(ui_1.PrerenderedCanvas, { ...props })));
}
exports.default = (0, mobx_react_1.observer)(WiggleRendering);
//# sourceMappingURL=WiggleRendering.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const WiggleBaseRenderer_1 = __importDefault(require("../WiggleBaseRenderer"));
const drawxy_1 = require("../drawxy");
class MultiXYPlotRenderer extends WiggleBaseRenderer_1.default {
    // @ts-ignore
    async draw(ctx, props) {
        const { bpPerPx, sources, regions, features } = props;
        const [region] = regions;
        const groups = (0, util_1.groupBy)([...features.values()], f => f.get('source'));
        const height = props.height / Object.keys(groups).length;
        const width = (region.end - region.start) / bpPerPx;
        let feats = [];
        ctx.save();
        sources.forEach(source => {
            const features = groups[source.name];
            if (!features) {
                return;
            }
            const { reducedFeatures } = (0, drawxy_1.drawDensity)(ctx, {
                ...props,
                features,
                height,
            });
            ctx.strokeStyle = 'rgba(200,200,200,0.8)';
            ctx.beginPath();
            ctx.moveTo(0, height);
            ctx.lineTo(width, height);
            ctx.stroke();
            ctx.translate(0, height);
            feats = feats.concat(reducedFeatures);
        });
        ctx.restore();
        return { reducedFeatures: feats };
    }
}
exports.default = MultiXYPlotRenderer;
//# sourceMappingURL=MultiDensityRenderer.js.map
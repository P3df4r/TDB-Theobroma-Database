"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.linearWiggleDisplayModelFactory = exports.WiggleBaseRenderer = exports.WiggleRendering = exports.Tooltip = exports.LinearWiggleDisplayReactComponent = void 0;
const Plugin_1 = __importDefault(require("@jbrowse/core/Plugin"));
const tracks_1 = require("@jbrowse/core/util/tracks");
// locals
const WiggleBaseRenderer_1 = __importDefault(require("./WiggleBaseRenderer"));
exports.WiggleBaseRenderer = WiggleBaseRenderer_1.default;
const WiggleRendering_1 = __importDefault(require("./WiggleRendering"));
exports.WiggleRendering = WiggleRendering_1.default;
const BigWigAdapter_1 = __importDefault(require("./BigWigAdapter"));
const QuantitativeTrack_1 = __importDefault(require("./QuantitativeTrack"));
const MultiQuantitativeTrack_1 = __importDefault(require("./MultiQuantitativeTrack"));
const MultiWiggleAdapter_1 = __importDefault(require("./MultiWiggleAdapter"));
const DensityRenderer_1 = __importDefault(require("./DensityRenderer"));
const XYPlotRenderer_1 = __importDefault(require("./XYPlotRenderer"));
const LinePlotRenderer_1 = __importDefault(require("./LinePlotRenderer"));
const LinearWiggleDisplay_1 = __importDefault(require("./LinearWiggleDisplay"));
const MultiLinearWiggleDisplay_1 = __importDefault(require("./MultiLinearWiggleDisplay"));
const MultiXYPlotRenderer_1 = __importDefault(require("./MultiXYPlotRenderer"));
const MultiRowXYPlotRenderer_1 = __importDefault(require("./MultiRowXYPlotRenderer"));
const MultiDensityRenderer_1 = __importDefault(require("./MultiDensityRenderer"));
const MultiLineRenderer_1 = __importDefault(require("./MultiLineRenderer"));
const MultiRowLineRenderer_1 = __importDefault(require("./MultiRowLineRenderer"));
const CreateMultiWiggleExtension_1 = __importDefault(require("./CreateMultiWiggleExtension"));
const MultiWiggleAddTrackWidget_1 = __importDefault(require("./MultiWiggleAddTrackWidget"));
const utils = __importStar(require("./util"));
const rpcMethods_1 = require("./WiggleRPC/rpcMethods");
const LinearWiggleDisplay_2 = require("./LinearWiggleDisplay");
Object.defineProperty(exports, "LinearWiggleDisplayReactComponent", { enumerable: true, get: function () { return LinearWiggleDisplay_2.ReactComponent; } });
Object.defineProperty(exports, "linearWiggleDisplayModelFactory", { enumerable: true, get: function () { return LinearWiggleDisplay_2.modelFactory; } });
Object.defineProperty(exports, "Tooltip", { enumerable: true, get: function () { return LinearWiggleDisplay_2.Tooltip; } });
const XYPlotRenderer_2 = require("./XYPlotRenderer");
class WigglePlugin extends Plugin_1.default {
    constructor() {
        super(...arguments);
        this.name = 'WigglePlugin';
        this.exports = {
            LinearWiggleDisplayReactComponent: LinearWiggleDisplay_2.ReactComponent,
            XYPlotRendererReactComponent: XYPlotRenderer_2.ReactComponent,
            XYPlotRenderer: XYPlotRenderer_2.XYPlotRenderer,
            WiggleBaseRenderer: WiggleBaseRenderer_1.default,
            xyPlotRendererConfigSchema: XYPlotRenderer_2.configSchema,
            utils,
            linearWiggleDisplayModelFactory: LinearWiggleDisplay_2.modelFactory,
        };
    }
    install(pm) {
        (0, MultiWiggleAdapter_1.default)(pm);
        (0, BigWigAdapter_1.default)(pm);
        (0, QuantitativeTrack_1.default)(pm);
        (0, MultiQuantitativeTrack_1.default)(pm);
        (0, LinearWiggleDisplay_1.default)(pm);
        (0, MultiLinearWiggleDisplay_1.default)(pm);
        (0, LinePlotRenderer_1.default)(pm);
        (0, XYPlotRenderer_1.default)(pm);
        (0, DensityRenderer_1.default)(pm);
        (0, MultiXYPlotRenderer_1.default)(pm);
        (0, MultiRowXYPlotRenderer_1.default)(pm);
        (0, MultiDensityRenderer_1.default)(pm);
        (0, MultiLineRenderer_1.default)(pm);
        (0, MultiRowLineRenderer_1.default)(pm);
        (0, MultiWiggleAddTrackWidget_1.default)(pm);
        (0, CreateMultiWiggleExtension_1.default)(pm);
        pm.addToExtensionPoint('Core-guessAdapterForLocation', (cb) => {
            return (file, index, hint) => {
                const regexGuess = /\.(bw|bigwig)$/i;
                const adapterName = 'BigWigAdapter';
                const fileName = (0, tracks_1.getFileName)(file);
                const obj = {
                    type: adapterName,
                    bigWigLocation: file,
                };
                if (regexGuess.test(fileName) && !hint) {
                    return obj;
                }
                else if (hint === adapterName) {
                    return obj;
                }
                return cb(file, index, hint);
            };
        });
        pm.addToExtensionPoint('Core-guessTrackTypeForLocation', (trackTypeGuesser) => {
            return (adapterName) => {
                if (adapterName === 'BigWigAdapter') {
                    return 'QuantitativeTrack';
                }
                return trackTypeGuesser(adapterName);
            };
        });
        pm.addRpcMethod(() => new rpcMethods_1.WiggleGetGlobalStats(pm));
        pm.addRpcMethod(() => new rpcMethods_1.WiggleGetMultiRegionStats(pm));
        pm.addRpcMethod(() => new rpcMethods_1.MultiWiggleGetSources(pm));
    }
}
exports.default = WigglePlugin;
__exportStar(require("./util"), exports);
//# sourceMappingURL=index.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bbi_1 = require("@gmod/bbi");
const BaseAdapter_1 = require("@jbrowse/core/data_adapters/BaseAdapter");
const io_1 = require("@jbrowse/core/util/io");
const util_1 = require("@jbrowse/core/util");
const rxjs_1 = require("@jbrowse/core/util/rxjs");
const stats_1 = require("@jbrowse/core/util/stats");
class BigWigAdapter extends BaseAdapter_1.BaseFeatureDataAdapter {
    async setupPre(opts) {
        const { statusCallback = () => { } } = opts || {};
        const bigwig = new bbi_1.BigWig({
            filehandle: (0, io_1.openLocation)(this.getConf('bigWigLocation'), this.pluginManager),
        });
        const header = await (0, util_1.updateStatus)('Downloading bigwig header', statusCallback, () => bigwig.getHeader(opts));
        return { bigwig, header };
    }
    async setup(opts) {
        if (!this.setupP) {
            this.setupP = this.setupPre(opts).catch(e => {
                this.setupP = undefined;
                throw e;
            });
        }
        return this.setupP;
    }
    async getRefNames(opts) {
        const { header } = await this.setup(opts);
        return Object.keys(header.refsByName);
    }
    async refIdToName(refId) {
        var _a;
        const { header } = await this.setup();
        return (_a = header.refsByNumber[refId]) === null || _a === void 0 ? void 0 : _a.name;
    }
    async getGlobalStats(opts) {
        const { header } = await this.setup(opts);
        return (0, stats_1.rectifyStats)(header.totalSummary);
    }
    getFeatures(region, opts = {}) {
        const { refName, start, end } = region;
        const { bpPerPx = 0, signal, resolution = 1, statusCallback = () => { }, } = opts;
        return (0, rxjs_1.ObservableCreate)(async (observer) => {
            statusCallback('Downloading bigwig data');
            const source = this.getConf('source');
            const { bigwig } = await this.setup(opts);
            const feats = await bigwig.getFeatures(refName, start, end, {
                ...opts,
                basesPerSpan: bpPerPx / resolution,
            });
            for (let i = 0; i < feats.length; i++) {
                const data = feats[i];
                if (source) {
                    // @ts-ignore
                    data.source = source;
                }
                const uniqueId = `${source}:${region.refName}:${data.start}-${data.end}`;
                // @ts-ignore
                data.refName = refName;
                data.uniqueId = uniqueId;
                observer.next({
                    // @ts-ignore
                    get: (str) => data[str],
                    id: () => uniqueId,
                    // @ts-ignore
                    toJSON: () => data,
                });
            }
            observer.complete();
        }, signal);
    }
    // always render bigwig instead of calculating a feature density for it
    async estimateRegionsStats(_regions) {
        return { featureDensity: 0 };
    }
    freeResources() { }
}
exports.default = BigWigAdapter;
BigWigAdapter.capabilities = [
    'hasResolution',
    'hasLocalStats',
    'hasGlobalStats',
];
//# sourceMappingURL=BigWigAdapter.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = require("@jbrowse/core/configuration");
const drawxy_1 = require("../drawxy");
const WiggleBaseRenderer_1 = __importDefault(require("../WiggleBaseRenderer"));
const util_1 = require("../util");
class XYPlotRenderer extends WiggleBaseRenderer_1.default {
    async draw(ctx, props) {
        const { features, config } = props;
        // the adjusted height takes into account YSCALEBAR_LABEL_OFFSET from the
        // wiggle display, and makes the height of the actual drawn area add
        // "padding" to the top and bottom of the display
        const pivotValue = (0, configuration_1.readConfObject)(config, 'bicolorPivotValue');
        const negColor = (0, configuration_1.readConfObject)(config, 'negColor');
        const posColor = (0, configuration_1.readConfObject)(config, 'posColor');
        const Color = await Promise.resolve().then(() => __importStar(require('color'))).then(f => f.default);
        return (0, drawxy_1.drawXY)(ctx, {
            ...props,
            colorCallback: (0, configuration_1.readConfObject)(config, 'color') === '#f0f'
                ? (_, score) => score < pivotValue ? negColor : posColor
                : (feature, _score) => (0, configuration_1.readConfObject)(config, 'color', { feature }),
            offset: util_1.YSCALEBAR_LABEL_OFFSET,
            features: [...features.values()],
            Color,
        });
    }
}
exports.default = XYPlotRenderer;
//# sourceMappingURL=XYPlotRenderer.js.map
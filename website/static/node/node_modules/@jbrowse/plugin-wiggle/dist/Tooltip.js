"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
// locals
const util_1 = require("./util");
const react_popper_1 = require("react-popper");
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    // these styles come from
    // https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Tooltip/Tooltip.js
    tooltip: {
        position: 'absolute',
        pointerEvents: 'none',
        backgroundColor: (0, material_1.alpha)(theme.palette.grey[700], 0.9),
        borderRadius: theme.shape.borderRadius,
        color: theme.palette.common.white,
        fontFamily: theme.typography.fontFamily,
        padding: '4px 8px',
        fontSize: theme.typography.pxToRem(12),
        lineHeight: `${(0, util_1.round)(14 / 10)}em`,
        maxWidth: 300,
        wordWrap: 'break-word',
    },
    hoverVertical: {
        background: '#333',
        border: 'none',
        width: 1,
        height: '100%',
        top: util_1.YSCALEBAR_LABEL_OFFSET,
        cursor: 'default',
        position: 'absolute',
        pointerEvents: 'none',
    },
}));
function Tooltip({ model, height, clientMouseCoord, offsetMouseCoord, clientRect, TooltipContents, useClientY, }) {
    const { featureUnderMouse } = model;
    const [width, setWidth] = (0, react_1.useState)(0);
    const [anchorEl, setAnchorEl] = (0, react_1.useState)(null);
    const { classes } = useStyles();
    // must be memoized a la https://github.com/popperjs/react-popper/issues/391
    const virtElement = (0, react_1.useMemo)(() => ({
        getBoundingClientRect: () => {
            const x = clientMouseCoord[0] + width / 2 + 20;
            const y = useClientY ? clientMouseCoord[1] : (clientRect === null || clientRect === void 0 ? void 0 : clientRect.top) || 0;
            return {
                top: y,
                left: x,
                bottom: y,
                right: x,
                width: 0,
                height: 0,
                x,
                y,
                toJSON() { },
            };
        },
    }), [clientRect === null || clientRect === void 0 ? void 0 : clientRect.top, clientMouseCoord, width, useClientY]);
    const { styles, attributes } = (0, react_popper_1.usePopper)(virtElement, anchorEl);
    return featureUnderMouse ? (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(material_1.Portal, null,
            react_1.default.createElement("div", { ref: setAnchorEl, className: classes.tooltip, 
                // zIndex needed to go over widget drawer
                style: { ...styles.popper, zIndex: 100000 }, ...attributes.popper },
                react_1.default.createElement(TooltipContents, { ref: elt => setWidth((elt === null || elt === void 0 ? void 0 : elt.getBoundingClientRect().width) || 0), model: model, feature: featureUnderMouse }))),
        react_1.default.createElement("div", { className: classes.hoverVertical, style: {
                left: offsetMouseCoord[0],
                height: height - util_1.YSCALEBAR_LABEL_OFFSET * 2,
            } }))) : null;
}
exports.default = (0, mobx_react_1.observer)(Tooltip);
//# sourceMappingURL=Tooltip.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const util_1 = require("@jbrowse/core/util");
const tracks_1 = require("@jbrowse/core/util/tracks");
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    textbox: {
        width: '100%',
    },
    paper: {
        margin: theme.spacing(),
        padding: theme.spacing(),
    },
    submit: {
        marginTop: 25,
        marginBottom: 100,
        display: 'block',
    },
}));
function MultiWiggleWidget({ model }) {
    const { classes } = useStyles();
    const [val, setVal] = (0, react_1.useState)('');
    const [trackName, setTrackName] = (0, react_1.useState)('MultiWiggle ' + Date.now());
    return (react_1.default.createElement(material_1.Paper, { className: classes.paper },
        react_1.default.createElement("ul", null,
            react_1.default.createElement("li", null, "Enter list of URLs for bigwig files in the textbox"),
            react_1.default.createElement("li", null, "Or, use the button below the text box to select files from your computer")),
        react_1.default.createElement(material_1.TextField, { multiline: true, rows: 10, value: val, onChange: event => setVal(event.target.value), placeholder: 'Paste list of URLs here, or use file selector below', variant: "outlined", className: classes.textbox }),
        react_1.default.createElement(material_1.Button, { variant: "outlined", component: "label" },
            "Choose Files from your computer",
            react_1.default.createElement("input", { type: "file", hidden: true, multiple: true, onChange: ({ target }) => {
                    const res = Array.from((target === null || target === void 0 ? void 0 : target.files) || []).map(file => ({
                        type: 'BigWigAdapter',
                        bigWigLocation: util_1.isElectron
                            ? {
                                localPath: file.path,
                                locationType: 'LocalPathLocation',
                            }
                            : (0, tracks_1.storeBlobLocation)({ blob: file }),
                        source: file.name,
                    }));
                    setVal(JSON.stringify(res, null, 2));
                } })),
        react_1.default.createElement(material_1.TextField, { value: trackName, onChange: event => setTrackName(event.target.value), helperText: "Track name" }),
        react_1.default.createElement(material_1.Button, { variant: "contained", className: classes.submit, onClick: () => {
                var _a;
                const session = (0, util_1.getSession)(model);
                const trackId = [
                    `${trackName.toLowerCase().replace(/ /g, '_')}-${Date.now()}`,
                    `${session.adminMode ? '' : '-sessionTrack'}`,
                ].join('');
                // allow list of bigwigs in JSON format or line-by-line
                let bigWigs;
                try {
                    bigWigs = JSON.parse(val);
                }
                catch (e) {
                    bigWigs = val.split(/\n|\r\n|\r/);
                }
                const obj = typeof bigWigs[0] === 'string'
                    ? { bigWigs }
                    : { subadapters: bigWigs };
                session.addTrackConf({
                    trackId,
                    type: 'MultiQuantitativeTrack',
                    name: trackName,
                    assemblyNames: [model.assembly],
                    adapter: {
                        type: 'MultiWiggleAdapter',
                        ...obj,
                    },
                });
                (_a = model.view) === null || _a === void 0 ? void 0 : _a.showTrack(trackId);
                model.clearData();
                session.hideWidget(model);
            } }, "Submit"),
        react_1.default.createElement("p", null, "Additional notes: "),
        react_1.default.createElement("ul", null,
            react_1.default.createElement("li", null,
                "The list of bigwig files in the text box can be a list of URLs, or a list of elements like",
                ' ',
                react_1.default.createElement("code", null, `[{"type":"BigWigAdapter","bigWigLocation":{"uri":"http://host/file.bw"}, "color":"green","source":"name for subtrack"}]`),
                ' ',
                "to apply e.g. the color attribute to the view"),
            react_1.default.createElement("li", null, "Adding local files will update the textbox with JSON contents that are ready to submit with the \"Submit\" button"))));
}
exports.default = MultiWiggleWidget;
//# sourceMappingURL=AddTrackWorkflow.js.map
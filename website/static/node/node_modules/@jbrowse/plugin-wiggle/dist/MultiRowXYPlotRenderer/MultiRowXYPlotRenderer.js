"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const drawxy_1 = require("../drawxy");
const WiggleBaseRenderer_1 = __importDefault(require("../WiggleBaseRenderer"));
class MultiXYPlotRenderer extends WiggleBaseRenderer_1.default {
    // @ts-ignore
    async draw(ctx, props) {
        const { bpPerPx, sources, regions, features } = props;
        const [region] = regions;
        const groups = (0, util_1.groupBy)([...features.values()], f => f.get('source'));
        const height = props.height / Object.keys(groups).length;
        const width = (region.end - region.start) / bpPerPx;
        const Color = await Promise.resolve().then(() => __importStar(require('color'))).then(f => f.default);
        let feats = [];
        ctx.save();
        sources.forEach(source => {
            const features = groups[source.name];
            if (!features) {
                return;
            }
            const { reducedFeatures } = (0, drawxy_1.drawXY)(ctx, {
                ...props,
                features,
                height,
                colorCallback: () => source.color || 'blue',
                Color,
            });
            ctx.strokeStyle = 'rgba(200,200,200,0.8)';
            ctx.beginPath();
            ctx.moveTo(0, height);
            ctx.lineTo(width, height);
            ctx.stroke();
            ctx.translate(0, height);
            feats = feats.concat(reducedFeatures);
        });
        ctx.restore();
        return { reducedFeatures: feats };
    }
}
exports.default = MultiXYPlotRenderer;
//# sourceMappingURL=MultiRowXYPlotRenderer.js.map
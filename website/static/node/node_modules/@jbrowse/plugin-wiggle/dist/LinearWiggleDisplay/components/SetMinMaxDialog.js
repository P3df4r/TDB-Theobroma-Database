"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    root: {},
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
}));
function SetMinMaxDlg(props) {
    const { classes } = useStyles();
    const { model, handleClose } = props;
    const { minScore, maxScore, scaleType } = model;
    const [min, setMin] = (0, react_1.useState)(`${minScore !== Number.MIN_VALUE ? minScore : ''}`);
    const [max, setMax] = (0, react_1.useState)(`${maxScore !== Number.MAX_VALUE ? maxScore : ''}`);
    const ok = min !== '' && max !== '' && !Number.isNaN(+min) && !Number.isNaN(+max)
        ? +max > +min
        : true;
    const logOk = scaleType === 'log' && min !== '' && !Number.isNaN(+min) ? +min > 0 : true;
    return (react_1.default.createElement(material_1.Dialog, { open: true, onClose: handleClose },
        react_1.default.createElement(material_1.DialogTitle, null,
            "Set min/max score for track",
            react_1.default.createElement(material_1.IconButton, { className: classes.closeButton, onClick: handleClose },
                react_1.default.createElement(Close_1.default, null))),
        react_1.default.createElement(material_1.DialogContent, { style: { overflowX: 'hidden' } },
            react_1.default.createElement("div", { className: classes.root },
                react_1.default.createElement(material_1.Typography, null, "Enter min/max score: "),
                !ok ? (react_1.default.createElement(material_1.Typography, { color: "error" }, "Max is greater than or equal to min")) : null,
                !logOk ? (react_1.default.createElement(material_1.Typography, { color: "error" }, "Min score should be greater than 0 for log scale")) : null,
                react_1.default.createElement(material_1.TextField, { value: min, onChange: event => {
                        setMin(event.target.value);
                    }, placeholder: "Enter min score" }),
                react_1.default.createElement(material_1.TextField, { value: max, onChange: event => {
                        setMax(event.target.value);
                    }, placeholder: "Enter max score" }),
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "primary", type: "submit", style: { marginLeft: 20 }, disabled: !ok, onClick: () => {
                        model.setMinScore(min !== '' && !Number.isNaN(+min) ? +min : undefined);
                        model.setMaxScore(max !== '' && !Number.isNaN(+max) ? +max : undefined);
                        handleClose();
                    } }, "Submit")))));
}
exports.default = SetMinMaxDlg;
//# sourceMappingURL=SetMinMaxDialog.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiWiggleGetSources = exports.WiggleGetMultiRegionStats = exports.WiggleGetGlobalStats = void 0;
const RpcMethodType_1 = __importDefault(require("@jbrowse/core/pluggableElementTypes/RpcMethodType"));
const serializableFilterChain_1 = __importDefault(require("@jbrowse/core/pluggableElementTypes/renderers/util/serializableFilterChain"));
const dataAdapterCache_1 = require("@jbrowse/core/data_adapters/dataAdapterCache");
const util_1 = require("@jbrowse/core/util");
const BaseAdapter_1 = require("@jbrowse/core/data_adapters/BaseAdapter");
class WiggleGetGlobalStats extends RpcMethodType_1.default {
    constructor() {
        super(...arguments);
        this.name = 'WiggleGetGlobalStats';
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async deserializeArguments(args, rpcDriverClassName) {
        const l = await super.deserializeArguments(args, rpcDriverClassName);
        return {
            ...l,
            filters: args.filters
                ? new serializableFilterChain_1.default({
                    filters: args.filters,
                })
                : undefined,
        };
    }
    async execute(args, rpcDriverClassName) {
        const pm = this.pluginManager;
        const deserializedArgs = await this.deserializeArguments(args, rpcDriverClassName);
        const { adapterConfig, sessionId } = deserializedArgs;
        const { dataAdapter } = await (0, dataAdapterCache_1.getAdapter)(pm, sessionId, adapterConfig);
        // @ts-ignore
        return dataAdapter.getGlobalStats(deserializedArgs);
    }
}
exports.WiggleGetGlobalStats = WiggleGetGlobalStats;
class WiggleGetMultiRegionStats extends RpcMethodType_1.default {
    constructor() {
        super(...arguments);
        this.name = 'WiggleGetMultiRegionStats';
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async deserializeArguments(args, rpcDriverClassName) {
        const l = await super.deserializeArguments(args, rpcDriverClassName);
        return {
            ...l,
            filters: args.filters
                ? new serializableFilterChain_1.default({
                    filters: args.filters,
                })
                : undefined,
        };
    }
    async serializeArguments(args, rpcDriverClassName) {
        var _a, _b, _c;
        const pm = this.pluginManager;
        const assemblyManager = (_b = (_a = pm.rootModel) === null || _a === void 0 ? void 0 : _a.session) === null || _b === void 0 ? void 0 : _b.assemblyManager;
        if (!assemblyManager) {
            return args;
        }
        const renamedArgs = await (0, util_1.renameRegionsIfNeeded)(assemblyManager, {
            ...args,
            filters: (_c = args.filters) === null || _c === void 0 ? void 0 : _c.toJSON().filters,
        });
        return super.serializeArguments(renamedArgs, rpcDriverClassName);
    }
    async execute(args, rpcDriverClassName) {
        const pm = this.pluginManager;
        const deserializedArgs = await this.deserializeArguments(args, rpcDriverClassName);
        const { regions, adapterConfig, sessionId } = deserializedArgs;
        const { dataAdapter } = await (0, dataAdapterCache_1.getAdapter)(pm, sessionId, adapterConfig);
        if (dataAdapter instanceof BaseAdapter_1.BaseFeatureDataAdapter) {
            return dataAdapter.getMultiRegionStats(regions, deserializedArgs);
        }
        throw new Error('Data adapter not found');
    }
}
exports.WiggleGetMultiRegionStats = WiggleGetMultiRegionStats;
class MultiWiggleGetSources extends RpcMethodType_1.default {
    constructor() {
        super(...arguments);
        this.name = 'MultiWiggleGetSources';
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async deserializeArguments(args, rpcDriverClassName) {
        const l = await super.deserializeArguments(args, rpcDriverClassName);
        return {
            ...l,
            filters: args.filters
                ? new serializableFilterChain_1.default({
                    filters: args.filters,
                })
                : undefined,
        };
    }
    async serializeArguments(args, rpcDriverClassName) {
        var _a, _b, _c;
        const pm = this.pluginManager;
        const assemblyManager = (_b = (_a = pm.rootModel) === null || _a === void 0 ? void 0 : _a.session) === null || _b === void 0 ? void 0 : _b.assemblyManager;
        if (!assemblyManager) {
            return args;
        }
        const renamedArgs = await (0, util_1.renameRegionsIfNeeded)(assemblyManager, {
            ...args,
            filters: (_c = args.filters) === null || _c === void 0 ? void 0 : _c.toJSON().filters,
        });
        return super.serializeArguments(renamedArgs, rpcDriverClassName);
    }
    async execute(args, rpcDriverClassName) {
        const pm = this.pluginManager;
        const deserializedArgs = await this.deserializeArguments(args, rpcDriverClassName);
        const { regions, adapterConfig, sessionId } = deserializedArgs;
        const { dataAdapter } = await (0, dataAdapterCache_1.getAdapter)(pm, sessionId, adapterConfig);
        // @ts-ignore
        return dataAdapter.getSources(regions, deserializedArgs);
    }
}
exports.MultiWiggleGetSources = MultiWiggleGetSources;
//# sourceMappingURL=rpcMethods.js.map
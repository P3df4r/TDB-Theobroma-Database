"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_1 = require("@jbrowse/core/configuration");
const plugin_linear_genome_view_1 = require("@jbrowse/plugin-linear-genome-view");
const mobx_state_tree_1 = require("mobx-state-tree");
/**
 * #config MultiLinearWiggleDisplay
 */
function x() { } // eslint-disable-line @typescript-eslint/no-unused-vars
function WiggleConfigFactory(pluginManager) {
    const MultiXYPlotRendererConfigSchema = pluginManager.getRendererType('MultiXYPlotRenderer').configSchema;
    const MultiDensityRendererConfigSchema = pluginManager.getRendererType('MultiDensityRenderer').configSchema;
    const MultiRowXYPlotRendererConfigSchema = pluginManager.getRendererType('MultiRowXYPlotRenderer').configSchema;
    const MultiLineRendererConfigSchema = pluginManager.getRendererType('MultiLineRenderer').configSchema;
    const MultiRowLineRendererConfigSchema = pluginManager.getRendererType('MultiRowLineRenderer').configSchema;
    return (0, configuration_1.ConfigurationSchema)('MultiLinearWiggleDisplay', {
        /**
         * #slot
         */
        autoscale: {
            type: 'stringEnum',
            defaultValue: 'local',
            model: mobx_state_tree_1.types.enumeration('Autoscale type', [
                'global',
                'local',
                'globalsd',
                'localsd',
                'zscore',
            ]),
            description: 'global/local using their min/max values or w/ standard deviations (globalsd/localsd)',
        },
        /**
         * #slot
         */
        minimalTicks: {
            type: 'boolean',
            defaultValue: false,
            description: 'use the minimal amount of ticks',
        },
        /**
         * #slot
         */
        minScore: {
            type: 'number',
            defaultValue: Number.MIN_VALUE,
            description: 'minimum value for the y-scale',
        },
        /**
         * #slot
         */
        maxScore: {
            type: 'number',
            description: 'maximum value for the y-scale',
            defaultValue: Number.MAX_VALUE,
        },
        /**
         * #slot
         */
        numStdDev: {
            type: 'number',
            description: 'number of standard deviations to use for autoscale types globalsd or localsd',
            defaultValue: 3,
        },
        /**
         * #slot
         */
        scaleType: {
            type: 'stringEnum',
            model: mobx_state_tree_1.types.enumeration('Scale type', ['linear', 'log']),
            description: 'The type of scale to use',
            defaultValue: 'linear',
        },
        /**
         * #slot
         */
        inverted: {
            type: 'boolean',
            description: 'draw upside down',
            defaultValue: false,
        },
        /**
         * #slot
         */
        defaultRendering: {
            type: 'stringEnum',
            model: mobx_state_tree_1.types.enumeration('Rendering', [
                'multirowxy',
                'xyplot',
                'multirowdensity',
                'multiline',
                'multirowline',
            ]),
            defaultValue: 'multirowxy',
        },
        /**
         * #slot
         */
        renderers: (0, configuration_1.ConfigurationSchema)('RenderersConfiguration', {
            MultiXYPlotRenderer: MultiXYPlotRendererConfigSchema,
            MultiDensityRenderer: MultiDensityRendererConfigSchema,
            MultiRowXYPlotRenderer: MultiRowXYPlotRendererConfigSchema,
            MultiLineRenderer: MultiLineRendererConfigSchema,
            MultiRowLineRenderer: MultiRowLineRendererConfigSchema,
        }),
    }, {
        /**
         * #baseConfiguration
         */
        baseConfiguration: plugin_linear_genome_view_1.baseLinearDisplayConfigSchema,
        explicitlyTyped: true,
    });
}
exports.default = WiggleConfigFactory;
//# sourceMappingURL=configSchema.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const util_1 = require("@jbrowse/core/util");
const x_data_grid_1 = require("@mui/x-data-grid");
const react_draggable_1 = __importDefault(require("react-draggable"));
const clone_1 = __importDefault(require("clone"));
// locals
const ColorPicker_1 = __importStar(require("@jbrowse/core/ui/ColorPicker"));
const BaseFeatureDetail_1 = require("@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail");
const util_2 = require("./util");
// icons
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const KeyboardDoubleArrowUp_1 = __importDefault(require("@mui/icons-material/KeyboardDoubleArrowUp"));
const KeyboardDoubleArrowDown_1 = __importDefault(require("@mui/icons-material/KeyboardDoubleArrowDown"));
const KeyboardArrowDown_1 = __importDefault(require("@mui/icons-material/KeyboardArrowDown"));
const KeyboardArrowUp_1 = __importDefault(require("@mui/icons-material/KeyboardArrowUp"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    content: {
        minWidth: 800,
    },
}));
// draggable dialog demo https://mui.com/material-ui/react-dialog/#draggable-dialog
function PaperComponent(props) {
    return (react_1.default.createElement(react_draggable_1.default, { handle: "#draggable-dialog-title", cancel: '[class*="MuiDialogContent-root"]' },
        react_1.default.createElement(material_1.Paper, { ...props })));
}
function SetColorDialog({ model, handleClose, }) {
    const { classes } = useStyles();
    const { sources } = model;
    const [currLayout, setCurrLayout] = (0, react_1.useState)((0, clone_1.default)(sources || []));
    const [showTips, setShowTips] = (0, util_1.useLocalStorage)('multiwiggle-showTips', true);
    return (react_1.default.createElement(material_1.Dialog, { PaperComponent: PaperComponent, open: true, onClose: handleClose, maxWidth: "xl", "aria-labelledby": "draggable-dialog-title" // this area is important for the draggable functionality
     },
        react_1.default.createElement(material_1.DialogTitle, { style: { cursor: 'move' }, id: "draggable-dialog-title" },
            "Multi-wiggle color/arrangement editor",
            ' ',
            react_1.default.createElement(material_1.IconButton, { className: classes.closeButton, onClick: handleClose },
                react_1.default.createElement(Close_1.default, null))),
        react_1.default.createElement(material_1.DialogContent, { className: classes.content },
            react_1.default.createElement(material_1.Button, { variant: "contained", style: { float: 'right' }, onClick: () => setShowTips(!showTips) }, showTips ? 'Hide tips' : 'Show tips'),
            react_1.default.createElement("br", null),
            showTips ? (react_1.default.createElement(react_1.default.Fragment, null,
                "Helpful tips",
                react_1.default.createElement("ul", null,
                    react_1.default.createElement("li", null, "You can select rows in the table with the checkboxes"),
                    react_1.default.createElement("li", null, "Multi-select is enabled with shift-click and control-click"),
                    react_1.default.createElement("li", null, "The \"Move selected items up/down\" can re-arrange subtracks"),
                    react_1.default.createElement("li", null, "Sorting the data grid itself can also re-arrange subtracks"),
                    react_1.default.createElement("li", null, "Changes are applied when you hit Submit"),
                    react_1.default.createElement("li", null, "You can click and drag the dialog box to move it on the screen"),
                    react_1.default.createElement("li", null, "Columns in the table can be hidden using a vertical '...' menu on the right side of each column")))) : null,
            react_1.default.createElement(SourcesGrid, { rows: currLayout, onChange: setCurrLayout, showTips: showTips })),
        react_1.default.createElement(material_1.DialogActions, null,
            react_1.default.createElement(material_1.Button, { variant: "contained", type: "submit", color: "inherit", onClick: () => {
                    model.clearLayout();
                    setCurrLayout(model.sources || []);
                } }, "Clear custom settings"),
            react_1.default.createElement(material_1.Button, { variant: "contained", color: "secondary", onClick: () => {
                    handleClose();
                    setCurrLayout([...(model.sources || [])]);
                } }, "Cancel"),
            react_1.default.createElement(material_1.Button, { variant: "contained", color: "primary", type: "submit", onClick: () => {
                    model.setLayout(currLayout);
                    handleClose();
                } }, "Submit"))));
}
exports.default = SetColorDialog;
function SourcesGrid({ rows, onChange, showTips, }) {
    const [anchorEl, setAnchorEl] = (0, react_1.useState)(null);
    const [selected, setSelected] = (0, react_1.useState)([]);
    // @ts-ignore
    const { name: _name, color: _color, baseUri: _baseUri, ...rest } = rows[0];
    // similar to BaseFeatureDetail data-grid for auto-measuring columns
    const columns = [
        {
            field: 'color',
            headerName: 'Color',
            renderCell: (params) => {
                const { value, id } = params;
                return (react_1.default.createElement(ColorPicker_1.default, { color: value || 'blue', onChange: c => {
                        const elt = rows.find(f => f.name === id);
                        if (elt) {
                            elt.color = c;
                        }
                        onChange([...rows]);
                    } }));
            },
        },
        {
            field: 'name',
            sortingOrder: [null],
            headerName: 'Name',
            width: (0, util_1.measureGridWidth)(rows.map(r => r.name)),
        },
        ...Object.keys(rest).map(val => ({
            field: val,
            sortingOrder: [null],
            renderCell: (params) => {
                const { value } = params;
                return (0, util_1.isUriLocation)(value) ? react_1.default.createElement(BaseFeatureDetail_1.UriLink, { value: value }) : (0, util_1.getStr)(value);
            },
            // @ts-ignore
            width: (0, util_1.measureGridWidth)(rows.map(r => r[val])),
        })),
    ];
    // this helps keep track of the selection, even though it is not used
    // anywhere except inside the picker
    const [widgetColor, setWidgetColor] = (0, react_1.useState)('blue');
    const [currSort, setCurrSort] = (0, react_1.useState)({ idx: 0, field: null });
    return (react_1.default.createElement("div", null,
        react_1.default.createElement(material_1.Button, { disabled: !selected.length, onClick: event => setAnchorEl(event.currentTarget) }, "Change color of selected items"),
        react_1.default.createElement(material_1.Button, { onClick: () => onChange((0, util_2.moveUp)([...rows], selected)), disabled: !selected.length },
            react_1.default.createElement(KeyboardArrowUp_1.default, null),
            showTips ? 'Move selected items up' : null),
        react_1.default.createElement(material_1.Button, { onClick: () => onChange((0, util_2.moveDown)([...rows], selected)), disabled: !selected.length },
            react_1.default.createElement(KeyboardArrowDown_1.default, null),
            showTips ? 'Move selected items down' : null),
        react_1.default.createElement(material_1.Button, { onClick: () => onChange((0, util_2.moveUp)([...rows], selected, rows.length)), disabled: !selected.length },
            react_1.default.createElement(KeyboardDoubleArrowUp_1.default, null),
            showTips ? 'Move selected items to top' : null),
        react_1.default.createElement(material_1.Button, { onClick: () => onChange((0, util_2.moveDown)([...rows], selected, rows.length)), disabled: !selected.length },
            react_1.default.createElement(KeyboardDoubleArrowDown_1.default, null),
            showTips ? 'Move selected items to bottom' : null),
        react_1.default.createElement(ColorPicker_1.ColorPopover, { anchorEl: anchorEl, color: widgetColor, onChange: c => {
                setWidgetColor(c);
                selected.forEach(id => {
                    const elt = rows.find(f => f.name === id);
                    if (elt) {
                        elt.color = c;
                    }
                });
                onChange([...rows]);
            }, onClose: () => setAnchorEl(null) }),
        react_1.default.createElement("div", { style: { height: 400, width: '100%' } },
            react_1.default.createElement(x_data_grid_1.DataGrid, { getRowId: row => row.name, checkboxSelection: true, disableSelectionOnClick: true, onSelectionModelChange: arg => setSelected(arg), rows: rows, rowHeight: 25, headerHeight: 33, columns: columns, sortModel: [
                /* we control the sort as a controlled component using onSortModelChange */
                ], onSortModelChange: args => {
                    const sort = args[0];
                    const idx = (currSort.idx + 1) % 2;
                    const field = (sort === null || sort === void 0 ? void 0 : sort.field) || currSort.field;
                    setCurrSort({ idx, field });
                    onChange(field
                        ? [...rows].sort((a, b) => {
                            // @ts-ignore
                            const aa = (0, util_1.getStr)(a[field]);
                            // @ts-ignore
                            const bb = (0, util_1.getStr)(b[field]);
                            return idx === 1
                                ? aa.localeCompare(bb)
                                : bb.localeCompare(aa);
                        })
                        : rows);
                } }))));
}
//# sourceMappingURL=SetColorDialog.js.map
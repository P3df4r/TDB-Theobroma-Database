import React, { useState } from 'react';
import { Button, Dialog, DialogContent, DialogTitle, IconButton, TextField, Typography, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import CloseIcon from '@mui/icons-material/Close';
const useStyles = makeStyles()(theme => ({
    root: {},
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
}));
export default function SetMinMaxDlg(props) {
    const { classes } = useStyles();
    const { model, handleClose } = props;
    const { minScore, maxScore, scaleType } = model;
    const [min, setMin] = useState(`${minScore !== Number.MIN_VALUE ? minScore : ''}`);
    const [max, setMax] = useState(`${maxScore !== Number.MAX_VALUE ? maxScore : ''}`);
    const ok = min !== '' && max !== '' && !Number.isNaN(+min) && !Number.isNaN(+max)
        ? +max > +min
        : true;
    const logOk = scaleType === 'log' && min !== '' && !Number.isNaN(+min) ? +min > 0 : true;
    return (React.createElement(Dialog, { open: true, onClose: handleClose },
        React.createElement(DialogTitle, null,
            "Set min/max score for track",
            React.createElement(IconButton, { className: classes.closeButton, onClick: handleClose },
                React.createElement(CloseIcon, null))),
        React.createElement(DialogContent, { style: { overflowX: 'hidden' } },
            React.createElement("div", { className: classes.root },
                React.createElement(Typography, null, "Enter min/max score: "),
                !ok ? (React.createElement(Typography, { color: "error" }, "Max is greater than or equal to min")) : null,
                !logOk ? (React.createElement(Typography, { color: "error" }, "Min score should be greater than 0 for log scale")) : null,
                React.createElement(TextField, { value: min, onChange: event => {
                        setMin(event.target.value);
                    }, placeholder: "Enter min score" }),
                React.createElement(TextField, { value: max, onChange: event => {
                        setMax(event.target.value);
                    }, placeholder: "Enter max score" }),
                React.createElement(Button, { variant: "contained", color: "primary", type: "submit", style: { marginLeft: 20 }, disabled: !ok, onClick: () => {
                        model.setMinScore(min !== '' && !Number.isNaN(+min) ? +min : undefined);
                        model.setMaxScore(max !== '' && !Number.isNaN(+max) ? +max : undefined);
                        handleClose();
                    } }, "Submit")))));
}
//# sourceMappingURL=SetMinMaxDialog.js.map
import React, { useState } from 'react';
import { Button, Dialog, DialogContent, DialogActions, DialogTitle, IconButton, Paper, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { getStr, isUriLocation, measureGridWidth, useLocalStorage, } from '@jbrowse/core/util';
import { DataGrid } from '@mui/x-data-grid';
import Draggable from 'react-draggable';
import clone from 'clone';
// locals
import ColorPicker, { ColorPopover } from '@jbrowse/core/ui/ColorPicker';
import { UriLink } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail';
import { moveUp, moveDown } from './util';
// icons
import CloseIcon from '@mui/icons-material/Close';
import KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp';
import KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown';
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';
import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';
const useStyles = makeStyles()(theme => ({
    closeButton: {
        position: 'absolute',
        right: theme.spacing(1),
        top: theme.spacing(1),
        color: theme.palette.grey[500],
    },
    content: {
        minWidth: 800,
    },
}));
// draggable dialog demo https://mui.com/material-ui/react-dialog/#draggable-dialog
function PaperComponent(props) {
    return (React.createElement(Draggable, { handle: "#draggable-dialog-title", cancel: '[class*="MuiDialogContent-root"]' },
        React.createElement(Paper, { ...props })));
}
export default function SetColorDialog({ model, handleClose, }) {
    const { classes } = useStyles();
    const { sources } = model;
    const [currLayout, setCurrLayout] = useState(clone(sources || []));
    const [showTips, setShowTips] = useLocalStorage('multiwiggle-showTips', true);
    return (React.createElement(Dialog, { PaperComponent: PaperComponent, open: true, onClose: handleClose, maxWidth: "xl", "aria-labelledby": "draggable-dialog-title" // this area is important for the draggable functionality
     },
        React.createElement(DialogTitle, { style: { cursor: 'move' }, id: "draggable-dialog-title" },
            "Multi-wiggle color/arrangement editor",
            ' ',
            React.createElement(IconButton, { className: classes.closeButton, onClick: handleClose },
                React.createElement(CloseIcon, null))),
        React.createElement(DialogContent, { className: classes.content },
            React.createElement(Button, { variant: "contained", style: { float: 'right' }, onClick: () => setShowTips(!showTips) }, showTips ? 'Hide tips' : 'Show tips'),
            React.createElement("br", null),
            showTips ? (React.createElement(React.Fragment, null,
                "Helpful tips",
                React.createElement("ul", null,
                    React.createElement("li", null, "You can select rows in the table with the checkboxes"),
                    React.createElement("li", null, "Multi-select is enabled with shift-click and control-click"),
                    React.createElement("li", null, "The \"Move selected items up/down\" can re-arrange subtracks"),
                    React.createElement("li", null, "Sorting the data grid itself can also re-arrange subtracks"),
                    React.createElement("li", null, "Changes are applied when you hit Submit"),
                    React.createElement("li", null, "You can click and drag the dialog box to move it on the screen"),
                    React.createElement("li", null, "Columns in the table can be hidden using a vertical '...' menu on the right side of each column")))) : null,
            React.createElement(SourcesGrid, { rows: currLayout, onChange: setCurrLayout, showTips: showTips })),
        React.createElement(DialogActions, null,
            React.createElement(Button, { variant: "contained", type: "submit", color: "inherit", onClick: () => {
                    model.clearLayout();
                    setCurrLayout(model.sources || []);
                } }, "Clear custom settings"),
            React.createElement(Button, { variant: "contained", color: "secondary", onClick: () => {
                    handleClose();
                    setCurrLayout([...(model.sources || [])]);
                } }, "Cancel"),
            React.createElement(Button, { variant: "contained", color: "primary", type: "submit", onClick: () => {
                    model.setLayout(currLayout);
                    handleClose();
                } }, "Submit"))));
}
function SourcesGrid({ rows, onChange, showTips, }) {
    const [anchorEl, setAnchorEl] = useState(null);
    const [selected, setSelected] = useState([]);
    // @ts-ignore
    const { name: _name, color: _color, baseUri: _baseUri, ...rest } = rows[0];
    // similar to BaseFeatureDetail data-grid for auto-measuring columns
    const columns = [
        {
            field: 'color',
            headerName: 'Color',
            renderCell: (params) => {
                const { value, id } = params;
                return (React.createElement(ColorPicker, { color: value || 'blue', onChange: c => {
                        const elt = rows.find(f => f.name === id);
                        if (elt) {
                            elt.color = c;
                        }
                        onChange([...rows]);
                    } }));
            },
        },
        {
            field: 'name',
            sortingOrder: [null],
            headerName: 'Name',
            width: measureGridWidth(rows.map(r => r.name)),
        },
        ...Object.keys(rest).map(val => ({
            field: val,
            sortingOrder: [null],
            renderCell: (params) => {
                const { value } = params;
                return isUriLocation(value) ? React.createElement(UriLink, { value: value }) : getStr(value);
            },
            // @ts-ignore
            width: measureGridWidth(rows.map(r => r[val])),
        })),
    ];
    // this helps keep track of the selection, even though it is not used
    // anywhere except inside the picker
    const [widgetColor, setWidgetColor] = useState('blue');
    const [currSort, setCurrSort] = useState({ idx: 0, field: null });
    return (React.createElement("div", null,
        React.createElement(Button, { disabled: !selected.length, onClick: event => setAnchorEl(event.currentTarget) }, "Change color of selected items"),
        React.createElement(Button, { onClick: () => onChange(moveUp([...rows], selected)), disabled: !selected.length },
            React.createElement(KeyboardArrowUpIcon, null),
            showTips ? 'Move selected items up' : null),
        React.createElement(Button, { onClick: () => onChange(moveDown([...rows], selected)), disabled: !selected.length },
            React.createElement(KeyboardArrowDownIcon, null),
            showTips ? 'Move selected items down' : null),
        React.createElement(Button, { onClick: () => onChange(moveUp([...rows], selected, rows.length)), disabled: !selected.length },
            React.createElement(KeyboardDoubleArrowUpIcon, null),
            showTips ? 'Move selected items to top' : null),
        React.createElement(Button, { onClick: () => onChange(moveDown([...rows], selected, rows.length)), disabled: !selected.length },
            React.createElement(KeyboardDoubleArrowDownIcon, null),
            showTips ? 'Move selected items to bottom' : null),
        React.createElement(ColorPopover, { anchorEl: anchorEl, color: widgetColor, onChange: c => {
                setWidgetColor(c);
                selected.forEach(id => {
                    const elt = rows.find(f => f.name === id);
                    if (elt) {
                        elt.color = c;
                    }
                });
                onChange([...rows]);
            }, onClose: () => setAnchorEl(null) }),
        React.createElement("div", { style: { height: 400, width: '100%' } },
            React.createElement(DataGrid, { getRowId: row => row.name, checkboxSelection: true, disableSelectionOnClick: true, onSelectionModelChange: arg => setSelected(arg), rows: rows, rowHeight: 25, headerHeight: 33, columns: columns, sortModel: [
                /* we control the sort as a controlled component using onSortModelChange */
                ], onSortModelChange: args => {
                    const sort = args[0];
                    const idx = (currSort.idx + 1) % 2;
                    const field = (sort === null || sort === void 0 ? void 0 : sort.field) || currSort.field;
                    setCurrSort({ idx, field });
                    onChange(field
                        ? [...rows].sort((a, b) => {
                            // @ts-ignore
                            const aa = getStr(a[field]);
                            // @ts-ignore
                            const bb = getStr(b[field]);
                            return idx === 1
                                ? aa.localeCompare(bb)
                                : bb.localeCompare(aa);
                        })
                        : rows);
                } }))));
}
//# sourceMappingURL=SetColorDialog.js.map